# compiler: R8
# compiler_version: 1.5.69
# min_api: 14
# pg_map_id: 1a66c51
android.support.v4.app.INotificationSideChannel -> android.support.v4.app.a:
android.support.v4.app.INotificationSideChannel$Stub -> android.support.v4.app.a$a:
android.support.v4.app.INotificationSideChannel$Stub$Proxy -> android.support.v4.app.a$a$a:
    android.os.IBinder mRemote -> a
android.support.v4.media.MediaBrowserCompat -> android.support.v4.media.MediaBrowserCompat:
    boolean DEBUG -> b
    android.support.v4.media.MediaBrowserCompat$MediaBrowserImpl mImpl -> a
    void connect() -> a
    void disconnect() -> b
    android.support.v4.media.session.MediaSessionCompat$Token getSessionToken() -> c
android.support.v4.media.MediaBrowserCompat$CallbackHandler -> android.support.v4.media.MediaBrowserCompat$a:
    java.lang.ref.WeakReference mCallbacksMessengerRef -> b
    java.lang.ref.WeakReference mCallbackImplRef -> a
    void setCallbacksMessenger(android.os.Messenger) -> a
android.support.v4.media.MediaBrowserCompat$ConnectionCallback -> android.support.v4.media.MediaBrowserCompat$b:
android.support.v4.media.MediaBrowserCompat$ConnectionCallback$ConnectionCallbackInternal -> android.support.v4.media.MediaBrowserCompat$b$a:
    void onConnectionSuspended() -> a
    void onConnected() -> b
    void onConnectionFailed() -> c
android.support.v4.media.MediaBrowserCompat$ConnectionCallback$StubApi21 -> android.support.v4.media.MediaBrowserCompat$b$b:
    android.support.v4.media.MediaBrowserCompat$ConnectionCallback this$0 -> a
    void onConnectionSuspended() -> a
    void onConnected() -> b
    void onConnectionFailed() -> c
android.support.v4.media.MediaBrowserCompat$CustomActionCallback -> android.support.v4.media.MediaBrowserCompat$c:
    void onError(java.lang.String,android.os.Bundle,android.os.Bundle) -> a
    void onProgressUpdate(java.lang.String,android.os.Bundle,android.os.Bundle) -> b
    void onResult(java.lang.String,android.os.Bundle,android.os.Bundle) -> c
android.support.v4.media.MediaBrowserCompat$CustomActionResultReceiver -> android.support.v4.media.MediaBrowserCompat$CustomActionResultReceiver:
    android.os.Bundle mExtras -> e
    android.support.v4.media.MediaBrowserCompat$CustomActionCallback mCallback -> f
    java.lang.String mAction -> d
    void onReceiveResult(int,android.os.Bundle) -> a
android.support.v4.media.MediaBrowserCompat$ItemCallback -> android.support.v4.media.MediaBrowserCompat$d:
    void onError(java.lang.String) -> a
    void onItemLoaded(android.support.v4.media.MediaBrowserCompat$MediaItem) -> a
android.support.v4.media.MediaBrowserCompat$ItemReceiver -> android.support.v4.media.MediaBrowserCompat$ItemReceiver:
    android.support.v4.media.MediaBrowserCompat$ItemCallback mCallback -> e
    java.lang.String mMediaId -> d
    void onReceiveResult(int,android.os.Bundle) -> a
android.support.v4.media.MediaBrowserCompat$MediaBrowserImpl -> android.support.v4.media.MediaBrowserCompat$e:
    android.support.v4.media.session.MediaSessionCompat$Token getSessionToken() -> d
    void disconnect() -> e
    void connect() -> f
android.support.v4.media.MediaBrowserCompat$MediaBrowserImplApi21 -> android.support.v4.media.MediaBrowserCompat$f:
    android.content.Context mContext -> a
    android.support.v4.media.MediaBrowserCompat$CallbackHandler mHandler -> d
    android.os.Messenger mCallbacksMessenger -> g
    android.os.Bundle mRootHints -> c
    android.support.v4.media.session.MediaSessionCompat$Token mMediaSessionToken -> h
    android.support.v4.media.MediaBrowserCompat$ServiceBinderWrapper mServiceBinderWrapper -> f
    java.lang.Object mBrowserObj -> b
    androidx.collection.ArrayMap mSubscriptions -> e
    void onConnectionFailed(android.os.Messenger) -> a
    void onConnectionSuspended() -> a
    void onLoadChildren(android.os.Messenger,java.lang.String,java.util.List,android.os.Bundle,android.os.Bundle) -> a
    void onServiceConnected(android.os.Messenger,java.lang.String,android.support.v4.media.session.MediaSessionCompat$Token,android.os.Bundle) -> a
    void onConnected() -> b
    void onConnectionFailed() -> c
    android.support.v4.media.session.MediaSessionCompat$Token getSessionToken() -> d
    void disconnect() -> e
    void connect() -> f
android.support.v4.media.MediaBrowserCompat$MediaBrowserImplApi23 -> android.support.v4.media.MediaBrowserCompat$g:
android.support.v4.media.MediaBrowserCompat$MediaBrowserImplApi26 -> android.support.v4.media.MediaBrowserCompat$h:
android.support.v4.media.MediaBrowserCompat$MediaBrowserImplBase -> android.support.v4.media.MediaBrowserCompat$i:
    android.content.Context mContext -> a
    android.content.ComponentName mServiceComponent -> b
    android.support.v4.media.session.MediaSessionCompat$Token mMediaSessionToken -> l
    android.support.v4.media.MediaBrowserCompat$ConnectionCallback mCallback -> c
    android.support.v4.media.MediaBrowserCompat$CallbackHandler mHandler -> e
    java.lang.String mRootId -> k
    android.os.Bundle mRootHints -> d
    android.support.v4.media.MediaBrowserCompat$ServiceBinderWrapper mServiceBinderWrapper -> i
    androidx.collection.ArrayMap mSubscriptions -> f
    int mState -> g
    android.support.v4.media.MediaBrowserCompat$MediaBrowserImplBase$MediaServiceConnection mServiceConnection -> h
    android.os.Messenger mCallbacksMessenger -> j
    void dump() -> a
    java.lang.String getStateLabel(int) -> a
    boolean isCurrent(android.os.Messenger,java.lang.String) -> a
    void onConnectionFailed(android.os.Messenger) -> a
    void onLoadChildren(android.os.Messenger,java.lang.String,java.util.List,android.os.Bundle,android.os.Bundle) -> a
    void onServiceConnected(android.os.Messenger,java.lang.String,android.support.v4.media.session.MediaSessionCompat$Token,android.os.Bundle) -> a
    void forceCloseConnection() -> b
    boolean isConnected() -> c
    android.support.v4.media.session.MediaSessionCompat$Token getSessionToken() -> d
    void disconnect() -> e
    void connect() -> f
android.support.v4.media.MediaBrowserCompat$MediaBrowserImplBase$1 -> android.support.v4.media.MediaBrowserCompat$i$a:
    android.support.v4.media.MediaBrowserCompat$MediaBrowserImplBase this$0 -> a
android.support.v4.media.MediaBrowserCompat$MediaBrowserImplBase$2 -> android.support.v4.media.MediaBrowserCompat$i$b:
    android.support.v4.media.MediaBrowserCompat$MediaBrowserImplBase this$0 -> a
android.support.v4.media.MediaBrowserCompat$MediaBrowserImplBase$MediaServiceConnection -> android.support.v4.media.MediaBrowserCompat$i$c:
    android.support.v4.media.MediaBrowserCompat$MediaBrowserImplBase this$0 -> a
    boolean isCurrent(java.lang.String) -> a
    void postOrRun(java.lang.Runnable) -> a
android.support.v4.media.MediaBrowserCompat$MediaBrowserImplBase$MediaServiceConnection$1 -> android.support.v4.media.MediaBrowserCompat$i$c$a:
    android.os.IBinder val$binder -> b
    android.content.ComponentName val$name -> a
    android.support.v4.media.MediaBrowserCompat$MediaBrowserImplBase$MediaServiceConnection this$1 -> c
android.support.v4.media.MediaBrowserCompat$MediaBrowserImplBase$MediaServiceConnection$2 -> android.support.v4.media.MediaBrowserCompat$i$c$b:
    android.content.ComponentName val$name -> a
    android.support.v4.media.MediaBrowserCompat$MediaBrowserImplBase$MediaServiceConnection this$1 -> b
android.support.v4.media.MediaBrowserCompat$MediaBrowserServiceCallbackImpl -> android.support.v4.media.MediaBrowserCompat$j:
    void onConnectionFailed(android.os.Messenger) -> a
    void onLoadChildren(android.os.Messenger,java.lang.String,java.util.List,android.os.Bundle,android.os.Bundle) -> a
    void onServiceConnected(android.os.Messenger,java.lang.String,android.support.v4.media.session.MediaSessionCompat$Token,android.os.Bundle) -> a
android.support.v4.media.MediaBrowserCompat$MediaItem -> android.support.v4.media.MediaBrowserCompat$MediaItem:
    android.support.v4.media.MediaDescriptionCompat mDescription -> b
    int mFlags -> a
    android.support.v4.media.MediaBrowserCompat$MediaItem fromMediaItem(java.lang.Object) -> a
    java.util.List fromMediaItemList(java.util.List) -> a
android.support.v4.media.MediaBrowserCompat$MediaItem$1 -> android.support.v4.media.MediaBrowserCompat$MediaItem$a:
android.support.v4.media.MediaBrowserCompat$SearchCallback -> android.support.v4.media.MediaBrowserCompat$k:
    void onError(java.lang.String,android.os.Bundle) -> a
    void onSearchResult(java.lang.String,android.os.Bundle,java.util.List) -> a
android.support.v4.media.MediaBrowserCompat$SearchResultReceiver -> android.support.v4.media.MediaBrowserCompat$SearchResultReceiver:
    android.os.Bundle mExtras -> e
    android.support.v4.media.MediaBrowserCompat$SearchCallback mCallback -> f
    java.lang.String mQuery -> d
    void onReceiveResult(int,android.os.Bundle) -> a
android.support.v4.media.MediaBrowserCompat$ServiceBinderWrapper -> android.support.v4.media.MediaBrowserCompat$l:
    android.os.Messenger mMessenger -> a
    android.os.Bundle mRootHints -> b
    void addSubscription(java.lang.String,android.os.IBinder,android.os.Bundle,android.os.Messenger) -> a
    void connect(android.content.Context,android.os.Messenger) -> a
    void disconnect(android.os.Messenger) -> a
    void sendRequest(int,android.os.Bundle,android.os.Messenger) -> a
    void registerCallbackMessenger(android.content.Context,android.os.Messenger) -> b
    void unregisterCallbackMessenger(android.os.Messenger) -> b
android.support.v4.media.MediaBrowserCompat$Subscription -> android.support.v4.media.MediaBrowserCompat$m:
    java.util.List mOptionsList -> b
    java.util.List mCallbacks -> a
    android.support.v4.media.MediaBrowserCompat$SubscriptionCallback getCallback(android.os.Bundle) -> a
    java.util.List getCallbacks() -> a
    java.util.List getOptionsList() -> b
android.support.v4.media.MediaBrowserCompat$SubscriptionCallback -> android.support.v4.media.MediaBrowserCompat$n:
    android.os.IBinder mToken -> a
    java.lang.ref.WeakReference mSubscriptionRef -> b
    void onChildrenLoaded(java.lang.String,java.util.List) -> a
    void onChildrenLoaded(java.lang.String,java.util.List,android.os.Bundle) -> a
    void onError(java.lang.String) -> a
    void onError(java.lang.String,android.os.Bundle) -> a
android.support.v4.media.MediaBrowserCompat$SubscriptionCallback$StubApi21 -> android.support.v4.media.MediaBrowserCompat$n$a:
    android.support.v4.media.MediaBrowserCompat$SubscriptionCallback this$0 -> a
    java.util.List applyOptions(java.util.List,android.os.Bundle) -> a
    void onChildrenLoaded(java.lang.String,java.util.List) -> a
    void onError(java.lang.String) -> a
android.support.v4.media.MediaBrowserCompat$SubscriptionCallback$StubApi26 -> android.support.v4.media.MediaBrowserCompat$n$b:
    android.support.v4.media.MediaBrowserCompat$SubscriptionCallback this$0 -> b
    void onChildrenLoaded(java.lang.String,java.util.List,android.os.Bundle) -> a
    void onError(java.lang.String,android.os.Bundle) -> a
android.support.v4.media.MediaBrowserCompatApi21 -> android.support.v4.media.a:
    void connect(java.lang.Object) -> a
    java.lang.Object createBrowser(android.content.Context,android.content.ComponentName,java.lang.Object,android.os.Bundle) -> a
    java.lang.Object createConnectionCallback(android.support.v4.media.MediaBrowserCompatApi21$ConnectionCallback) -> a
    java.lang.Object createSubscriptionCallback(android.support.v4.media.MediaBrowserCompatApi21$SubscriptionCallback) -> a
    void disconnect(java.lang.Object) -> b
    android.os.Bundle getExtras(java.lang.Object) -> c
    java.lang.Object getSessionToken(java.lang.Object) -> d
android.support.v4.media.MediaBrowserCompatApi21$ConnectionCallback -> android.support.v4.media.a$a:
    void onConnectionSuspended() -> a
    void onConnected() -> b
    void onConnectionFailed() -> c
android.support.v4.media.MediaBrowserCompatApi21$ConnectionCallbackProxy -> android.support.v4.media.a$b:
    android.support.v4.media.MediaBrowserCompatApi21$ConnectionCallback mConnectionCallback -> a
android.support.v4.media.MediaBrowserCompatApi21$MediaItem -> android.support.v4.media.a$c:
    java.lang.Object getDescription(java.lang.Object) -> a
    int getFlags(java.lang.Object) -> b
android.support.v4.media.MediaBrowserCompatApi21$SubscriptionCallback -> android.support.v4.media.a$d:
    void onChildrenLoaded(java.lang.String,java.util.List) -> a
    void onError(java.lang.String) -> a
android.support.v4.media.MediaBrowserCompatApi21$SubscriptionCallbackProxy -> android.support.v4.media.a$e:
    android.support.v4.media.MediaBrowserCompatApi21$SubscriptionCallback mSubscriptionCallback -> a
android.support.v4.media.MediaBrowserCompatApi26 -> android.support.v4.media.b:
    java.lang.Object createSubscriptionCallback(android.support.v4.media.MediaBrowserCompatApi26$SubscriptionCallback) -> a
android.support.v4.media.MediaBrowserCompatApi26$SubscriptionCallback -> android.support.v4.media.b$a:
    void onChildrenLoaded(java.lang.String,java.util.List,android.os.Bundle) -> a
    void onError(java.lang.String,android.os.Bundle) -> a
android.support.v4.media.MediaBrowserCompatApi26$SubscriptionCallbackProxy -> android.support.v4.media.b$b:
android.support.v4.media.MediaDescriptionCompat -> android.support.v4.media.MediaDescriptionCompat:
    android.net.Uri mMediaUri -> h
    android.net.Uri mIconUri -> f
    java.lang.Object mDescriptionObj -> i
    java.lang.CharSequence mTitle -> b
    java.lang.CharSequence mSubtitle -> c
    java.lang.CharSequence mDescription -> d
    android.os.Bundle mExtras -> g
    java.lang.String mMediaId -> a
    android.graphics.Bitmap mIcon -> e
    android.support.v4.media.MediaDescriptionCompat fromMediaDescription(java.lang.Object) -> a
    java.lang.Object getMediaDescription() -> a
    java.lang.String getMediaId() -> b
android.support.v4.media.MediaDescriptionCompat$1 -> android.support.v4.media.MediaDescriptionCompat$a:
android.support.v4.media.MediaDescriptionCompat$Builder -> android.support.v4.media.MediaDescriptionCompat$b:
    android.net.Uri mMediaUri -> h
    android.net.Uri mIconUri -> f
    java.lang.CharSequence mTitle -> b
    java.lang.CharSequence mSubtitle -> c
    java.lang.CharSequence mDescription -> d
    android.os.Bundle mExtras -> g
    java.lang.String mMediaId -> a
    android.graphics.Bitmap mIcon -> e
    android.support.v4.media.MediaDescriptionCompat build() -> a
    android.support.v4.media.MediaDescriptionCompat$Builder setDescription(java.lang.CharSequence) -> a
    android.support.v4.media.MediaDescriptionCompat$Builder setExtras(android.os.Bundle) -> a
    android.support.v4.media.MediaDescriptionCompat$Builder setIconBitmap(android.graphics.Bitmap) -> a
    android.support.v4.media.MediaDescriptionCompat$Builder setIconUri(android.net.Uri) -> a
    android.support.v4.media.MediaDescriptionCompat$Builder setMediaId(java.lang.String) -> a
    android.support.v4.media.MediaDescriptionCompat$Builder setMediaUri(android.net.Uri) -> b
    android.support.v4.media.MediaDescriptionCompat$Builder setSubtitle(java.lang.CharSequence) -> b
    android.support.v4.media.MediaDescriptionCompat$Builder setTitle(java.lang.CharSequence) -> c
android.support.v4.media.MediaDescriptionCompatApi21 -> android.support.v4.media.c:
    java.lang.Object fromParcel(android.os.Parcel) -> a
    java.lang.CharSequence getDescription(java.lang.Object) -> a
    void writeToParcel(java.lang.Object,android.os.Parcel,int) -> a
    android.os.Bundle getExtras(java.lang.Object) -> b
    android.graphics.Bitmap getIconBitmap(java.lang.Object) -> c
    android.net.Uri getIconUri(java.lang.Object) -> d
    java.lang.String getMediaId(java.lang.Object) -> e
    java.lang.CharSequence getSubtitle(java.lang.Object) -> f
    java.lang.CharSequence getTitle(java.lang.Object) -> g
android.support.v4.media.MediaDescriptionCompatApi21$Builder -> android.support.v4.media.c$a:
    java.lang.Object build(java.lang.Object) -> a
    java.lang.Object newInstance() -> a
    void setDescription(java.lang.Object,java.lang.CharSequence) -> a
    void setExtras(java.lang.Object,android.os.Bundle) -> a
    void setIconBitmap(java.lang.Object,android.graphics.Bitmap) -> a
    void setIconUri(java.lang.Object,android.net.Uri) -> a
    void setMediaId(java.lang.Object,java.lang.String) -> a
    void setSubtitle(java.lang.Object,java.lang.CharSequence) -> b
    void setTitle(java.lang.Object,java.lang.CharSequence) -> c
android.support.v4.media.MediaDescriptionCompatApi23 -> android.support.v4.media.d:
    android.net.Uri getMediaUri(java.lang.Object) -> a
android.support.v4.media.MediaDescriptionCompatApi23$Builder -> android.support.v4.media.d$a:
    void setMediaUri(java.lang.Object,android.net.Uri) -> a
android.support.v4.media.MediaMetadataCompat -> android.support.v4.media.MediaMetadataCompat:
    android.os.Bundle mBundle -> a
    java.lang.Object mMetadataObj -> b
    androidx.collection.ArrayMap METADATA_KEYS_TYPE -> c
    android.support.v4.media.MediaMetadataCompat fromMediaMetadata(java.lang.Object) -> a
android.support.v4.media.MediaMetadataCompat$1 -> android.support.v4.media.MediaMetadataCompat$a:
android.support.v4.media.MediaMetadataCompatApi21 -> android.support.v4.media.e:
    void writeToParcel(java.lang.Object,android.os.Parcel,int) -> a
android.support.v4.media.RatingCompat -> android.support.v4.media.RatingCompat:
    float mRatingValue -> b
    int mRatingStyle -> a
android.support.v4.media.RatingCompat$1 -> android.support.v4.media.RatingCompat$a:
android.support.v4.media.session.IMediaControllerCallback -> android.support.v4.media.session.a:
    void onEvent(java.lang.String,android.os.Bundle) -> a
    void onExtrasChanged(android.os.Bundle) -> a
    void onMetadataChanged(android.support.v4.media.MediaMetadataCompat) -> a
    void onPlaybackStateChanged(android.support.v4.media.session.PlaybackStateCompat) -> a
    void onQueueChanged(java.util.List) -> a
    void onQueueTitleChanged(java.lang.CharSequence) -> a
    void onRepeatModeChanged(int) -> a
    void onSessionDestroyed() -> a
    void onShuffleModeChangedRemoved(boolean) -> a
    void onVolumeInfoChanged(android.support.v4.media.session.ParcelableVolumeInfo) -> a
    void onCaptioningEnabledChanged(boolean) -> b
    void onSessionReady() -> b
    void onShuffleModeChanged(int) -> b
android.support.v4.media.session.IMediaControllerCallback$Stub -> android.support.v4.media.session.a$a:
android.support.v4.media.session.IMediaSession -> android.support.v4.media.session.b:
    void registerCallbackListener(android.support.v4.media.session.IMediaControllerCallback) -> a
    boolean sendMediaButton(android.view.KeyEvent) -> a
android.support.v4.media.session.IMediaSession$Stub -> android.support.v4.media.session.b$a:
    android.support.v4.media.session.IMediaSession asInterface(android.os.IBinder) -> a
android.support.v4.media.session.IMediaSession$Stub$Proxy -> android.support.v4.media.session.b$a$a:
    android.os.IBinder mRemote -> a
    void registerCallbackListener(android.support.v4.media.session.IMediaControllerCallback) -> a
    boolean sendMediaButton(android.view.KeyEvent) -> a
android.support.v4.media.session.MediaControllerCompat -> android.support.v4.media.session.MediaControllerCompat:
    android.support.v4.media.session.MediaControllerCompat$MediaControllerImpl mImpl -> a
    boolean dispatchMediaButtonEvent(android.view.KeyEvent) -> a
android.support.v4.media.session.MediaControllerCompat$Callback -> android.support.v4.media.session.MediaControllerCompat$a:
    android.support.v4.media.session.MediaControllerCompat$Callback$MessageHandler mHandler -> a
    android.support.v4.media.session.IMediaControllerCallback mIControllerCallback -> b
    void onAudioInfoChanged(android.support.v4.media.session.MediaControllerCompat$PlaybackInfo) -> a
    void onExtrasChanged(android.os.Bundle) -> a
    void onMetadataChanged(android.support.v4.media.MediaMetadataCompat) -> a
    void onPlaybackStateChanged(android.support.v4.media.session.PlaybackStateCompat) -> a
    void onQueueChanged(java.util.List) -> a
    void onQueueTitleChanged(java.lang.CharSequence) -> a
    void onSessionDestroyed() -> a
    void onSessionEvent(java.lang.String,android.os.Bundle) -> a
    void postToHandler(int,java.lang.Object,android.os.Bundle) -> a
android.support.v4.media.session.MediaControllerCompat$Callback$MessageHandler -> android.support.v4.media.session.MediaControllerCompat$a$a:
android.support.v4.media.session.MediaControllerCompat$Callback$StubApi21 -> android.support.v4.media.session.MediaControllerCompat$a$b:
    java.lang.ref.WeakReference mCallback -> a
    void onAudioInfoChanged(int,int,int,int,int) -> a
    void onExtrasChanged(android.os.Bundle) -> a
    void onPlaybackStateChanged(java.lang.Object) -> a
    void onQueueChanged(java.util.List) -> a
    void onQueueTitleChanged(java.lang.CharSequence) -> a
    void onSessionDestroyed() -> a
    void onSessionEvent(java.lang.String,android.os.Bundle) -> a
    void onMetadataChanged(java.lang.Object) -> b
android.support.v4.media.session.MediaControllerCompat$Callback$StubCompat -> android.support.v4.media.session.MediaControllerCompat$a$c:
    java.lang.ref.WeakReference mCallback -> a
    void onEvent(java.lang.String,android.os.Bundle) -> a
    void onExtrasChanged(android.os.Bundle) -> a
    void onMetadataChanged(android.support.v4.media.MediaMetadataCompat) -> a
    void onPlaybackStateChanged(android.support.v4.media.session.PlaybackStateCompat) -> a
    void onQueueChanged(java.util.List) -> a
    void onQueueTitleChanged(java.lang.CharSequence) -> a
    void onRepeatModeChanged(int) -> a
    void onSessionDestroyed() -> a
    void onShuffleModeChangedRemoved(boolean) -> a
    void onVolumeInfoChanged(android.support.v4.media.session.ParcelableVolumeInfo) -> a
    void onCaptioningEnabledChanged(boolean) -> b
    void onSessionReady() -> b
    void onShuffleModeChanged(int) -> b
android.support.v4.media.session.MediaControllerCompat$MediaControllerImpl -> android.support.v4.media.session.MediaControllerCompat$b:
    boolean dispatchMediaButtonEvent(android.view.KeyEvent) -> a
android.support.v4.media.session.MediaControllerCompat$MediaControllerImplApi21 -> android.support.v4.media.session.MediaControllerCompat$MediaControllerImplApi21:
    java.util.List mPendingCallbacks -> c
    java.lang.Object mLock -> b
    android.support.v4.media.session.MediaSessionCompat$Token mSessionToken -> e
    java.lang.Object mControllerObj -> a
    java.util.HashMap mCallbackMap -> d
    boolean dispatchMediaButtonEvent(android.view.KeyEvent) -> a
    void processPendingCallbacksLocked() -> a
    void sendCommand(java.lang.String,android.os.Bundle,android.os.ResultReceiver) -> a
    void requestExtraBinder() -> b
android.support.v4.media.session.MediaControllerCompat$MediaControllerImplApi21$ExtraBinderRequestResultReceiver -> android.support.v4.media.session.MediaControllerCompat$MediaControllerImplApi21$ExtraBinderRequestResultReceiver:
    java.lang.ref.WeakReference mMediaControllerImpl -> a
android.support.v4.media.session.MediaControllerCompat$MediaControllerImplApi21$ExtraCallback -> android.support.v4.media.session.MediaControllerCompat$MediaControllerImplApi21$a:
    void onExtrasChanged(android.os.Bundle) -> a
    void onMetadataChanged(android.support.v4.media.MediaMetadataCompat) -> a
    void onQueueChanged(java.util.List) -> a
    void onQueueTitleChanged(java.lang.CharSequence) -> a
    void onSessionDestroyed() -> a
    void onVolumeInfoChanged(android.support.v4.media.session.ParcelableVolumeInfo) -> a
android.support.v4.media.session.MediaControllerCompat$MediaControllerImplApi23 -> android.support.v4.media.session.MediaControllerCompat$c:
android.support.v4.media.session.MediaControllerCompat$MediaControllerImplApi24 -> android.support.v4.media.session.MediaControllerCompat$d:
android.support.v4.media.session.MediaControllerCompat$MediaControllerImplBase -> android.support.v4.media.session.MediaControllerCompat$e:
    android.support.v4.media.session.IMediaSession mBinder -> a
    boolean dispatchMediaButtonEvent(android.view.KeyEvent) -> a
android.support.v4.media.session.MediaControllerCompat$PlaybackInfo -> android.support.v4.media.session.MediaControllerCompat$f:
android.support.v4.media.session.MediaControllerCompatApi21 -> android.support.v4.media.session.c:
    java.lang.Object createCallback(android.support.v4.media.session.MediaControllerCompatApi21$Callback) -> a
    boolean dispatchMediaButtonEvent(java.lang.Object,android.view.KeyEvent) -> a
    java.lang.Object fromToken(android.content.Context,java.lang.Object) -> a
    void sendCommand(java.lang.Object,java.lang.String,android.os.Bundle,android.os.ResultReceiver) -> a
android.support.v4.media.session.MediaControllerCompatApi21$Callback -> android.support.v4.media.session.c$a:
    void onAudioInfoChanged(int,int,int,int,int) -> a
    void onExtrasChanged(android.os.Bundle) -> a
    void onPlaybackStateChanged(java.lang.Object) -> a
    void onQueueChanged(java.util.List) -> a
    void onQueueTitleChanged(java.lang.CharSequence) -> a
    void onSessionDestroyed() -> a
    void onSessionEvent(java.lang.String,android.os.Bundle) -> a
    void onMetadataChanged(java.lang.Object) -> b
android.support.v4.media.session.MediaControllerCompatApi21$CallbackProxy -> android.support.v4.media.session.c$b:
    android.support.v4.media.session.MediaControllerCompatApi21$Callback mCallback -> a
android.support.v4.media.session.MediaControllerCompatApi21$PlaybackInfo -> android.support.v4.media.session.c$c:
    android.media.AudioAttributes getAudioAttributes(java.lang.Object) -> a
    int toLegacyStreamType(android.media.AudioAttributes) -> a
    int getLegacyAudioStream(java.lang.Object) -> b
android.support.v4.media.session.MediaSessionCompat -> android.support.v4.media.session.MediaSessionCompat:
    android.support.v4.media.session.MediaControllerCompat mController -> a
    void ensureClassLoader(android.os.Bundle) -> a
    android.support.v4.media.session.MediaControllerCompat getController() -> a
android.support.v4.media.session.MediaSessionCompat$QueueItem -> android.support.v4.media.session.MediaSessionCompat$QueueItem:
    android.support.v4.media.MediaDescriptionCompat mDescription -> a
    long mId -> b
    android.support.v4.media.session.MediaSessionCompat$QueueItem fromQueueItem(java.lang.Object) -> a
    java.util.List fromQueueItemList(java.util.List) -> a
android.support.v4.media.session.MediaSessionCompat$QueueItem$1 -> android.support.v4.media.session.MediaSessionCompat$QueueItem$a:
android.support.v4.media.session.MediaSessionCompat$ResultReceiverWrapper -> android.support.v4.media.session.MediaSessionCompat$ResultReceiverWrapper:
    android.os.ResultReceiver mResultReceiver -> a
android.support.v4.media.session.MediaSessionCompat$ResultReceiverWrapper$1 -> android.support.v4.media.session.MediaSessionCompat$ResultReceiverWrapper$a:
android.support.v4.media.session.MediaSessionCompat$Token -> android.support.v4.media.session.MediaSessionCompat$Token:
    android.support.v4.media.session.IMediaSession mExtraBinder -> b
    java.lang.Object mInner -> a
    android.support.v4.media.session.MediaSessionCompat$Token fromToken(java.lang.Object) -> a
    android.support.v4.media.session.MediaSessionCompat$Token fromToken(java.lang.Object,android.support.v4.media.session.IMediaSession) -> a
    android.support.v4.media.session.IMediaSession getExtraBinder() -> a
    void setExtraBinder(android.support.v4.media.session.IMediaSession) -> a
    void setSessionToken2Bundle(android.os.Bundle) -> a
    java.lang.Object getToken() -> b
android.support.v4.media.session.MediaSessionCompat$Token$1 -> android.support.v4.media.session.MediaSessionCompat$Token$a:
android.support.v4.media.session.MediaSessionCompatApi21 -> android.support.v4.media.session.d:
    java.lang.Object verifyToken(java.lang.Object) -> a
android.support.v4.media.session.MediaSessionCompatApi21$QueueItem -> android.support.v4.media.session.d$a:
    java.lang.Object getDescription(java.lang.Object) -> a
    long getQueueId(java.lang.Object) -> b
android.support.v4.media.session.ParcelableVolumeInfo -> android.support.v4.media.session.ParcelableVolumeInfo:
    int maxVolume -> d
    int currentVolume -> e
    int audioStream -> b
    int controlType -> c
    int volumeType -> a
android.support.v4.media.session.ParcelableVolumeInfo$1 -> android.support.v4.media.session.ParcelableVolumeInfo$a:
android.support.v4.media.session.PlaybackStateCompat -> android.support.v4.media.session.PlaybackStateCompat:
    long mActiveItemId -> j
    long mActions -> e
    long mUpdateTime -> h
    long mPosition -> b
    float mSpeed -> d
    int mErrorCode -> f
    java.util.List mCustomActions -> i
    long mBufferedPosition -> c
    java.lang.CharSequence mErrorMessage -> g
    android.os.Bundle mExtras -> k
    int mState -> a
    android.support.v4.media.session.PlaybackStateCompat fromPlaybackState(java.lang.Object) -> a
    int toKeyCode(long) -> a
android.support.v4.media.session.PlaybackStateCompat$1 -> android.support.v4.media.session.PlaybackStateCompat$a:
android.support.v4.media.session.PlaybackStateCompat$CustomAction -> android.support.v4.media.session.PlaybackStateCompat$CustomAction:
    java.lang.CharSequence mName -> b
    android.os.Bundle mExtras -> d
    java.lang.String mAction -> a
    int mIcon -> c
    android.support.v4.media.session.PlaybackStateCompat$CustomAction fromCustomAction(java.lang.Object) -> a
android.support.v4.media.session.PlaybackStateCompat$CustomAction$1 -> android.support.v4.media.session.PlaybackStateCompat$CustomAction$a:
android.support.v4.media.session.PlaybackStateCompatApi21 -> android.support.v4.media.session.e:
    long getActions(java.lang.Object) -> a
    long getActiveQueueItemId(java.lang.Object) -> b
    long getBufferedPosition(java.lang.Object) -> c
    java.util.List getCustomActions(java.lang.Object) -> d
    java.lang.CharSequence getErrorMessage(java.lang.Object) -> e
    long getLastPositionUpdateTime(java.lang.Object) -> f
    float getPlaybackSpeed(java.lang.Object) -> g
    long getPosition(java.lang.Object) -> h
    int getState(java.lang.Object) -> i
android.support.v4.media.session.PlaybackStateCompatApi21$CustomAction -> android.support.v4.media.session.e$a:
    java.lang.String getAction(java.lang.Object) -> a
    android.os.Bundle getExtras(java.lang.Object) -> b
    int getIcon(java.lang.Object) -> c
    java.lang.CharSequence getName(java.lang.Object) -> d
android.support.v4.media.session.PlaybackStateCompatApi22 -> android.support.v4.media.session.f:
    android.os.Bundle getExtras(java.lang.Object) -> a
android.support.v4.os.IResultReceiver -> android.support.v4.os.a:
    void send(int,android.os.Bundle) -> a
android.support.v4.os.IResultReceiver$Stub -> android.support.v4.os.a$a:
    android.support.v4.os.IResultReceiver asInterface(android.os.IBinder) -> a
android.support.v4.os.IResultReceiver$Stub$Proxy -> android.support.v4.os.a$a$a:
    android.os.IBinder mRemote -> a
    void send(int,android.os.Bundle) -> a
android.support.v4.os.ResultReceiver -> android.support.v4.os.ResultReceiver:
    android.os.Handler mHandler -> b
    android.support.v4.os.IResultReceiver mReceiver -> c
    boolean mLocal -> a
    void onReceiveResult(int,android.os.Bundle) -> a
    void send(int,android.os.Bundle) -> b
android.support.v4.os.ResultReceiver$1 -> android.support.v4.os.ResultReceiver$a:
android.support.v4.os.ResultReceiver$MyResultReceiver -> android.support.v4.os.ResultReceiver$b:
    android.support.v4.os.ResultReceiver this$0 -> a
    void send(int,android.os.Bundle) -> a
android.support.v4.os.ResultReceiver$MyRunnable -> android.support.v4.os.ResultReceiver$c:
    android.os.Bundle mResultData -> b
    android.support.v4.os.ResultReceiver this$0 -> c
    int mResultCode -> a
com.github.machinarius.preferencefragment.PreferenceFragment -> a.a.a.a.a:
    android.os.Handler mHandler -> e
    android.view.View$OnKeyListener mListOnKeyListener -> g
    java.lang.Runnable mRequestFocus -> f
    android.widget.ListView mList -> b
    boolean mHavePrefs -> c
    android.preference.PreferenceManager mPreferenceManager -> a
    boolean mInitDone -> d
    void access$000(com.github.machinarius.preferencefragment.PreferenceFragment) -> a
    android.preference.Preference findPreference(java.lang.CharSequence) -> a
    boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference) -> a
    void setPreferenceScreen(android.preference.PreferenceScreen) -> a
    android.widget.ListView access$100(com.github.machinarius.preferencefragment.PreferenceFragment) -> b
    android.preference.PreferenceManager getPreferenceManager() -> b
    android.preference.PreferenceScreen getPreferenceScreen() -> c
    void bindPreferences() -> d
    void postBindPreferences() -> e
com.github.machinarius.preferencefragment.PreferenceFragment$1 -> a.a.a.a.a$a:
    com.github.machinarius.preferencefragment.PreferenceFragment this$0 -> a
com.github.machinarius.preferencefragment.PreferenceFragment$2 -> a.a.a.a.a$b:
    com.github.machinarius.preferencefragment.PreferenceFragment this$0 -> a
com.github.machinarius.preferencefragment.PreferenceFragment$3 -> a.a.a.a.a$c:
    com.github.machinarius.preferencefragment.PreferenceFragment this$0 -> a
com.github.machinarius.preferencefragment.PreferenceFragment$OnPreferenceStartFragmentCallback -> a.a.a.a.a$d:
    boolean onPreferenceStartFragment(com.github.machinarius.preferencefragment.PreferenceFragment,android.preference.Preference) -> a
com.github.machinarius.preferencefragment.PreferenceManagerCompat -> a.a.a.a.b:
    java.lang.String TAG -> a
    void dispatchActivityDestroy(android.preference.PreferenceManager) -> a
    void dispatchActivityResult(android.preference.PreferenceManager,int,int,android.content.Intent) -> a
    android.preference.PreferenceManager newInstance(android.app.Activity,int) -> a
    void setFragment(android.preference.PreferenceManager,com.github.machinarius.preferencefragment.PreferenceFragment) -> a
    void setOnPreferenceTreeClickListener(android.preference.PreferenceManager,com.github.machinarius.preferencefragment.PreferenceManagerCompat$OnPreferenceTreeClickListener) -> a
    boolean setPreferences(android.preference.PreferenceManager,android.preference.PreferenceScreen) -> a
    void dispatchActivityStop(android.preference.PreferenceManager) -> b
    android.preference.PreferenceScreen getPreferenceScreen(android.preference.PreferenceManager) -> c
com.github.machinarius.preferencefragment.PreferenceManagerCompat$1 -> a.a.a.a.b$a:
    com.github.machinarius.preferencefragment.PreferenceManagerCompat$OnPreferenceTreeClickListener val$listener -> a
com.github.machinarius.preferencefragment.PreferenceManagerCompat$OnPreferenceTreeClickListener -> a.a.a.a.b$b:
    boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference) -> a
de.koelle.christian.common.abs.ActionBarSupport -> b.a.a.a.a.a:
    void addBackButton(androidx.appcompat.app.ActionBar) -> a
    void addBackButton(androidx.appcompat.app.AppCompatActivity) -> a
de.koelle.christian.common.ascii.AsciTable -> b.a.a.a.b.a:
    void appendLine(java.lang.StringBuffer,int,java.lang.String,java.lang.String,java.lang.String) -> a
    java.lang.String buildLayout(de.koelle.christian.common.ascii.AsciTable$Cell[][],int,int,int,int,int) -> a
    void computeMaxHeightWidth(de.koelle.christian.common.ascii.AsciTable$Cell[][],int[],int[]) -> a
    java.lang.String createDoppelTrennLinie(int[]) -> a
    int getMaxLength(java.lang.String[]) -> a
    java.lang.String[] splitForNewline(java.lang.String) -> a
    java.lang.String strAlign(java.lang.String,int) -> a
    java.lang.String createEinfachTrennLinie(int[]) -> b
    java.lang.String strLeftAlign(java.lang.String,int) -> b
    java.lang.String createLeerTrennLinie(int[]) -> c
    java.lang.String strReplicate(java.lang.String,int) -> c
de.koelle.christian.common.ascii.AsciTable$Cell -> b.a.a.a.b.a$a:
    int alignment -> a
    java.lang.String[] contentLineArr -> b
    int getHeight() -> a
    java.lang.String getLine(int,int) -> a
    void setAlignment(int) -> a
    int getWidth() -> b
de.koelle.christian.common.ascii.AsciTableLayoutTableInterface -> b.a.a.a.b.b:
    java.lang.Object asciTableColumnContent(int) -> a
    java.lang.String[] asciTableColumnNames() -> a
de.koelle.christian.common.ascii.AsciToStringHelper -> b.a.a.a.b.c:
    java.util.regex.Pattern numberPattern -> a
    java.lang.String asciToString(de.koelle.christian.common.ascii.AsciTableLayoutTableInterface[]) -> a
    java.lang.String cutRight(java.lang.String,java.lang.String) -> a
    boolean isNumeric(java.lang.Object) -> a
    boolean isNumeric2(java.lang.String) -> a
de.koelle.christian.common.changelog.ChangeLog -> b.a.a.a.c.a:
    android.content.Context context -> a
    de.koelle.christian.common.changelog.ChangeLog$Listmode listMode -> d
    java.lang.StringBuffer sb -> e
    java.lang.String thisVersion -> c
    java.lang.String lastVersion -> b
    boolean firstRun() -> a
    android.app.AlertDialog getDialog(boolean) -> a
    void openList(de.koelle.christian.common.changelog.ChangeLog$Listmode) -> a
    boolean firstRunEver() -> b
    java.lang.String getLog(boolean) -> b
    android.app.AlertDialog getFullLogDialog() -> c
    android.app.AlertDialog getLogDialog() -> d
    void closeList() -> e
de.koelle.christian.common.changelog.ChangeLog$1 -> b.a.a.a.c.a$a:
    android.content.SharedPreferences val$sp -> a
    java.lang.String val$thisFinalVersion -> b
de.koelle.christian.common.changelog.ChangeLog$2 -> b.a.a.a.c.a$b:
de.koelle.christian.common.changelog.ChangeLog$3 -> b.a.a.a.c.a$c:
    de.koelle.christian.common.changelog.ChangeLog this$0 -> a
de.koelle.christian.common.changelog.ChangeLog$Listmode -> b.a.a.a.c.a$d:
    de.koelle.christian.common.changelog.ChangeLog$Listmode NONE -> a
    de.koelle.christian.common.changelog.ChangeLog$Listmode ORDERED -> b
    de.koelle.christian.common.changelog.ChangeLog$Listmode UNORDERED -> c
    de.koelle.christian.common.changelog.ChangeLog$Listmode[] $VALUES -> d
de.koelle.christian.common.io.FileWriter -> b.a.a.a.d.a:
    java.io.File write(java.lang.String,java.lang.StringBuilder) -> a
de.koelle.christian.common.io.impl.AppFileWriter -> b.a.a.a.d.b.a:
    android.content.Context context -> a
    boolean isCacheDirNotFileDir -> b
    int mode -> c
    void save(java.io.ByteArrayOutputStream,java.lang.String,java.lang.String) -> a
    java.io.File write(java.lang.String,java.lang.StringBuilder) -> a
    void writeContentsToDisc(java.lang.String,android.content.ContentResolver,java.util.List) -> a
de.koelle.christian.common.json.AsyncJsonParser -> b.a.a.a.e.a:
    okhttp3.OkHttpClient client -> a
    java.util.List calls -> b
    void cancelRunningRequests(android.content.Context) -> a
    void getJSONFromUrl(android.content.Context,java.lang.String,de.koelle.christian.common.json.AsyncJsonParserResultCallback) -> a
de.koelle.christian.common.json.AsyncJsonParser$1 -> b.a.a.a.e.a$a:
    de.koelle.christian.common.json.AsyncJsonParserResultCallback val$callback -> a
    void onFailure(okhttp3.Call,java.io.IOException) -> a
    void onResponse(okhttp3.Call,okhttp3.Response) -> a
de.koelle.christian.common.json.AsyncJsonParserResultCallback -> b.a.a.a.e.b:
    void deliverResult(org.json.JSONObject) -> a
de.koelle.christian.common.options.OptionConstraints -> b.a.a.a.f.a:
    int[] optionIds -> c
    android.view.Menu menu -> b
    android.app.Activity activity -> a
    de.koelle.christian.common.options.OptionConstraints activity(android.app.Activity) -> a
    android.app.Activity getActivity() -> a
    de.koelle.christian.common.options.OptionConstraints menu(android.view.Menu) -> a
    de.koelle.christian.common.options.OptionConstraints options(int[]) -> a
    android.view.Menu getMenu() -> b
    int[] getOptionIds() -> c
de.koelle.christian.common.options.OptionConstraintsInflater -> b.a.a.a.f.b:
    android.view.MenuInflater menuInflater -> a
    int[] optionIds -> c
    android.view.Menu menu -> b
    de.koelle.christian.common.options.OptionConstraintsInflater activity(android.view.MenuInflater) -> a
    android.view.Menu getMenu() -> a
    de.koelle.christian.common.options.OptionConstraintsInflater menu(android.view.Menu) -> a
    de.koelle.christian.common.options.OptionConstraintsInflater options(int[]) -> a
    android.view.MenuInflater getMenuInflater() -> b
    int[] getOptionIds() -> c
de.koelle.christian.common.options.OptionsSupport -> b.a.a.a.f.c:
    int[] allOptions -> a
    boolean populateOptionsMenu(de.koelle.christian.common.options.OptionConstraints) -> a
    boolean populateOptionsMenu(de.koelle.christian.common.options.OptionConstraintsInflater) -> a
de.koelle.christian.common.primitives.DivisionResult -> b.a.a.a.g.a:
    java.lang.Double loss -> b
    java.lang.Double result -> a
    java.lang.Double getLoss() -> a
    void setLoss(java.lang.Double) -> a
    java.lang.Double getResult() -> b
    void setResult(java.lang.Double) -> b
de.koelle.christian.common.support.DimensionSupport -> b.a.a.a.h.a:
    android.content.Context context -> a
    java.util.Map pxCache -> b
    int dp2Px(float) -> a
    float calculateDpToPixel(float) -> b
de.koelle.christian.common.text.BlankTextWatcher -> b.a.a.a.i.a:
de.koelle.christian.common.ui.filter.DecimalNumberInputFilter -> b.a.a.a.j.a.a:
    de.koelle.christian.common.ui.filter.DecimalNumberInputPatternMatcher amountInputPatternMatcher -> a
    java.lang.StringBuilder createPotentialResult(java.lang.CharSequence,int,int,android.text.Spanned,int,int) -> a
    void logPotentialResult(java.lang.StringBuilder) -> a
    void logResult(boolean) -> a
    void logStart(java.lang.CharSequence,int,int,android.text.Spanned,int,int) -> b
de.koelle.christian.common.ui.filter.DecimalNumberInputPatternMatcher -> b.a.a.a.j.a.b:
    java.util.regex.Pattern pattern -> a
    int maxLength -> b
    boolean matches(java.lang.String) -> a
    boolean matchesPattern(java.lang.String) -> b
de.koelle.christian.common.ui.filter.DecimalNumberInputUtil -> b.a.a.a.j.a.c:
    de.koelle.christian.common.ui.filter.DecimalNumberInputPatternMatcher exchangeRateInputPatternMatcher -> d
    de.koelle.christian.common.ui.filter.DecimalNumberInputPatternMatcher amountInputPatternMatcher -> c
    char unintendedDelimiter -> b
    char localizedDelimiter -> a
    char determineDecimalSeparator(java.util.Locale) -> a
    java.lang.String fixInputStringModelToWidget(java.lang.String) -> a
    char getDelimiterInversion(char) -> a
    de.koelle.christian.common.ui.filter.DecimalNumberInputPatternMatcher getExchangeRateInputPatternMatcher() -> a
    java.lang.String fixInputStringWidgetToParser(java.lang.String) -> b
    de.koelle.christian.common.ui.filter.DecimalNumberInputPatternMatcher getInputPatternMatcher() -> b
de.koelle.christian.common.utils.Assert -> b.a.a.a.k.a:
    void notNull(long) -> a
    void notNull(java.lang.Object) -> a
de.koelle.christian.common.utils.ConversionUtils -> b.a.a.a.k.b:
    int bool2Int(boolean) -> a
    java.util.Date getDateByLong(long) -> a
    boolean int2bool(int) -> a
    java.lang.String nullSafe(java.lang.String) -> a
de.koelle.christian.common.utils.CurrencyUtil -> b.a.a.a.k.c:
    java.util.Map currency2SymbolMap -> c
    java.util.Map currency2DisplayNameMap -> d
    java.util.List supportedCurrencies -> f
    java.util.List currenciesWithExpectedExchangeRate -> e
    java.lang.String[] currencyCodes -> a
    java.lang.String[] currencyFullName -> b
    int calcExpectedAmountOfExchangeRates(int) -> a
    java.util.List convertOthersToCurrencyWithName(java.util.Set,android.content.res.Resources) -> a
    java.util.List convertToCurrencyWithName(java.util.List,android.content.res.Resources) -> a
    java.util.List getAllCurrenciesWithRetrievableRate() -> a
    java.util.Currency getFirstOther(java.util.Currency,android.content.res.Resources) -> a
    java.lang.String getFullNameToCurrency(android.content.res.Resources,java.util.Currency) -> a
    java.util.List getSupportedCurrencies(android.content.res.Resources) -> a
    java.lang.String getSymbolToCurrency(android.content.res.Resources,java.util.Currency,boolean) -> a
    boolean isRateProvidedExternally(java.lang.String) -> a
    java.lang.String[] getSupportedCurrencyCodes(android.content.res.Resources) -> b
    java.lang.String getSymbolToCurrency(android.content.res.Resources,java.util.Currency) -> b
    java.lang.String[] getSupportedCurrencyFullNames(android.content.res.Resources) -> c
    void initIfRequired(android.content.res.Resources) -> d
de.koelle.christian.common.utils.DateUtils -> b.a.a.a.k.d:
    java.util.Locale locale -> a
    java.lang.String datePattern -> b
    java.lang.String date2String(java.util.Date) -> a
    java.lang.String getPattern(java.util.Locale) -> a
de.koelle.christian.common.utils.FileUtils -> b.a.a.a.k.e:
    void deleteAllFiles(android.app.Activity) -> a
    void deleteAllFiles(android.app.Application) -> a
    void deleteFiles(java.util.List) -> a
    android.net.Uri getContentUrisFromFile(java.io.File,java.lang.String) -> a
    java.util.List getContentUrisFromFiles(java.util.List,java.lang.String) -> a
de.koelle.christian.common.utils.Html -> b.a.a.a.k.f:
    java.lang.CharSequence toHtmlChar(java.lang.String) -> a
de.koelle.christian.common.utils.NumberUtils -> b.a.a.a.k.g:
    java.lang.Double AMOUNT_MIN -> d
    java.lang.Double AMOUNT_MAX -> c
    java.lang.Double EXCHANGE_RATE_MIN -> b
    java.lang.Double EXCHANGE_RATE_MAX -> a
    java.lang.Double divide(java.lang.Double,java.lang.Double) -> a
    java.lang.Double divide(java.lang.Double,java.lang.Double,int) -> a
    java.lang.Double divide(java.lang.Double,java.lang.Integer) -> a
    de.koelle.christian.common.primitives.DivisionResult divideWithLoss(java.lang.Double,java.lang.Integer,boolean) -> a
    java.lang.Double ensureExchangeRateMinMax(java.lang.Double) -> a
    java.lang.Double getStringToDouble(java.util.Locale,java.lang.String,boolean) -> a
    java.lang.Double getStringToDoubleNonRounded(java.util.Locale,java.lang.String) -> a
    double round(double) -> a
    java.lang.Double divideForExchangeRates(java.lang.Double,java.lang.Double) -> b
    java.lang.Double getStringToDoubleRounded(java.util.Locale,java.lang.String) -> b
    java.lang.Double invertExchangeRateDouble(java.lang.Double) -> b
    java.lang.Double multiply(java.lang.Double,java.lang.Integer) -> b
    boolean isExceedingAmountLimit(java.lang.Double) -> c
    java.lang.Double multiply(java.lang.Double,java.lang.Double) -> c
    java.lang.Double neg(java.lang.Double) -> d
de.koelle.christian.common.utils.ObjectUtils -> b.a.a.a.k.h:
    java.io.Serializable cloneDeep(java.io.Serializable) -> a
de.koelle.christian.common.utils.StringUtils -> b.a.a.a.k.i:
    java.lang.String clearInput(android.text.Editable) -> a
    java.lang.StringBuilder generateString(int,java.lang.String) -> a
    boolean isNotBlank(java.lang.String) -> a
de.koelle.christian.common.utils.SystemUtil -> b.a.a.a.k.j:
    boolean isOnline(android.content.Context) -> a
de.koelle.christian.common.utils.UiUtils -> b.a.a.a.k.k:
    int dpi2px(android.content.res.Resources,int) -> a
    int getInactiveColor(android.content.Context) -> a
    int getInactiveColor(android.content.res.Resources) -> a
    void makeProperNumberInput(android.widget.EditText,de.koelle.christian.common.ui.filter.DecimalNumberInputPatternMatcher) -> a
    void removeFromView(android.view.View,int) -> a
    void setActiveOrInactive(boolean,android.widget.TextView,int,android.content.res.Resources,int) -> a
    void setFontAndStyle(android.content.Context,android.widget.TextView,boolean,int) -> a
    android.widget.TextView setLabelAndValueOnTextView(android.view.View,int,java.lang.Object,java.lang.Object) -> a
    void setValue(java.lang.Object,java.lang.Object,android.widget.TextView) -> a
    void setViewVisibility(android.view.View,boolean) -> a
    void showInView(android.view.View,int) -> b
de.koelle.christian.common.widget.tab.BlockableViewPager -> de.koelle.christian.common.widget.tab.BlockableViewPager:
    boolean enabled -> a
de.koelle.christian.trickytripper.TrickyTripperActivity -> de.koelle.christian.trickytripper.TrickyTripperActivity:
    androidx.drawerlayout.widget.DrawerLayout mDrawerLayout -> b
    androidx.appcompat.app.ActionBarDrawerToggle mDrawerToggle -> d
    androidx.appcompat.view.ActionMode mActionMode -> j
    long previouslySelectedTripId -> h
    java.util.Comparator mListComparator -> f
    java.lang.CharSequence mDrawerTitle -> g
    android.widget.ArrayAdapter mDrawerListAdapter -> e
    de.koelle.christian.trickytripper.TrickyTripperActivity$MyActionModeCallback mActionModeCallback -> i
    android.widget.ListView mDrawerList -> c
    de.koelle.christian.common.widget.tab.BlockableViewPager mViewPager -> a
    de.koelle.christian.trickytripper.TrickyTripperApp access$100(de.koelle.christian.trickytripper.TrickyTripperActivity) -> a
    android.os.Bundle access$1000(de.koelle.christian.trickytripper.TrickyTripperActivity,de.koelle.christian.trickytripper.model.TripSummary) -> a
    androidx.appcompat.view.ActionMode access$202(de.koelle.christian.trickytripper.TrickyTripperActivity,androidx.appcompat.view.ActionMode) -> a
    long access$702(de.koelle.christian.trickytripper.TrickyTripperActivity,long) -> a
    void addDrawerListClickListener(android.widget.ListView,de.koelle.christian.trickytripper.TrickyTripperApp) -> a
    android.os.Bundle createBundleWithTripSummaryForPopup(de.koelle.christian.trickytripper.model.TripSummary) -> a
    java.lang.String getDeleteConfirmationMsg(android.os.Bundle) -> a
    void iniDrawerListView(android.widget.ListView) -> a
    void setRunningActionMode(androidx.appcompat.view.ActionMode) -> a
    void updateList(java.util.List) -> a
    java.lang.CharSequence access$1100(de.koelle.christian.trickytripper.TrickyTripperActivity) -> b
    void doDelete(android.os.Bundle) -> b
    androidx.appcompat.view.ActionMode access$200(de.koelle.christian.trickytripper.TrickyTripperActivity) -> c
    de.koelle.christian.trickytripper.model.TripSummary getTripSummaryFromBundle(android.os.Bundle) -> c
    android.widget.ListView access$300(de.koelle.christian.trickytripper.TrickyTripperActivity) -> d
    android.widget.ArrayAdapter access$400(de.koelle.christian.trickytripper.TrickyTripperActivity) -> e
    androidx.appcompat.view.ActionMode getRunningActionMode() -> e
    androidx.drawerlayout.widget.DrawerLayout access$500(de.koelle.christian.trickytripper.TrickyTripperActivity) -> f
    de.koelle.christian.trickytripper.TrickyTripperApp getApp() -> f
    void access$600(de.koelle.christian.trickytripper.TrickyTripperActivity) -> g
    void loadNextTripIfPreviousDeleted() -> g
    long access$700(de.koelle.christian.trickytripper.TrickyTripperActivity) -> h
    void setTripNameToHeader() -> h
    void access$800(de.koelle.christian.trickytripper.TrickyTripperActivity) -> i
    void updatePagerAdapter() -> i
    de.koelle.christian.trickytripper.TrickyTripperActivity$MyActionModeCallback access$900(de.koelle.christian.trickytripper.TrickyTripperActivity) -> j
de.koelle.christian.trickytripper.TrickyTripperActivity$1 -> de.koelle.christian.trickytripper.TrickyTripperActivity$a:
    java.text.Collator val$c -> a
    int compare(de.koelle.christian.trickytripper.model.TripSummary,de.koelle.christian.trickytripper.model.TripSummary) -> a
de.koelle.christian.trickytripper.TrickyTripperActivity$2 -> de.koelle.christian.trickytripper.TrickyTripperActivity$b:
    de.koelle.christian.trickytripper.TrickyTripperActivity this$0 -> a
de.koelle.christian.trickytripper.TrickyTripperActivity$3 -> de.koelle.christian.trickytripper.TrickyTripperActivity$c:
    de.koelle.christian.trickytripper.TrickyTripperApp val$app -> a
    de.koelle.christian.trickytripper.TrickyTripperActivity this$0 -> b
de.koelle.christian.trickytripper.TrickyTripperActivity$4 -> de.koelle.christian.trickytripper.TrickyTripperActivity$d:
    de.koelle.christian.trickytripper.TrickyTripperActivity this$0 -> a
de.koelle.christian.trickytripper.TrickyTripperActivity$MyActionBarDrawerToggle -> de.koelle.christian.trickytripper.TrickyTripperActivity$e:
    de.koelle.christian.trickytripper.TrickyTripperActivity this$0 -> a
de.koelle.christian.trickytripper.TrickyTripperActivity$MyActionModeCallback -> de.koelle.christian.trickytripper.TrickyTripperActivity$f:
    de.koelle.christian.trickytripper.TrickyTripperActivity this$0 -> b
    de.koelle.christian.trickytripper.model.TripSummary selectedTrip -> a
    de.koelle.christian.trickytripper.model.TripSummary getTransferableSelection() -> a
    void setSelectedTrip(de.koelle.christian.trickytripper.model.TripSummary) -> a
de.koelle.christian.trickytripper.TrickyTripperApp -> de.koelle.christian.trickytripper.TrickyTripperApp:
    de.koelle.christian.trickytripper.controller.ViewController viewController -> e
    de.koelle.christian.trickytripper.controller.ExportController exportController -> c
    de.koelle.christian.trickytripper.dataaccess.DataManager dataManager -> a
    de.koelle.christian.trickytripper.controller.ExchangeRateController exchangeRateController -> b
    de.koelle.christian.trickytripper.controller.MiscController miscController -> d
    de.koelle.christian.trickytripper.controller.TripController tripController -> f
    void closeDatabase() -> a
    de.koelle.christian.trickytripper.controller.ExchangeRateController getExchangeRateController() -> b
    de.koelle.christian.trickytripper.controller.ExportController getExportController() -> c
    de.koelle.christian.trickytripper.controller.MiscController getMiscController() -> d
    de.koelle.christian.trickytripper.controller.TripController getTripController() -> e
    de.koelle.christian.trickytripper.controller.ViewController getViewController() -> f
    void init() -> g
    void shutdown() -> h
de.koelle.christian.trickytripper.activities.CurrencyCalculatorActivity -> de.koelle.christian.trickytripper.activities.CurrencyCalculatorActivity:
    java.lang.Double exchangeRateInput -> e
    android.widget.Spinner spinner -> l
    android.widget.ArrayAdapter adapter -> k
    int resultViewId -> d
    de.koelle.christian.trickytripper.model.ExchangeRate exchangeRateSelected -> f
    android.widget.AdapterView$OnItemSelectedListener rateSelectionListener -> m
    de.koelle.christian.trickytripper.model.Amount resultAmount -> b
    de.koelle.christian.common.text.BlankTextWatcher inputListenerRate -> j
    de.koelle.christian.trickytripper.activitysupport.ImportOptionSupport importOptionSupport -> g
    de.koelle.christian.trickytripper.ui.utils.ExchangeRateDescriptionUtils exchangeRateDescriptionUtils -> h
    de.koelle.christian.common.text.BlankTextWatcher inputListenerValue -> i
    de.koelle.christian.trickytripper.model.Amount inputAmount -> a
    boolean checkboxSelectionSaveNewAmendedExchangeRate -> c
    void updateExchangeRateFieldFromModel() -> A
    void updateExchangeRateSpinnerEnabled() -> B
    void updateExchangeRates() -> C
    void updateInputAmountFieldFromModel() -> D
    void updateOutputFields() -> E
    de.koelle.christian.common.ui.filter.DecimalNumberInputUtil access$000(de.koelle.christian.trickytripper.activities.CurrencyCalculatorActivity) -> a
    void access$300(de.koelle.christian.trickytripper.activities.CurrencyCalculatorActivity,de.koelle.christian.trickytripper.activities.CurrencyCalculatorActivity$UpdateExclusion) -> a
    java.lang.Double access$402(de.koelle.christian.trickytripper.activities.CurrencyCalculatorActivity,java.lang.Double) -> a
    boolean access$502(de.koelle.christian.trickytripper.activities.CurrencyCalculatorActivity,boolean) -> a
    void access$900(de.koelle.christian.trickytripper.activities.CurrencyCalculatorActivity,de.koelle.christian.trickytripper.model.ExchangeRate) -> a
    de.koelle.christian.trickytripper.model.Amount createAmount(java.lang.Double,java.util.Currency) -> a
    void fillRateModel(de.koelle.christian.trickytripper.model.ExchangeRate) -> a
    void readAndSetInput(android.content.Intent) -> a
    void updateEditFieldsFromModel(de.koelle.christian.trickytripper.activities.CurrencyCalculatorActivity$UpdateExclusion) -> a
    java.util.List wrapExchangeRatesInRowObject(java.util.List) -> a
    java.util.Locale access$100(de.koelle.christian.trickytripper.activities.CurrencyCalculatorActivity) -> b
    void saveExchangeRateUsedLast(de.koelle.christian.trickytripper.model.ExchangeRate) -> b
    void updateViewsState(de.koelle.christian.trickytripper.activities.CurrencyCalculatorActivity$UpdateExclusion) -> b
    void access$1000(de.koelle.christian.trickytripper.activities.CurrencyCalculatorActivity) -> c
    de.koelle.christian.trickytripper.model.Amount access$200(de.koelle.christian.trickytripper.activities.CurrencyCalculatorActivity) -> d
    de.koelle.christian.trickytripper.ui.utils.ExchangeRateDescriptionUtils access$600(de.koelle.christian.trickytripper.activities.CurrencyCalculatorActivity) -> e
    void done() -> e
    android.widget.Spinner access$700(de.koelle.christian.trickytripper.activities.CurrencyCalculatorActivity) -> f
    void updateCalculation() -> f
    de.koelle.christian.trickytripper.model.ExchangeRate access$800(de.koelle.christian.trickytripper.activities.CurrencyCalculatorActivity) -> g
    boolean canResultBeCalculated() -> g
    void createAndSaveNewExchangeRate() -> h
    de.koelle.christian.trickytripper.TrickyTripperApp getApp() -> i
    android.widget.CheckBox getCheckbox() -> j
    android.widget.Button getCurrencySelectionButton() -> k
    de.koelle.christian.common.ui.filter.DecimalNumberInputUtil getDecimalNumberInputUtil() -> l
    android.widget.EditText getEditTextExchangeRateValue() -> m
    android.widget.EditText getEditTextInputValue() -> n
    android.widget.Spinner getExchangeRateSpinner() -> o
    java.util.Locale getLocale() -> p
    void initAndBindCheckbox() -> q
    void initAndBindCurrencySelectionButton() -> r
    void initAndBindEditText() -> s
    void initExchangeRateSpinner() -> t
    boolean isDirtyRate() -> u
    boolean isExchangeRateSelected() -> v
    void nullRateModel() -> w
    void prepareResultAndFinish() -> x
    void refreshOnResume() -> y
    void updateCheckboxState() -> z
de.koelle.christian.trickytripper.activities.CurrencyCalculatorActivity$1 -> de.koelle.christian.trickytripper.activities.CurrencyCalculatorActivity$a:
    de.koelle.christian.trickytripper.activities.CurrencyCalculatorActivity this$0 -> a
de.koelle.christian.trickytripper.activities.CurrencyCalculatorActivity$2 -> de.koelle.christian.trickytripper.activities.CurrencyCalculatorActivity$b:
    de.koelle.christian.trickytripper.activities.CurrencyCalculatorActivity this$0 -> a
de.koelle.christian.trickytripper.activities.CurrencyCalculatorActivity$3 -> de.koelle.christian.trickytripper.activities.CurrencyCalculatorActivity$c:
    de.koelle.christian.trickytripper.activities.CurrencyCalculatorActivity this$0 -> a
de.koelle.christian.trickytripper.activities.CurrencyCalculatorActivity$4 -> de.koelle.christian.trickytripper.activities.CurrencyCalculatorActivity$d:
    de.koelle.christian.trickytripper.activities.CurrencyCalculatorActivity this$0 -> a
de.koelle.christian.trickytripper.activities.CurrencyCalculatorActivity$5 -> de.koelle.christian.trickytripper.activities.CurrencyCalculatorActivity$e:
    de.koelle.christian.trickytripper.activities.CurrencyCalculatorActivity this$0 -> a
de.koelle.christian.trickytripper.activities.CurrencyCalculatorActivity$6 -> de.koelle.christian.trickytripper.activities.CurrencyCalculatorActivity$f:
    de.koelle.christian.trickytripper.activities.CurrencyCalculatorActivity this$0 -> a
    java.lang.String getStringToDisplay(de.koelle.christian.trickytripper.model.ExchangeRate) -> a
    java.lang.String getStringToDisplay(java.lang.Object) -> a
de.koelle.christian.trickytripper.activities.CurrencyCalculatorActivity$7 -> de.koelle.christian.trickytripper.activities.CurrencyCalculatorActivity$g:
    de.koelle.christian.trickytripper.activities.CurrencyCalculatorActivity this$0 -> a
    java.lang.String getStringToDisplay(de.koelle.christian.trickytripper.model.ExchangeRate) -> a
    java.lang.String getStringToDisplay(java.lang.Object) -> a
de.koelle.christian.trickytripper.activities.CurrencyCalculatorActivity$UpdateExclusion -> de.koelle.christian.trickytripper.activities.CurrencyCalculatorActivity$h:
    de.koelle.christian.trickytripper.activities.CurrencyCalculatorActivity$UpdateExclusion[] $VALUES -> d
    de.koelle.christian.trickytripper.activities.CurrencyCalculatorActivity$UpdateExclusion INPUT_VALUE -> c
    de.koelle.christian.trickytripper.activities.CurrencyCalculatorActivity$UpdateExclusion NONE -> a
    de.koelle.christian.trickytripper.activities.CurrencyCalculatorActivity$UpdateExclusion RATE_VALUE -> b
de.koelle.christian.trickytripper.activities.CurrencySelectionActivity -> de.koelle.christian.trickytripper.activities.CurrencySelectionActivity:
    java.util.Currency currencySelected -> c
    java.util.Currency currencyProvided -> a
    int resultViewId -> b
    de.koelle.christian.trickytripper.activities.CurrencySelectionActivity$CurrencySelectionMode mode -> d
    java.util.Currency access$002(de.koelle.christian.trickytripper.activities.CurrencySelectionActivity,java.util.Currency) -> a
    void access$100(de.koelle.christian.trickytripper.activities.CurrencySelectionActivity) -> a
    void readAndSetInput(android.content.Intent) -> a
    void initList() -> e
    android.util.SparseArray localizeGroupLabels() -> f
    void prepareResultAndFinish() -> g
    void updateInstructionLabels() -> h
de.koelle.christian.trickytripper.activities.CurrencySelectionActivity$1 -> de.koelle.christian.trickytripper.activities.CurrencySelectionActivity$a:
    android.util.SparseArray val$groupLabels -> a
    java.lang.String getGroupDescription(int) -> a
de.koelle.christian.trickytripper.activities.CurrencySelectionActivity$2 -> de.koelle.christian.trickytripper.activities.CurrencySelectionActivity$b:
    de.koelle.christian.trickytripper.activities.CurrencySelectionActivity this$0 -> b
    de.koelle.christian.trickytripper.model.modelAdapter.CurrencyExpandableListAdapter val$adapter -> a
de.koelle.christian.trickytripper.activities.CurrencySelectionActivity$CurrencySelectionMode -> de.koelle.christian.trickytripper.activities.CurrencySelectionActivity$c:
    de.koelle.christian.trickytripper.activities.CurrencySelectionActivity$CurrencySelectionMode SELECT_FOR_EXCHANGE_CALCULATION -> a
    de.koelle.christian.trickytripper.activities.CurrencySelectionActivity$CurrencySelectionMode[] $VALUES -> d
    de.koelle.christian.trickytripper.activities.CurrencySelectionActivity$CurrencySelectionMode SELECT_EXCHANGE_RATE_LEFT -> b
    de.koelle.christian.trickytripper.activities.CurrencySelectionActivity$CurrencySelectionMode SELECT_EXCHANGE_RATE_RIGHT -> c
de.koelle.christian.trickytripper.activities.DirectoryPickerActivity -> de.koelle.christian.trickytripper.activities.DirectoryPickerActivity:
    java.io.File dir -> a
    boolean showHidden -> b
    boolean onlyDirs -> c
    java.lang.String title -> d
    java.io.File access$000(de.koelle.christian.trickytripper.activities.DirectoryPickerActivity) -> a
    void access$100(de.koelle.christian.trickytripper.activities.DirectoryPickerActivity,java.lang.String) -> a
    java.util.ArrayList filter(java.io.File[],boolean,boolean) -> a
    java.lang.String[] names(java.util.ArrayList) -> a
    void returnDir(java.lang.String) -> a
    boolean access$200(de.koelle.christian.trickytripper.activities.DirectoryPickerActivity) -> b
    boolean access$300(de.koelle.christian.trickytripper.activities.DirectoryPickerActivity) -> c
    java.lang.String access$400(de.koelle.christian.trickytripper.activities.DirectoryPickerActivity) -> d
    de.koelle.christian.trickytripper.TrickyTripperApp getApp() -> e
de.koelle.christian.trickytripper.activities.DirectoryPickerActivity$1 -> de.koelle.christian.trickytripper.activities.DirectoryPickerActivity$a:
    de.koelle.christian.trickytripper.activities.DirectoryPickerActivity this$0 -> a
de.koelle.christian.trickytripper.activities.DirectoryPickerActivity$2 -> de.koelle.christian.trickytripper.activities.DirectoryPickerActivity$b:
    android.os.Bundle val$extras -> b
    de.koelle.christian.trickytripper.activities.DirectoryPickerActivity this$0 -> c
    java.util.ArrayList val$files -> a
de.koelle.christian.trickytripper.activities.ExchangeRateDeleteActivity -> de.koelle.christian.trickytripper.activities.ExchangeRateDeleteActivity:
    de.koelle.christian.trickytripper.model.modelAdapter.ExchangeRateRowListAdapter adapter -> b
    android.widget.ListView listView -> a
    java.util.Comparator comparator -> c
    de.koelle.christian.trickytripper.model.modelAdapter.ExchangeRateRowListAdapter access$000(de.koelle.christian.trickytripper.activities.ExchangeRateDeleteActivity) -> a
    java.lang.String getDeleteConfirmationMsg(android.os.Bundle) -> a
    void modifySelection(de.koelle.christian.trickytripper.model.ExchangeRateSelection) -> a
    android.os.Bundle wrapSelectionInBundle(java.util.ArrayList) -> a
    void doDelete(android.os.Bundle) -> b
    java.util.List getSelectionFromBundle(android.os.Bundle) -> c
    void deleteSelectedExchangeRates() -> e
    void updateList() -> f
    de.koelle.christian.trickytripper.TrickyTripperApp getApp() -> g
    java.util.ArrayList getSelection() -> h
    void initInvisibleSpinner() -> i
    void initList() -> j
    boolean isSomethingSelected() -> k
de.koelle.christian.trickytripper.activities.ExchangeRateDeleteActivity$1 -> de.koelle.christian.trickytripper.activities.ExchangeRateDeleteActivity$a:
    de.koelle.christian.trickytripper.activities.ExchangeRateDeleteActivity this$0 -> a
de.koelle.christian.trickytripper.activities.ExchangeRateDeleteActivity$2 -> de.koelle.christian.trickytripper.activities.ExchangeRateDeleteActivity$b:
    java.text.Collator val$collator -> a
    int compare(de.koelle.christian.trickytripper.model.ExchangeRate,de.koelle.christian.trickytripper.model.ExchangeRate) -> a
de.koelle.christian.trickytripper.activities.ExchangeRateDeleteActivity$3 -> de.koelle.christian.trickytripper.activities.ExchangeRateDeleteActivity$c:
    de.koelle.christian.trickytripper.activities.ExchangeRateDeleteActivity this$0 -> b
    android.widget.Spinner val$spinner -> a
de.koelle.christian.trickytripper.activities.ExchangeRateEditActivity -> de.koelle.christian.trickytripper.activities.ExchangeRateEditActivity:
    java.lang.Double exchangeRateValueInverted -> b
    de.koelle.christian.trickytripper.constants.ViewMode viewMode -> c
    de.koelle.christian.common.text.BlankTextWatcher editTextListenerLeft -> e
    de.koelle.christian.common.text.BlankTextWatcher editTextListenerRight -> d
    de.koelle.christian.trickytripper.model.ExchangeRate exchangeRate -> a
    de.koelle.christian.trickytripper.model.ExchangeRate access$000(de.koelle.christian.trickytripper.activities.ExchangeRateEditActivity) -> a
    java.lang.Double access$100(de.koelle.christian.trickytripper.activities.ExchangeRateEditActivity,android.text.Editable) -> a
    java.lang.Double access$202(de.koelle.christian.trickytripper.activities.ExchangeRateEditActivity,java.lang.Double) -> a
    de.koelle.christian.trickytripper.model.ExchangeRate createFreshExchangeRate(java.util.Currency) -> a
    void flipRatesToAvoidRoundingConfusion(de.koelle.christian.trickytripper.model.ExchangeRate,java.lang.String) -> a
    java.lang.Double getWidgetDoubleInput(android.text.Editable) -> a
    de.koelle.christian.trickytripper.model.ExchangeRate loadExchangeRate(java.lang.Long) -> a
    boolean readAndSetInput(android.content.Intent) -> a
    void recalculateAndUpdateOtherSide(boolean) -> a
    void updateInputWidget(android.widget.EditText,java.util.Locale,java.lang.Double,android.text.TextWatcher) -> a
    void initAndBindStateDependingWidget(boolean) -> b
    void done() -> e
    boolean canBeSaved() -> f
    de.koelle.christian.trickytripper.TrickyTripperApp getApp() -> g
    android.widget.Button getCurrencySelectionButtonLeft() -> h
    android.widget.Button getCurrencySelectionButtonRight() -> i
    de.koelle.christian.common.ui.filter.DecimalNumberInputUtil getDecimalNumberInputUtil() -> j
    android.widget.EditText getInputWidgetL2R() -> k
    android.widget.EditText getInputWidgetR2L() -> l
    java.util.Locale getLocale() -> m
    void initAndBindEditText() -> n
de.koelle.christian.trickytripper.activities.ExchangeRateEditActivity$1 -> de.koelle.christian.trickytripper.activities.ExchangeRateEditActivity$a:
    de.koelle.christian.trickytripper.activities.ExchangeRateEditActivity this$0 -> a
de.koelle.christian.trickytripper.activities.ExchangeRateEditActivity$2 -> de.koelle.christian.trickytripper.activities.ExchangeRateEditActivity$b:
    de.koelle.christian.trickytripper.activities.ExchangeRateEditActivity this$0 -> a
de.koelle.christian.trickytripper.activities.ExchangeRateEditActivity$3 -> de.koelle.christian.trickytripper.activities.ExchangeRateEditActivity$c:
    de.koelle.christian.trickytripper.activities.ExchangeRateEditActivity this$0 -> a
de.koelle.christian.trickytripper.activities.ExchangeRateImportActivity -> de.koelle.christian.trickytripper.activities.ExchangeRateImportActivity:
    android.app.ProgressDialog progressBar -> f
    de.koelle.christian.trickytripper.model.ImportSettings importSettings -> e
    android.os.Handler progressBarHandler -> a
    android.widget.ListView listView -> b
    int progressBarStatus -> d
    android.widget.ArrayAdapter adapter -> c
    void access$000(de.koelle.christian.trickytripper.activities.ExchangeRateImportActivity) -> a
    void setIncomingSelection(java.util.List) -> a
    void updateCurrentSelectionDisplay(java.util.Set) -> a
    de.koelle.christian.trickytripper.model.ImportSettings access$100(de.koelle.christian.trickytripper.activities.ExchangeRateImportActivity) -> b
    int access$200(de.koelle.christian.trickytripper.activities.ExchangeRateImportActivity) -> c
    int access$208(de.koelle.christian.trickytripper.activities.ExchangeRateImportActivity) -> d
    de.koelle.christian.trickytripper.TrickyTripperApp access$300(de.koelle.christian.trickytripper.activities.ExchangeRateImportActivity) -> e
    void finishHere() -> e
    android.app.ProgressDialog access$400(de.koelle.christian.trickytripper.activities.ExchangeRateImportActivity) -> f
    void importSelectedExchangeRates() -> f
    android.os.Handler access$500(de.koelle.christian.trickytripper.activities.ExchangeRateImportActivity) -> g
    boolean atLeastTwoSelected() -> g
    void bindWidgets() -> h
    de.koelle.christian.trickytripper.TrickyTripperApp getApp() -> i
    java.util.Set getSelection() -> j
    void updateViewState() -> k
de.koelle.christian.trickytripper.activities.ExchangeRateImportActivity$1 -> de.koelle.christian.trickytripper.activities.ExchangeRateImportActivity$a:
    de.koelle.christian.trickytripper.activities.ExchangeRateImportActivity this$0 -> a
de.koelle.christian.trickytripper.activities.ExchangeRateImportActivity$2 -> de.koelle.christian.trickytripper.activities.ExchangeRateImportActivity$b:
    de.koelle.christian.trickytripper.activities.ExchangeRateImportActivity this$0 -> a
de.koelle.christian.trickytripper.activities.ExchangeRateImportActivity$3 -> de.koelle.christian.trickytripper.activities.ExchangeRateImportActivity$c:
    de.koelle.christian.trickytripper.activities.ExchangeRateImportActivity this$0 -> b
    de.koelle.christian.trickytripper.exchangerates.impl.ExchangeRateImporterImpl val$importer -> a
de.koelle.christian.trickytripper.activities.ExchangeRateImportActivity$4 -> de.koelle.christian.trickytripper.activities.ExchangeRateImportActivity$d:
    java.util.Set val$currenciesToBeLoaded -> c
    de.koelle.christian.trickytripper.exchangerates.impl.ExchangeRateImporterImpl val$importer -> b
    de.koelle.christian.trickytripper.activities.ExchangeRateImportActivity this$0 -> d
    int val$progressCeiling -> a
de.koelle.christian.trickytripper.activities.ExchangeRateImportActivity$4$1 -> de.koelle.christian.trickytripper.activities.ExchangeRateImportActivity$d$a:
    de.koelle.christian.trickytripper.activities.ExchangeRateImportActivity$4 this$1 -> a
    void deliverResult(de.koelle.christian.trickytripper.exchangerates.impl.ExchangeRateImporterResultContainer) -> a
de.koelle.christian.trickytripper.activities.ExchangeRateImportActivity$4$1$1 -> de.koelle.christian.trickytripper.activities.ExchangeRateImportActivity$d$a$a:
    de.koelle.christian.trickytripper.activities.ExchangeRateImportActivity$4$1 this$2 -> a
de.koelle.christian.trickytripper.activities.ExchangeRateImportActivity$4$2 -> de.koelle.christian.trickytripper.activities.ExchangeRateImportActivity$d$b:
    de.koelle.christian.trickytripper.activities.ExchangeRateImportActivity$4 this$1 -> a
de.koelle.christian.trickytripper.activities.ExchangeRateManageActivity -> de.koelle.christian.trickytripper.activities.ExchangeRateManageActivity:
    java.util.List exchangeRateList -> a
    de.koelle.christian.trickytripper.activitysupport.ImportOptionSupport importOptionSupport -> d
    androidx.appcompat.view.ActionMode mActionMode -> g
    java.util.Comparator comparator -> c
    android.widget.ListView listView -> e
    android.widget.ArrayAdapter listAdapter -> b
    de.koelle.christian.trickytripper.activities.ExchangeRateManageActivity$MyActionModeCallback mActionModeCallback -> f
    androidx.appcompat.view.ActionMode access$100(de.koelle.christian.trickytripper.activities.ExchangeRateManageActivity) -> a
    androidx.appcompat.view.ActionMode access$102(de.koelle.christian.trickytripper.activities.ExchangeRateManageActivity,androidx.appcompat.view.ActionMode) -> a
    de.koelle.christian.trickytripper.model.ExchangeRate access$400(de.koelle.christian.trickytripper.activities.ExchangeRateManageActivity,de.koelle.christian.trickytripper.model.ExchangeRate) -> a
    java.lang.String getDeleteConfirmationMsg(android.os.Bundle) -> a
    java.lang.String getRateString(java.lang.Double) -> a
    void initListView(android.widget.ListView) -> a
    android.os.Bundle wrapRowInBundle(de.koelle.christian.trickytripper.model.ExchangeRate) -> a
    de.koelle.christian.trickytripper.TrickyTripperApp access$200(de.koelle.christian.trickytripper.activities.ExchangeRateManageActivity) -> b
    void deleteRowAndUpdateList(de.koelle.christian.trickytripper.model.ExchangeRate) -> b
    void doDelete(android.os.Bundle) -> b
    android.widget.ArrayAdapter access$300(de.koelle.christian.trickytripper.activities.ExchangeRateManageActivity) -> c
    de.koelle.christian.trickytripper.model.ExchangeRate getNonInverted(de.koelle.christian.trickytripper.model.ExchangeRate) -> c
    de.koelle.christian.trickytripper.model.ExchangeRate getRowFromBundle(android.os.Bundle) -> c
    de.koelle.christian.trickytripper.activities.ExchangeRateManageActivity$MyActionModeCallback access$500(de.koelle.christian.trickytripper.activities.ExchangeRateManageActivity) -> d
    java.lang.StringBuilder getStringOfExchangeRate(de.koelle.christian.trickytripper.model.ExchangeRate) -> d
    void updateList() -> e
    de.koelle.christian.trickytripper.TrickyTripperApp getApp() -> f
    void openCreateActivity() -> g
    void openDeleteActivity() -> h
de.koelle.christian.trickytripper.activities.ExchangeRateManageActivity$1 -> de.koelle.christian.trickytripper.activities.ExchangeRateManageActivity$a:
    java.text.Collator val$collator -> a
    int compare(de.koelle.christian.trickytripper.model.ExchangeRate,de.koelle.christian.trickytripper.model.ExchangeRate) -> a
de.koelle.christian.trickytripper.activities.ExchangeRateManageActivity$2 -> de.koelle.christian.trickytripper.activities.ExchangeRateManageActivity$b:
    de.koelle.christian.trickytripper.activities.ExchangeRateManageActivity this$0 -> b
    android.widget.ListView val$listView2 -> a
de.koelle.christian.trickytripper.activities.ExchangeRateManageActivity$3 -> de.koelle.christian.trickytripper.activities.ExchangeRateManageActivity$c:
    de.koelle.christian.trickytripper.activities.ExchangeRateManageActivity this$0 -> a
de.koelle.christian.trickytripper.activities.ExchangeRateManageActivity$MyActionModeCallback -> de.koelle.christian.trickytripper.activities.ExchangeRateManageActivity$d:
    de.koelle.christian.trickytripper.activities.ExchangeRateManageActivity this$0 -> b
    de.koelle.christian.trickytripper.model.ExchangeRate selectionUninverted -> a
    void setSelection(de.koelle.christian.trickytripper.model.ExchangeRate) -> a
de.koelle.christian.trickytripper.activities.ExportActivity -> de.koelle.christian.trickytripper.activities.ExportActivity:
    android.widget.RadioButton radioFormatCsv -> h
    java.util.List participantsInSpinner -> a
    android.widget.CheckBox checkboxFormatHtml -> f
    android.widget.RadioButton radioFormatTxt -> j
    android.widget.CheckBox checkboxFormatCsv -> e
    android.widget.RadioButton radioFormatHtml -> i
    de.koelle.christian.trickytripper.model.Participant participantSelected -> b
    de.koelle.christian.trickytripper.model.ExportSettings exportSettings -> c
    android.widget.CheckBox checkboxFormatTxt -> g
    boolean exportEnabled -> d
    de.koelle.christian.trickytripper.model.Participant access$000(de.koelle.christian.trickytripper.activities.ExportActivity) -> a
    de.koelle.christian.trickytripper.model.Participant access$002(de.koelle.christian.trickytripper.activities.ExportActivity,de.koelle.christian.trickytripper.model.Participant) -> a
    boolean deriveEnableButtonStateFromSettings(de.koelle.christian.trickytripper.model.ExportSettings) -> a
    boolean deriveEnabledCheckboxStateFromSettings(de.koelle.christian.trickytripper.model.Participant,de.koelle.christian.trickytripper.model.ExportSettings,boolean) -> a
    void initAndBindOutputChannelSpinner(de.koelle.christian.trickytripper.model.ExportSettings$ExportOutputChannel,java.util.List) -> a
    void initAndBindSpinner(de.koelle.christian.trickytripper.TrickyTripperApp) -> a
    java.util.List access$100(de.koelle.christian.trickytripper.activities.ExportActivity) -> b
    void access$200(de.koelle.christian.trickytripper.activities.ExportActivity) -> c
    de.koelle.christian.trickytripper.model.ExportSettings access$300(de.koelle.christian.trickytripper.activities.ExportActivity) -> d
    void access$400(de.koelle.christian.trickytripper.activities.ExportActivity) -> e
    void doExport() -> e
    void access$500(de.koelle.christian.trickytripper.activities.ExportActivity) -> f
    void bindCheckBoxes() -> f
    android.widget.RadioButton access$600(de.koelle.christian.trickytripper.activities.ExportActivity) -> g
    de.koelle.christian.trickytripper.TrickyTripperApp getApp() -> g
    android.widget.RadioButton access$700(de.koelle.christian.trickytripper.activities.ExportActivity) -> h
    void initPanel() -> h
    android.widget.RadioButton access$800(de.koelle.christian.trickytripper.activities.ExportActivity) -> i
    void updateAllCheckboxStates() -> i
    void access$900(de.koelle.christian.trickytripper.activities.ExportActivity) -> j
    void updateCheckboxStateIndividualFiles() -> j
    void updateCheckboxStateShowGlobalSumsOnIndividualSpending() -> k
    void updateExportState() -> l
    void updateFormatDependingVisibilityAndState() -> m
de.koelle.christian.trickytripper.activities.ExportActivity$1 -> de.koelle.christian.trickytripper.activities.ExportActivity$g:
    de.koelle.christian.trickytripper.activities.ExportActivity this$0 -> a
de.koelle.christian.trickytripper.activities.ExportActivity$10 -> de.koelle.christian.trickytripper.activities.ExportActivity$a:
    de.koelle.christian.trickytripper.activities.ExportActivity this$0 -> a
de.koelle.christian.trickytripper.activities.ExportActivity$11 -> de.koelle.christian.trickytripper.activities.ExportActivity$b:
    de.koelle.christian.trickytripper.activities.ExportActivity this$0 -> a
de.koelle.christian.trickytripper.activities.ExportActivity$12 -> de.koelle.christian.trickytripper.activities.ExportActivity$c:
    de.koelle.christian.trickytripper.activities.ExportActivity this$0 -> a
de.koelle.christian.trickytripper.activities.ExportActivity$13 -> de.koelle.christian.trickytripper.activities.ExportActivity$d:
    de.koelle.christian.trickytripper.activities.ExportActivity this$0 -> a
de.koelle.christian.trickytripper.activities.ExportActivity$14 -> de.koelle.christian.trickytripper.activities.ExportActivity$e:
    de.koelle.christian.trickytripper.activities.ExportActivity this$0 -> a
de.koelle.christian.trickytripper.activities.ExportActivity$15 -> de.koelle.christian.trickytripper.activities.ExportActivity$f:
    de.koelle.christian.trickytripper.activities.ExportActivity this$0 -> a
de.koelle.christian.trickytripper.activities.ExportActivity$2 -> de.koelle.christian.trickytripper.activities.ExportActivity$h:
    java.util.List val$enabledOnes -> a
    de.koelle.christian.trickytripper.activities.ExportActivity this$0 -> b
de.koelle.christian.trickytripper.activities.ExportActivity$3 -> de.koelle.christian.trickytripper.activities.ExportActivity$i:
    de.koelle.christian.trickytripper.activities.ExportActivity this$0 -> b
    android.widget.Spinner val$spinner -> a
de.koelle.christian.trickytripper.activities.ExportActivity$4 -> de.koelle.christian.trickytripper.activities.ExportActivity$j:
    de.koelle.christian.trickytripper.activities.ExportActivity this$0 -> a
de.koelle.christian.trickytripper.activities.ExportActivity$5 -> de.koelle.christian.trickytripper.activities.ExportActivity$k:
    de.koelle.christian.trickytripper.activities.ExportActivity this$0 -> a
de.koelle.christian.trickytripper.activities.ExportActivity$6 -> de.koelle.christian.trickytripper.activities.ExportActivity$l:
    de.koelle.christian.trickytripper.activities.ExportActivity this$0 -> a
de.koelle.christian.trickytripper.activities.ExportActivity$7 -> de.koelle.christian.trickytripper.activities.ExportActivity$m:
    de.koelle.christian.trickytripper.activities.ExportActivity this$0 -> a
de.koelle.christian.trickytripper.activities.ExportActivity$8 -> de.koelle.christian.trickytripper.activities.ExportActivity$n:
    de.koelle.christian.trickytripper.activities.ExportActivity this$0 -> a
de.koelle.christian.trickytripper.activities.ExportActivity$9 -> de.koelle.christian.trickytripper.activities.ExportActivity$o:
    de.koelle.christian.trickytripper.activities.ExportActivity this$0 -> a
de.koelle.christian.trickytripper.activities.MoneyTransferActivity -> de.koelle.christian.trickytripper.activities.MoneyTransferActivity:
    java.util.Map amountByParticipant -> a
    de.koelle.christian.trickytripper.model.Amount amountTotal -> c
    de.koelle.christian.trickytripper.model.Participant transferer -> b
    java.util.Locale access$000(de.koelle.christian.trickytripper.activities.MoneyTransferActivity) -> a
    void addDynamicRows(de.koelle.christian.trickytripper.model.Participant,java.util.List,de.koelle.christian.trickytripper.model.Debts,android.widget.TableLayout) -> a
    void addTransferRow(de.koelle.christian.trickytripper.model.Debts,android.widget.TableLayout,java.util.List,boolean) -> a
    void bindCurrencyCalculatorAction(android.widget.Button,de.koelle.christian.trickytripper.model.Amount,int) -> a
    void bindPaymentInputAndUpdate(android.widget.EditText,de.koelle.christian.trickytripper.model.Amount) -> a
    void createDynamicTable(de.koelle.christian.trickytripper.model.Participant,java.util.List,de.koelle.christian.trickytripper.model.Debts) -> a
    java.util.List getAllToBeListed(de.koelle.christian.trickytripper.model.Participant,java.util.List,de.koelle.christian.trickytripper.model.Debts,boolean) -> a
    de.koelle.christian.trickytripper.model.Amount getNullSafeDebts(de.koelle.christian.trickytripper.model.Debts,de.koelle.christian.trickytripper.model.Participant) -> a
    android.view.View inflate(int) -> a
    de.koelle.christian.common.ui.filter.DecimalNumberInputUtil access$100(de.koelle.christian.trickytripper.activities.MoneyTransferActivity) -> b
    void initView(de.koelle.christian.trickytripper.model.Participant,java.util.List,de.koelle.christian.trickytripper.model.Debts) -> b
    de.koelle.christian.trickytripper.TrickyTripperApp access$200(de.koelle.christian.trickytripper.activities.MoneyTransferActivity) -> c
    void transfer() -> e
    void updateSum() -> f
    de.koelle.christian.trickytripper.model.Amount calculateTotalSum() -> g
    void createNewPayments() -> h
    de.koelle.christian.trickytripper.factories.AmountFactory getAmountFac() -> i
    de.koelle.christian.trickytripper.TrickyTripperApp getApp() -> j
    de.koelle.christian.common.ui.filter.DecimalNumberInputUtil getDecimalNumberInputUtil() -> k
    de.koelle.christian.trickytripper.controller.TripController getFktnController() -> l
    java.util.Locale getLocale() -> m
    de.koelle.christian.trickytripper.controller.MiscController getMiscController() -> n
de.koelle.christian.trickytripper.activities.MoneyTransferActivity$1 -> de.koelle.christian.trickytripper.activities.MoneyTransferActivity$a:
    de.koelle.christian.trickytripper.model.Amount val$amountDue -> b
    de.koelle.christian.trickytripper.activities.MoneyTransferActivity this$0 -> c
    android.widget.EditText val$editText -> a
de.koelle.christian.trickytripper.activities.MoneyTransferActivity$2 -> de.koelle.christian.trickytripper.activities.MoneyTransferActivity$b:
    de.koelle.christian.trickytripper.model.Amount val$sourceAndTargetAmountReference -> a
    de.koelle.christian.trickytripper.activities.MoneyTransferActivity this$0 -> c
    int val$viewIdForResult -> b
de.koelle.christian.trickytripper.activities.MoneyTransferActivity$3 -> de.koelle.christian.trickytripper.activities.MoneyTransferActivity$c:
    de.koelle.christian.trickytripper.model.Amount val$amount -> a
    de.koelle.christian.trickytripper.activities.MoneyTransferActivity this$0 -> b
de.koelle.christian.trickytripper.activities.MoneyTransferActivity$4 -> de.koelle.christian.trickytripper.activities.MoneyTransferActivity$d:
    java.text.Collator val$collator -> a
    int compare(de.koelle.christian.trickytripper.model.Participant,de.koelle.christian.trickytripper.model.Participant) -> a
de.koelle.christian.trickytripper.activities.ParticipantEditActivity -> de.koelle.christian.trickytripper.activities.ParticipantEditActivity:
    de.koelle.christian.trickytripper.constants.ViewMode viewMode -> a
    de.koelle.christian.trickytripper.model.Participant participant -> b
    android.widget.AutoCompleteTextView autoCompleteTextView -> d
    android.widget.ArrayAdapter adapter -> c
    boolean access$200(de.koelle.christian.trickytripper.activities.ParticipantEditActivity) -> a
    int getPermissionNotificationTextId() -> a
    void readAndSetInput(android.content.Intent) -> a
    void access$300(de.koelle.christian.trickytripper.activities.ParticipantEditActivity) -> b
    void access$400(de.koelle.christian.trickytripper.activities.ParticipantEditActivity) -> c
    void permissionCustomNotificationDone() -> d
    void createAndCreateAnother() -> e
    void saveAndClose() -> f
    void autoSuggest() -> g
    void doRequestPhonebookPermissions() -> h
    de.koelle.christian.trickytripper.TrickyTripperApp getApp() -> i
    android.widget.AutoCompleteTextView getAutoCompleteTextView() -> j
    void initWidgets() -> k
    boolean isPhonebookAccessPermissionGranted() -> l
    void requestPhonebookPermissions() -> m
    boolean save() -> n
    void updateAlreadyCreatedList() -> o
    void updateWidgets() -> p
de.koelle.christian.trickytripper.activities.ParticipantEditActivity$1 -> de.koelle.christian.trickytripper.activities.ParticipantEditActivity$a:
de.koelle.christian.trickytripper.activities.ParticipantEditActivity$NameLookupTask -> de.koelle.christian.trickytripper.activities.ParticipantEditActivity$b:
    android.content.Context context -> a
    android.widget.ArrayAdapter adapter -> b
    java.util.ArrayList doInBackground(java.lang.String[]) -> a
    void onPostExecute(java.util.ArrayList) -> a
de.koelle.christian.trickytripper.activities.ParticipantEditActivity$QueryTriggeringTextWatcher -> de.koelle.christian.trickytripper.activities.ParticipantEditActivity$c:
    de.koelle.christian.trickytripper.activities.ParticipantEditActivity this$0 -> a
de.koelle.christian.trickytripper.activities.ParticipantSelectionActivity -> de.koelle.christian.trickytripper.activities.ParticipantSelectionActivity:
    java.util.List allRelevantParticipants -> b
    de.koelle.christian.trickytripper.model.Amount currentTotalAmount -> c
    boolean divideAmountResult -> e
    android.widget.ArrayAdapter adapter -> f
    java.util.ArrayList participantsInUse -> a
    boolean isPayerNotChargedSelection -> d
    java.util.ArrayList access$000(de.koelle.christian.trickytripper.activities.ParticipantSelectionActivity) -> a
    boolean access$202(de.koelle.christian.trickytripper.activities.ParticipantSelectionActivity,boolean) -> a
    java.lang.String getDivisionCheckboxOnParticipantSelectionText(de.koelle.christian.trickytripper.model.Amount) -> a
    android.widget.ArrayAdapter access$100(de.koelle.christian.trickytripper.activities.ParticipantSelectionActivity) -> b
    boolean isAmountBiggerZero(de.koelle.christian.trickytripper.model.Amount) -> b
    void acceptResultAndFinish() -> e
    de.koelle.christian.trickytripper.TrickyTripperApp getApp() -> f
    java.util.Locale getLocale() -> g
    void initView() -> h
de.koelle.christian.trickytripper.activities.ParticipantSelectionActivity$1 -> de.koelle.christian.trickytripper.activities.ParticipantSelectionActivity$a:
    de.koelle.christian.trickytripper.activities.ParticipantSelectionActivity this$0 -> a
    java.lang.String getStringToDisplay(de.koelle.christian.trickytripper.model.Participant) -> a
    java.lang.String getStringToDisplay(java.lang.Object) -> a
de.koelle.christian.trickytripper.activities.ParticipantSelectionActivity$2 -> de.koelle.christian.trickytripper.activities.ParticipantSelectionActivity$b:
    de.koelle.christian.trickytripper.activities.ParticipantSelectionActivity this$0 -> b
    android.widget.ListView val$listView -> a
de.koelle.christian.trickytripper.activities.ParticipantSelectionActivity$3 -> de.koelle.christian.trickytripper.activities.ParticipantSelectionActivity$c:
    de.koelle.christian.trickytripper.activities.ParticipantSelectionActivity this$0 -> a
de.koelle.christian.trickytripper.activities.ParticipantTabActivity -> de.koelle.christian.trickytripper.activities.a:
    java.util.List participantRows -> a
    de.koelle.christian.trickytripper.activities.ParticipantTabActivity$MyActionModeCallback mActionModeCallback -> d
    de.koelle.christian.trickytripper.model.modelAdapter.ParticipantRowListAdapter adapter -> b
    android.widget.ListView listView -> c
    de.koelle.christian.trickytripper.TrickyTripperApp access$300(de.koelle.christian.trickytripper.activities.ParticipantTabActivity) -> a
    void access$400(de.koelle.christian.trickytripper.activities.ParticipantTabActivity,de.koelle.christian.trickytripper.model.Participant,boolean) -> a
    void refillListFromModel(java.util.List,de.koelle.christian.trickytripper.controller.TripController) -> a
    void setActiveAndPersist(de.koelle.christian.trickytripper.model.Participant,boolean) -> a
    void setRunningActionMode(androidx.appcompat.view.ActionMode) -> a
    void update() -> a
    de.koelle.christian.trickytripper.model.modelAdapter.ParticipantRowListAdapter access$500(de.koelle.christian.trickytripper.activities.ParticipantTabActivity) -> b
    androidx.appcompat.view.ActionMode getRunningActionMode() -> b
    de.koelle.christian.trickytripper.activities.ParticipantTabActivity$MyActionModeCallback access$600(de.koelle.christian.trickytripper.activities.ParticipantTabActivity) -> c
    void updateRows() -> c
    de.koelle.christian.trickytripper.TrickyTripperApp getApp() -> d
de.koelle.christian.trickytripper.activities.ParticipantTabActivity$1 -> de.koelle.christian.trickytripper.activities.a$a:
    java.text.Collator val$collator -> a
    int compare(de.koelle.christian.trickytripper.ui.model.ParticipantRow,de.koelle.christian.trickytripper.ui.model.ParticipantRow) -> a
de.koelle.christian.trickytripper.activities.ParticipantTabActivity$LongTabListener -> de.koelle.christian.trickytripper.activities.a$b:
    de.koelle.christian.trickytripper.activities.ParticipantTabActivity this$0 -> a
de.koelle.christian.trickytripper.activities.ParticipantTabActivity$MyActionModeCallback -> de.koelle.christian.trickytripper.activities.a$c:
    de.koelle.christian.trickytripper.activities.ParticipantTabActivity this$0 -> b
    de.koelle.christian.trickytripper.model.Participant selectedParticipant -> a
    void setSelectedParticipant(de.koelle.christian.trickytripper.model.Participant) -> a
de.koelle.christian.trickytripper.activities.ParticipantTabActivity$ShortTabListener -> de.koelle.christian.trickytripper.activities.a$d:
    de.koelle.christian.trickytripper.activities.ParticipantTabActivity this$0 -> a
de.koelle.christian.trickytripper.activities.PaymentEditActivity -> de.koelle.christian.trickytripper.activities.PaymentEditActivity:
    de.koelle.christian.trickytripper.model.Payment payment -> f
    boolean selectParticipantMakesSense -> j
    de.koelle.christian.common.utils.DateUtils dateUtils -> l
    java.util.List debitRows -> b
    java.util.List paymentRows -> a
    de.koelle.christian.trickytripper.constants.ViewMode viewMode -> e
    java.util.Map amountPayedParticipantToWidget -> c
    java.util.Map amountDebitorParticipantToWidget -> d
    android.widget.AutoCompleteTextView autoCompleteTextView -> m
    boolean divideEqually -> g
    de.koelle.christian.trickytripper.model.Amount amountTotalPayments -> h
    de.koelle.christian.trickytripper.model.Amount amountTotalDebits -> i
    java.util.List allRelevantParticipants -> k
    de.koelle.christian.trickytripper.TrickyTripperApp access$000(de.koelle.christian.trickytripper.activities.PaymentEditActivity) -> a
    boolean access$102(de.koelle.christian.trickytripper.activities.PaymentEditActivity,boolean) -> a
    java.util.List addAncientInactive(java.util.List,de.koelle.christian.trickytripper.model.Payment) -> a
    void addInactiveOnes(java.util.List,java.util.Set) -> a
    void bindAmountInput(android.widget.EditText,de.koelle.christian.trickytripper.model.Amount,boolean) -> a
    void bindCurrencyCalculatorAction(android.widget.Button,de.koelle.christian.trickytripper.model.Amount,int) -> a
    de.koelle.christian.trickytripper.model.Amount calculateTotalSum(java.util.Map) -> a
    void deliverDatePickerResult(java.util.Date) -> a
    void divideEquallyToPaymentIfRequired(de.koelle.christian.trickytripper.model.Amount) -> a
    android.view.View inflate(int) -> a
    void initAndBindSpinner(de.koelle.christian.trickytripper.model.PaymentCategory) -> a
    void refreshRows(android.widget.TableLayout,java.util.Map,java.util.Map,java.util.List,boolean) -> a
    void removePreviouslyCreatedRows(android.widget.TableLayout,java.util.List) -> a
    void setViewVisibility(int,boolean) -> a
    void setVisibilitySpendingTable(boolean) -> a
    void sortParticipants(java.util.List) -> a
    void updateParticipantsAfterSelection(java.util.List,boolean,boolean) -> a
    void updateSumText(int,de.koelle.christian.trickytripper.model.Amount,boolean) -> a
    void access$200(de.koelle.christian.trickytripper.activities.PaymentEditActivity,boolean) -> b
    void access$300(de.koelle.christian.trickytripper.activities.PaymentEditActivity) -> b
    int getDatePickerStringIdForTitle() -> b
    boolean isAmountBiggerZero(de.koelle.christian.trickytripper.model.Amount) -> b
    de.koelle.christian.common.ui.filter.DecimalNumberInputUtil access$500(de.koelle.christian.trickytripper.activities.PaymentEditActivity) -> c
    java.util.Date getDatePickerInitialDate() -> c
    java.util.Locale access$600(de.koelle.christian.trickytripper.activities.PaymentEditActivity) -> d
    de.koelle.christian.trickytripper.model.Payment access$700(de.koelle.christian.trickytripper.activities.PaymentEditActivity) -> e
    void saveEdit() -> e
    void updatePayerSum() -> f
    void updateSpentSum() -> g
    void addRadioListener() -> h
    boolean areBlankDebitors() -> i
    void autoSuggestDescriptions() -> j
    void bindDescriptionInput() -> k
    void buildDebitorInput() -> l
    void buildPaymentInput() -> m
    de.koelle.christian.trickytripper.model.Amount calculateTotalSumPayer() -> n
    de.koelle.christian.trickytripper.model.Amount calculateTotalSumSpending() -> o
    de.koelle.christian.trickytripper.factories.AmountFactory getAmountFac() -> p
    de.koelle.christian.trickytripper.TrickyTripperApp getApp() -> q
    de.koelle.christian.common.ui.filter.DecimalNumberInputUtil getDecimalNumberInputUtil() -> r
    de.koelle.christian.trickytripper.controller.TripController getFktnController() -> s
    java.util.Locale getLocale() -> t
    boolean isPaymentSavable() -> u
    void updateDatePickerButtonText() -> v
    void updateDivideRestButtonState() -> w
    void updateTotalDebitAmountColor() -> x
de.koelle.christian.trickytripper.activities.PaymentEditActivity$1 -> de.koelle.christian.trickytripper.activities.PaymentEditActivity$a:
    java.text.Collator val$collator -> a
    int compare(de.koelle.christian.trickytripper.model.Participant,de.koelle.christian.trickytripper.model.Participant) -> a
de.koelle.christian.trickytripper.activities.PaymentEditActivity$2 -> de.koelle.christian.trickytripper.activities.PaymentEditActivity$b:
    de.koelle.christian.trickytripper.model.Amount val$sourceAndTargetAmountReference -> a
    de.koelle.christian.trickytripper.activities.PaymentEditActivity this$0 -> c
    int val$viewIdForResult -> b
de.koelle.christian.trickytripper.activities.PaymentEditActivity$3 -> de.koelle.christian.trickytripper.activities.PaymentEditActivity$c:
    de.koelle.christian.trickytripper.activities.PaymentEditActivity this$0 -> a
de.koelle.christian.trickytripper.activities.PaymentEditActivity$4 -> de.koelle.christian.trickytripper.activities.PaymentEditActivity$d:
    de.koelle.christian.trickytripper.activities.PaymentEditActivity this$0 -> a
de.koelle.christian.trickytripper.activities.PaymentEditActivity$5 -> de.koelle.christian.trickytripper.activities.PaymentEditActivity$e:
    de.koelle.christian.trickytripper.model.Payment val$paymentFinal -> a
de.koelle.christian.trickytripper.activities.PaymentEditActivity$6 -> de.koelle.christian.trickytripper.activities.PaymentEditActivity$f:
    de.koelle.christian.trickytripper.model.Amount val$amount -> b
    de.koelle.christian.trickytripper.activities.PaymentEditActivity this$0 -> c
    boolean val$isPayment -> a
de.koelle.christian.trickytripper.activities.PaymentEditActivity$7 -> de.koelle.christian.trickytripper.activities.PaymentEditActivity$g:
    de.koelle.christian.trickytripper.activities.PaymentEditActivity this$0 -> b
    android.widget.Spinner val$spinner -> a
de.koelle.christian.trickytripper.activities.PaymentEditActivity$DescriptionLookupTask -> de.koelle.christian.trickytripper.activities.PaymentEditActivity$h:
    de.koelle.christian.trickytripper.controller.TripController fktnController -> a
    android.widget.ArrayAdapter adapter -> b
    java.util.ArrayList doInBackground(java.lang.String[]) -> a
    void onPostExecute(java.util.ArrayList) -> a
de.koelle.christian.trickytripper.activities.PaymentTabActivity -> de.koelle.christian.trickytripper.activities.b:
    java.util.List paymentRows -> a
    java.util.Comparator comparator -> d
    de.koelle.christian.trickytripper.activities.PaymentTabActivity$MyActionModeCallback mActionModeCallback -> e
    android.widget.ListView listView -> c
    android.widget.ArrayAdapter adapter -> b
    boolean access$100(de.koelle.christian.trickytripper.activities.PaymentTabActivity,de.koelle.christian.trickytripper.model.Payment) -> a
    android.widget.ArrayAdapter access$300(de.koelle.christian.trickytripper.activities.PaymentTabActivity) -> a
    java.lang.String getDeleteConfirmationMsg(android.os.Bundle) -> a
    java.lang.String getPrefixTextForPaymentDeletion(de.koelle.christian.trickytripper.model.Payment,android.app.Activity) -> a
    java.lang.String getPrefixTextForTransferDeletion(de.koelle.christian.trickytripper.model.Payment) -> a
    void setRunningActionMode(androidx.appcompat.view.ActionMode) -> a
    void update() -> a
    void access$200(de.koelle.christian.trickytripper.activities.PaymentTabActivity,de.koelle.christian.trickytripper.model.Payment) -> b
    de.koelle.christian.trickytripper.activities.PaymentTabActivity$MyActionModeCallback access$400(de.koelle.christian.trickytripper.activities.PaymentTabActivity) -> b
    void doDelete(android.os.Bundle) -> b
    androidx.appcompat.view.ActionMode getRunningActionMode() -> b
    boolean isNotMoneyTransfer(de.koelle.christian.trickytripper.model.Payment) -> b
    de.koelle.christian.trickytripper.TrickyTripperApp access$500(de.koelle.christian.trickytripper.activities.PaymentTabActivity) -> c
    void sortAndUpdateView() -> c
    void startEditPaymentActivity(de.koelle.christian.trickytripper.model.Payment) -> c
    de.koelle.christian.trickytripper.TrickyTripperApp getApp() -> d
de.koelle.christian.trickytripper.activities.PaymentTabActivity$1 -> de.koelle.christian.trickytripper.activities.b$a:
    de.koelle.christian.trickytripper.activities.PaymentTabActivity this$0 -> a
de.koelle.christian.trickytripper.activities.PaymentTabActivity$2 -> de.koelle.christian.trickytripper.activities.b$b:
    de.koelle.christian.trickytripper.activities.PaymentTabActivity this$0 -> a
de.koelle.christian.trickytripper.activities.PaymentTabActivity$MyActionModeCallback -> de.koelle.christian.trickytripper.activities.b$c:
    de.koelle.christian.trickytripper.activities.PaymentTabActivity this$0 -> b
    de.koelle.christian.trickytripper.model.Payment payment -> a
    void setSelectedPayment(de.koelle.christian.trickytripper.model.Payment) -> a
de.koelle.christian.trickytripper.activities.PreferencesFragment -> de.koelle.christian.trickytripper.activities.c:
    java.lang.String getDisplayStringForCurrency(java.util.Currency) -> a
    void configurePreferencesToBeUsed() -> d
    android.preference.PreferenceScreen createPreferenceHierarchy() -> e
    de.koelle.christian.trickytripper.TrickyTripperApp getApp() -> f
de.koelle.christian.trickytripper.activities.ReportTabActivity -> de.koelle.christian.trickytripper.activities.d:
    java.util.List dynamicOwingDebtsRows -> b
    java.util.List dynamicSpendingRows -> a
    java.util.List participantsInSpinner -> e
    java.util.List dynamicDividerRowsOwingDebtsRows -> d
    int onePixel -> h
    java.util.List dynamicDividerRowsSpending -> c
    int padding8 -> g
    android.view.View view -> f
    java.util.List access$000(de.koelle.christian.trickytripper.activities.ReportTabActivity) -> a
    void access$100(de.koelle.christian.trickytripper.activities.ReportTabActivity,de.koelle.christian.trickytripper.TrickyTripperApp,de.koelle.christian.trickytripper.model.Participant,java.util.Locale,android.view.View) -> a
    void addDynamicCategoryRows(de.koelle.christian.trickytripper.TrickyTripperApp,de.koelle.christian.trickytripper.model.Participant,java.util.Locale,android.widget.TableLayout) -> a
    android.widget.TextView addNewTextViewToRow(android.widget.TableRow,java.lang.String,int) -> a
    android.widget.TextView addNewTextViewToRow(android.widget.TableRow,java.lang.String,int,float) -> a
    android.widget.TextView addNewTextViewToRow(android.widget.TableRow,java.lang.String,int,android.widget.TableRow$LayoutParams) -> a
    android.widget.TextView addNewTextViewToRwo(android.widget.TableRow,java.lang.String,int,android.widget.TableRow$LayoutParams,int,boolean) -> a
    void addOrderedDynamicRowsToView(java.util.TreeMap,android.widget.TableLayout,int,java.util.List,boolean) -> a
    android.widget.TableRow createAndSaveNewDividerRow(int,java.util.List,boolean) -> a
    void createPanel(android.view.View) -> a
    java.util.List getAllParticipants(de.koelle.christian.trickytripper.TrickyTripperApp) -> a
    int getPositionInSpinner(de.koelle.christian.trickytripper.model.Participant,java.util.List) -> a
    boolean isInScope(java.util.Collection,java.util.Map$Entry,java.util.Map$Entry) -> a
    void removeDynamicRows(android.widget.TableLayout,android.widget.TableLayout) -> a
    void update() -> a
    void updateDynamicRows(de.koelle.christian.trickytripper.TrickyTripperApp,de.koelle.christian.trickytripper.model.Participant,java.util.Locale,android.view.View) -> a
    void access$200(de.koelle.christian.trickytripper.activities.ReportTabActivity,de.koelle.christian.trickytripper.TrickyTripperApp,de.koelle.christian.trickytripper.model.Participant,java.util.Locale,android.view.View) -> b
    void addDynamicDebtRows(de.koelle.christian.trickytripper.TrickyTripperApp,de.koelle.christian.trickytripper.model.Participant,java.util.Locale,android.widget.TableLayout) -> b
    de.koelle.christian.trickytripper.TrickyTripperApp getApp() -> b
    de.koelle.christian.trickytripper.model.Trip getTripLoaded(de.koelle.christian.trickytripper.TrickyTripperApp) -> b
    void updateStaticRows(de.koelle.christian.trickytripper.TrickyTripperApp,de.koelle.christian.trickytripper.model.Participant,java.util.Locale,android.view.View) -> b
de.koelle.christian.trickytripper.activities.ReportTabActivity$1 -> de.koelle.christian.trickytripper.activities.d$a:
    de.koelle.christian.trickytripper.TrickyTripperApp val$app -> a
    de.koelle.christian.trickytripper.activities.ReportTabActivity this$0 -> d
    java.util.Locale val$locale -> b
    android.view.View val$view -> c
de.koelle.christian.trickytripper.activities.SaveToSdCardActivity -> de.koelle.christian.trickytripper.activities.SaveToSdCardActivity:
    java.util.List fileUris -> a
    android.os.Handler progressResultHandler -> d
    android.os.Handler pickerResultHandler -> c
    android.app.ProgressDialog progressDialog -> b
    boolean permPopShown -> f
    java.lang.String[] SYSTEM_PERMISSION -> g
    java.lang.String directoryPickedPath -> e
    android.app.ProgressDialog access$000(de.koelle.christian.trickytripper.activities.SaveToSdCardActivity) -> a
    void access$100(de.koelle.christian.trickytripper.activities.SaveToSdCardActivity,boolean) -> a
    void finishHere(boolean) -> a
    java.lang.StringBuilder getSuccessfulMsg(android.content.res.Resources,int) -> a
    java.util.List handleSendMultipleImages(android.content.Intent) -> a
    void access$200(de.koelle.christian.trickytripper.activities.SaveToSdCardActivity) -> b
    java.lang.String access$300(de.koelle.christian.trickytripper.activities.SaveToSdCardActivity) -> c
    java.util.List access$400(de.koelle.christian.trickytripper.activities.SaveToSdCardActivity) -> d
    android.os.Handler access$500(de.koelle.christian.trickytripper.activities.SaveToSdCardActivity) -> e
    void onCreateActually() -> e
    android.os.Handler access$600(de.koelle.christian.trickytripper.activities.SaveToSdCardActivity) -> f
    void doRequestSdCardpermissions() -> f
    boolean isSdCardPermissionNotGranted() -> g
    void requestSdCardPermissions() -> h
    void writeFiles() -> i
de.koelle.christian.trickytripper.activities.SaveToSdCardActivity$1 -> de.koelle.christian.trickytripper.activities.SaveToSdCardActivity$a:
    de.koelle.christian.trickytripper.activities.SaveToSdCardActivity this$0 -> a
de.koelle.christian.trickytripper.activities.SaveToSdCardActivity$2 -> de.koelle.christian.trickytripper.activities.SaveToSdCardActivity$b:
    de.koelle.christian.trickytripper.activities.SaveToSdCardActivity this$0 -> a
de.koelle.christian.trickytripper.activities.SaveToSdCardActivity$3 -> de.koelle.christian.trickytripper.activities.SaveToSdCardActivity$c:
    de.koelle.christian.trickytripper.activities.SaveToSdCardActivity this$0 -> a
de.koelle.christian.trickytripper.activities.SaveToSdCardActivity$4 -> de.koelle.christian.trickytripper.activities.SaveToSdCardActivity$d:
    de.koelle.christian.trickytripper.activities.SaveToSdCardActivity this$0 -> a
de.koelle.christian.trickytripper.activities.TripEditActivity -> de.koelle.christian.trickytripper.activities.TripEditActivity:
    de.koelle.christian.trickytripper.constants.ViewMode viewMode -> a
    de.koelle.christian.trickytripper.model.TripSummary trip -> b
    boolean hasTripPayments -> c
    void readAndSetInput(android.content.Intent) -> a
    void doSave() -> e
    de.koelle.christian.trickytripper.TrickyTripperApp getApp() -> f
    android.widget.EditText getEditText() -> g
    android.widget.Spinner getSpinner() -> h
    void initWidgets() -> i
    void prepareResultAndFinish() -> j
    boolean tryToSave() -> k
de.koelle.christian.trickytripper.activities.TripEditActivity$1 -> de.koelle.christian.trickytripper.activities.TripEditActivity$a:
    de.koelle.christian.trickytripper.activities.TripEditActivity this$0 -> a
de.koelle.christian.trickytripper.activitysupport.CurrencyCalculatorResultSupport -> de.koelle.christian.trickytripper.a.a:
    void onActivityResult(int,int,android.content.Intent,android.app.Activity,java.util.Locale,de.koelle.christian.common.ui.filter.DecimalNumberInputUtil) -> a
de.koelle.christian.trickytripper.activitysupport.CurrencySelectionResultSupport -> de.koelle.christian.trickytripper.a.b:
    java.util.Currency onActivityResult(int,int,android.content.Intent,android.app.Activity) -> a
de.koelle.christian.trickytripper.activitysupport.CurrencyViewSupport -> de.koelle.christian.trickytripper.a.c:
    java.util.List wrapCurrenciesInRowObject(java.util.List,android.content.res.Resources) -> a
de.koelle.christian.trickytripper.activitysupport.CurrencyViewSupport$1 -> de.koelle.christian.trickytripper.a.c$a:
    android.content.res.Resources val$resources -> a
    java.lang.String getStringToDisplay(java.lang.Object) -> a
    java.lang.String getStringToDisplay(java.util.Currency) -> a
de.koelle.christian.trickytripper.activitysupport.ImportOptionSupport -> de.koelle.christian.trickytripper.a.d:
    android.content.Context context -> c
    de.koelle.christian.trickytripper.controller.MiscController miscCtrl -> b
    de.koelle.christian.trickytripper.controller.ViewController viewCtrl -> a
    boolean onOptionsItemSelected(android.app.Activity) -> a
    boolean onOptionsItemSelected(android.app.Activity,java.util.Currency[]) -> a
de.koelle.christian.trickytripper.activitysupport.MainPagerAdapter -> de.koelle.christian.trickytripper.a.e:
    android.content.Context mContext -> a
de.koelle.christian.trickytripper.activitysupport.MathUtils -> de.koelle.christian.trickytripper.a.f:
    void divideAndSetOnMap(de.koelle.christian.trickytripper.model.Amount,java.util.List,java.util.Map,boolean,de.koelle.christian.trickytripper.factories.AmountFactory) -> a
    java.util.List getRandomizedIndices(int) -> a
de.koelle.christian.trickytripper.activitysupport.PaymentEditActivityState -> de.koelle.christian.trickytripper.a.g:
    boolean divideEqually -> b
    de.koelle.christian.trickytripper.model.Payment payment -> a
    de.koelle.christian.trickytripper.model.Payment getPayment() -> a
    boolean isDivideEqually() -> b
de.koelle.christian.trickytripper.activitysupport.SpinnerViewSupport -> de.koelle.christian.trickytripper.a.h:
    android.widget.Spinner configureDeleteExchangeRateSpinner(android.app.Activity,android.content.Context,int) -> a
    android.widget.Spinner configureReportSelectionSpinner(android.view.View,android.content.Context,int,java.util.List) -> a
    void configureReportSelectionSpinner(android.content.Context,java.util.List,android.widget.Spinner) -> a
    java.util.List createSpinnerObjects(de.koelle.christian.trickytripper.model.ResourceLabelAwareEnumeration,boolean,java.util.List,android.content.res.Resources,java.text.Collator) -> a
    java.util.List createSpinnerObjects(java.util.List,android.content.res.Resources) -> a
    java.util.List createSpinnerObjectsDeleteExchangeRateSelection(android.content.res.Resources) -> a
    void setSelection(android.widget.Spinner,java.lang.Object,android.widget.ArrayAdapter) -> a
de.koelle.christian.trickytripper.activitysupport.SpinnerViewSupport$1 -> de.koelle.christian.trickytripper.a.h$a:
    java.text.Collator val$collator -> a
    int compare(de.koelle.christian.trickytripper.ui.model.RowObject,de.koelle.christian.trickytripper.ui.model.RowObject) -> a
de.koelle.christian.trickytripper.activitysupport.TabDialogSupport -> de.koelle.christian.trickytripper.a.i:
    android.os.Bundle createBundleWithPaymentSelected(de.koelle.christian.trickytripper.model.Payment) -> a
    de.koelle.christian.trickytripper.model.Payment getPaymentFromBundle(android.os.Bundle) -> a
de.koelle.christian.trickytripper.activitysupport.Updatable -> de.koelle.christian.trickytripper.a.j:
    void update() -> a
de.koelle.christian.trickytripper.apputils.PrefAccessor -> de.koelle.christian.trickytripper.b.a:
    android.content.Context context -> a
    android.content.SharedPreferences getPrefs() -> a
    android.content.SharedPreferences$Editor getEditingPrefsEditor() -> b
de.koelle.christian.trickytripper.apputils.PrefWriterReaderUtils -> de.koelle.christian.trickytripper.b.b:
    java.util.Currency currencyCode2Currency(android.content.res.Resources,java.lang.String) -> a
    java.util.Currency ensureCurrencyIsSupported(java.util.Currency,android.content.res.Resources) -> a
    java.util.Currency loadDefaultCurrency(android.content.SharedPreferences,android.content.res.Resources) -> a
    long loadExchangeRateAutoSaveSeq(android.content.SharedPreferences) -> a
    void saveExchangeRateAutoSaveSeq(android.content.SharedPreferences$Editor,long) -> a
    void saveExportSettings(android.content.SharedPreferences$Editor,de.koelle.christian.trickytripper.model.ExportSettings) -> a
    void saveImportSettings(android.content.SharedPreferences$Editor,de.koelle.christian.trickytripper.model.ImportSettings) -> a
    de.koelle.christian.trickytripper.model.ExportSettings loadExportSettings(android.content.SharedPreferences) -> b
    void saveIdOfTripLastEdited(android.content.SharedPreferences$Editor,long) -> b
    long loadIdOfTripLastEdited(android.content.SharedPreferences) -> c
    de.koelle.christian.trickytripper.model.ImportSettings loadImportSettings(android.content.SharedPreferences) -> d
de.koelle.christian.trickytripper.constants.Rc -> de.koelle.christian.trickytripper.c.a:
    boolean USE_CACHE_DIR_NOT_FILE_DIR_FOR_REPORTS -> a
de.koelle.christian.trickytripper.constants.ViewMode -> de.koelle.christian.trickytripper.c.b:
    de.koelle.christian.trickytripper.constants.ViewMode CREATE -> b
    de.koelle.christian.trickytripper.constants.ViewMode NONE -> c
    de.koelle.christian.trickytripper.constants.ViewMode EDIT -> a
    de.koelle.christian.trickytripper.constants.ViewMode[] $VALUES -> d
de.koelle.christian.trickytripper.controller.ExchangeRateController -> de.koelle.christian.trickytripper.d.a:
    boolean deleteExchangeRates(java.util.List) -> a
    boolean doesExchangeRateAlreadyExist(de.koelle.christian.trickytripper.model.ExchangeRate) -> a
    java.util.List findSuitableRates(java.util.Currency,java.util.Currency) -> a
    de.koelle.christian.trickytripper.model.ExchangeRate getExchangeRateById(java.lang.Long) -> a
    void persistImportedExchangeRate(de.koelle.christian.trickytripper.model.ExchangeRate,boolean) -> a
    void saveImportSettingsUsedLast(de.koelle.christian.trickytripper.model.ImportSettings) -> a
    java.util.List getAllExchangeRatesWithoutInversion() -> b
    de.koelle.christian.trickytripper.model.ExchangeRate persistExchangeRate(de.koelle.christian.trickytripper.model.ExchangeRate) -> b
    long getNextExchangeRateAutoSaveSeqNumber() -> c
    void persistExchangeRateUsedLast(de.koelle.christian.trickytripper.model.ExchangeRate) -> c
    de.koelle.christian.trickytripper.model.ImportSettings getImportSettingsUsedLast() -> d
de.koelle.christian.trickytripper.controller.ExportController -> de.koelle.christian.trickytripper.d.b:
    java.util.List exportReport(de.koelle.christian.trickytripper.model.ExportSettings,de.koelle.christian.trickytripper.model.Participant,android.app.Activity) -> a
    boolean hasEnabledOutputChannel() -> a
    boolean ossSupportsOpenHtml() -> b
    boolean osSupportsOpenTxt() -> c
    boolean osSupportsOpenCsv() -> d
    java.util.List getEnabledExportOutputChannel() -> e
    de.koelle.christian.trickytripper.model.ExportSettings getDefaultExportSettings() -> f
de.koelle.christian.trickytripper.controller.MiscController -> de.koelle.christian.trickytripper.d.c:
    boolean checkIfInAssets(java.lang.String) -> a
    de.koelle.christian.trickytripper.model.HierarchicalCurrencyList getAllCurrenciesForTarget(java.util.Currency) -> a
    java.text.Collator getDefaultStringCollator() -> a
    java.util.Currency getCurrencyFavorite(java.util.Currency) -> b
    de.koelle.christian.common.ui.filter.DecimalNumberInputUtil getDecimalNumberInputUtil() -> b
    de.koelle.christian.common.options.OptionsSupport getOptionSupport() -> c
    java.util.Currency getDefaultBaseCurrency() -> d
    de.koelle.christian.trickytripper.model.HierarchicalCurrencyList getAllCurrencies() -> e
    boolean isOnline() -> f
    de.koelle.christian.common.support.DimensionSupport getDimensionSupport() -> g
de.koelle.christian.trickytripper.controller.TripController -> de.koelle.christian.trickytripper.d.d:
    void deleteTrip(de.koelle.christian.trickytripper.model.TripSummary) -> a
    java.util.List getAllParticipants(boolean,boolean) -> a
    java.lang.String getLoadedTripCurrencySymbol(boolean) -> a
    boolean isParticipantDeletable(de.koelle.christian.trickytripper.model.Participant) -> a
    boolean oneOrLessTripsLeft() -> a
    void persistPayment(de.koelle.christian.trickytripper.model.Payment) -> a
    de.koelle.christian.trickytripper.model.Payment prepareNewPayment(long) -> a
    void deletePayment(de.koelle.christian.trickytripper.model.Payment) -> b
    java.util.List getAllParticipants(boolean) -> b
    java.util.Currency getLoadedTripBaseCurrency() -> b
    de.koelle.christian.trickytripper.model.Payment loadPayment(long) -> b
    void loadTrip(de.koelle.christian.trickytripper.model.TripSummary) -> b
    boolean persistParticipant(de.koelle.christian.trickytripper.model.Participant) -> b
    boolean deleteParticipant(de.koelle.christian.trickytripper.model.Participant) -> c
    boolean persist(de.koelle.christian.trickytripper.model.TripSummary) -> c
    void reloadTrip() -> c
    boolean hasTripPayments(de.koelle.christian.trickytripper.model.TripSummary) -> d
    void safeLoadedTripIdToPrefs() -> e
    java.util.ArrayList getDescriptions() -> f
    java.util.List getAllTrips() -> g
    java.util.Map getDebts() -> h
    de.koelle.christian.trickytripper.strategies.SumReport getSumReport() -> i
    boolean hasLoadedTripPayments() -> j
    de.koelle.christian.trickytripper.ui.model.DialogState getDialogState() -> k
    de.koelle.christian.trickytripper.model.Trip getTripLoaded() -> m
de.koelle.christian.trickytripper.controller.TripResolver -> de.koelle.christian.trickytripper.d.e:
    de.koelle.christian.trickytripper.model.Trip getTripInEditing() -> d
    de.koelle.christian.trickytripper.factories.AmountFactory getAmountFactory() -> l
de.koelle.christian.trickytripper.controller.ViewController -> de.koelle.christian.trickytripper.d.f:
    void openCreateExchangeRate(android.app.Activity) -> a
    void openCreateExchangeRate(android.app.Activity,java.util.Currency) -> a
    void openCreateParticipant() -> a
    void openCreatePayment(de.koelle.christian.trickytripper.model.Participant) -> a
    void openCurrencySelectionForCalculation(android.app.Activity,java.util.Currency,int) -> a
    void openCurrencySelectionForNewExchangeRate(android.app.Activity,java.util.Currency,int,boolean) -> a
    void openDeleteConfirmationOnActivity(androidx.fragment.app.FragmentManager,android.os.Bundle) -> a
    void openDeleteConfirmationOnFragment(androidx.fragment.app.FragmentManager,android.os.Bundle,androidx.fragment.app.Fragment) -> a
    void openDeleteExchangeRates(android.app.Activity,java.util.Currency[]) -> a
    void openEditExchangeRate(android.app.Activity,de.koelle.christian.trickytripper.model.ExchangeRate) -> a
    void openEditPayment(de.koelle.christian.trickytripper.model.Payment) -> a
    void openEditTrip(android.app.Activity,de.koelle.christian.trickytripper.model.TripSummary) -> a
    void openHelp(androidx.fragment.app.FragmentManager) -> a
    void openMoneyCalculatorView(de.koelle.christian.trickytripper.model.Amount,int,android.app.Activity) -> a
    void openParticipantSelection(android.app.Activity,java.util.ArrayList,de.koelle.christian.trickytripper.model.Amount,boolean,java.util.ArrayList) -> a
    void openDatePickerOnActivity(androidx.fragment.app.FragmentManager) -> b
    void openEditParticipant(de.koelle.christian.trickytripper.model.Participant) -> b
    void openImportExchangeRates(android.app.Activity,java.util.Currency[]) -> b
    void openSettings() -> b
    void openExport() -> c
    void openTransferMoney(de.koelle.christian.trickytripper.model.Participant) -> c
de.koelle.christian.trickytripper.controller.impl.ExchangeRateControllerImpl -> de.koelle.christian.trickytripper.d.g.a:
    de.koelle.christian.trickytripper.dataaccess.DataManager dataManager -> a
    de.koelle.christian.trickytripper.decoupling.PrefsResolver prefsResolver -> b
    boolean deleteExchangeRates(java.util.List) -> a
    boolean doesExchangeRateAlreadyExist(de.koelle.christian.trickytripper.model.ExchangeRate) -> a
    java.util.List findSuitableRates(java.util.Currency,java.util.Currency) -> a
    de.koelle.christian.trickytripper.model.ExchangeRate getExchangeRateById(java.lang.Long) -> a
    void persistImportedExchangeRate(de.koelle.christian.trickytripper.model.ExchangeRate,boolean) -> a
    void saveImportSettingsUsedLast(de.koelle.christian.trickytripper.model.ImportSettings) -> a
    java.util.List getAllExchangeRatesWithoutInversion() -> b
    de.koelle.christian.trickytripper.model.ExchangeRate persistExchangeRate(de.koelle.christian.trickytripper.model.ExchangeRate) -> b
    long getNextExchangeRateAutoSaveSeqNumber() -> c
    void persistExchangeRateUsedLast(de.koelle.christian.trickytripper.model.ExchangeRate) -> c
    de.koelle.christian.trickytripper.model.ImportSettings getImportSettingsUsedLast() -> d
de.koelle.christian.trickytripper.controller.impl.ExportControllerImpl -> de.koelle.christian.trickytripper.d.g.b:
    android.content.Context context -> b
    de.koelle.christian.trickytripper.export.Exporter exporter -> c
    boolean osSupportsOpenCsv -> e
    boolean osSupportsOpenTxt -> f
    de.koelle.christian.trickytripper.decoupling.PrefsResolver prefsResolver -> a
    boolean osSupportsOpenHtml -> g
    de.koelle.christian.trickytripper.controller.TripResolver tripResolver -> d
    java.util.List exportReport(de.koelle.christian.trickytripper.model.ExportSettings,de.koelle.christian.trickytripper.model.Participant,android.app.Activity) -> a
    android.net.Uri getFakeFileAuthedUri(java.lang.String) -> a
    boolean hasEnabledOutputChannel() -> a
    boolean osSupportsIntent(android.content.Intent) -> a
    boolean ossSupportsOpenHtml() -> b
    boolean osSupportsOpenTxt() -> c
    boolean osSupportsOpenCsv() -> d
    java.util.List getEnabledExportOutputChannel() -> e
    de.koelle.christian.trickytripper.model.ExportSettings getDefaultExportSettings() -> f
de.koelle.christian.trickytripper.controller.impl.MiscControllerImpl -> de.koelle.christian.trickytripper.d.g.c:
    de.koelle.christian.common.support.DimensionSupport dimensionSupport -> e
    java.util.List allAssetsList -> f
    de.koelle.christian.trickytripper.decoupling.PrefsResolver prefsResolver -> h
    de.koelle.christian.trickytripper.dataaccess.DataManager dataManager -> c
    java.text.Collator defaultCollator -> a
    android.content.Context context -> g
    de.koelle.christian.common.ui.filter.DecimalNumberInputUtil decimalNumberInputUtil -> b
    de.koelle.christian.common.options.OptionsSupport optionSupport -> d
    boolean checkIfInAssets(java.lang.String) -> a
    de.koelle.christian.trickytripper.model.HierarchicalCurrencyList getAllCurrenciesForTarget(java.util.Currency) -> a
    java.text.Collator getDefaultStringCollator() -> a
    java.util.Locale getLocale(android.content.Context) -> a
    java.util.Currency getCurrencyFavorite(java.util.Currency) -> b
    de.koelle.christian.common.ui.filter.DecimalNumberInputUtil getDecimalNumberInputUtil() -> b
    de.koelle.christian.common.options.OptionsSupport getOptionSupport() -> c
    java.util.Currency getDefaultBaseCurrency() -> d
    de.koelle.christian.trickytripper.model.HierarchicalCurrencyList getAllCurrencies() -> e
    boolean isOnline() -> f
    de.koelle.christian.common.support.DimensionSupport getDimensionSupport() -> g
de.koelle.christian.trickytripper.controller.impl.TripControllerImpl -> de.koelle.christian.trickytripper.d.g.d:
    de.koelle.christian.trickytripper.dataaccess.DataManager dataManager -> a
    de.koelle.christian.trickytripper.factories.AmountFactory amountFactory -> d
    de.koelle.christian.trickytripper.decoupling.PrefsResolver prefsResolver -> e
    de.koelle.christian.trickytripper.controller.MiscController miscController -> f
    de.koelle.christian.trickytripper.ui.model.DialogState dialogState -> c
    de.koelle.christian.trickytripper.strategies.TripReportLogic tripReportLogic -> b
    android.content.Context context -> g
    de.koelle.christian.trickytripper.model.Trip tripToBeEdited -> h
    void deleteTrip(de.koelle.christian.trickytripper.model.TripSummary) -> a
    java.util.List getAllParticipants(boolean,boolean) -> a
    java.lang.String getLoadedTripCurrencySymbol(boolean) -> a
    boolean isParticipantDeletable(de.koelle.christian.trickytripper.model.Participant) -> a
    void logPayment(java.lang.String,java.lang.String,de.koelle.christian.trickytripper.model.Payment) -> a
    boolean oneOrLessTripsLeft() -> a
    void persistPayment(de.koelle.christian.trickytripper.model.Payment) -> a
    de.koelle.christian.trickytripper.model.Payment prepareNewPayment(long) -> a
    void removePaymentFromList(long,java.util.List) -> a
    void updateAllTransientData(de.koelle.christian.trickytripper.model.Trip,de.koelle.christian.trickytripper.strategies.TripReportLogic) -> a
    void deletePayment(de.koelle.christian.trickytripper.model.Payment) -> b
    java.util.List getAllParticipants(boolean) -> b
    java.util.Currency getLoadedTripBaseCurrency() -> b
    de.koelle.christian.trickytripper.model.Payment loadPayment(long) -> b
    void loadTrip(de.koelle.christian.trickytripper.model.TripSummary) -> b
    boolean persistParticipant(de.koelle.christian.trickytripper.model.Participant) -> b
    boolean deleteParticipant(de.koelle.christian.trickytripper.model.Participant) -> c
    de.koelle.christian.trickytripper.model.Participant findParticipantByUuid(long) -> c
    boolean persist(de.koelle.christian.trickytripper.model.TripSummary) -> c
    void reloadTrip() -> c
    de.koelle.christian.trickytripper.model.Trip getTripInEditing() -> d
    boolean hasTripPayments(de.koelle.christian.trickytripper.model.TripSummary) -> d
    void safeLoadedTripIdToPrefs() -> e
    java.util.ArrayList getDescriptions() -> f
    java.util.List getAllTrips() -> g
    java.util.Map getDebts() -> h
    de.koelle.christian.trickytripper.strategies.SumReport getSumReport() -> i
    boolean hasLoadedTripPayments() -> j
    de.koelle.christian.trickytripper.ui.model.DialogState getDialogState() -> k
    de.koelle.christian.trickytripper.factories.AmountFactory getAmountFactory() -> l
    de.koelle.christian.trickytripper.model.Trip getTripLoaded() -> m
    de.koelle.christian.trickytripper.model.Trip getTripToBeEdited() -> n
    void createTransientData() -> o
    void initPostTripLoad() -> p
    void updateOtherAspectsInAppPostTripLoad() -> q
de.koelle.christian.trickytripper.controller.impl.TripControllerImpl$1 -> de.koelle.christian.trickytripper.d.g.d$a:
    java.text.Collator val$collator -> a
    int compare(de.koelle.christian.trickytripper.model.Participant,de.koelle.christian.trickytripper.model.Participant) -> a
de.koelle.christian.trickytripper.controller.impl.ViewControllerImpl -> de.koelle.christian.trickytripper.d.g.e:
    android.content.Context context -> a
    void openCreateExchangeRate(android.app.Activity) -> a
    void openCreateExchangeRate(android.app.Activity,java.util.Currency) -> a
    void openCreateParticipant() -> a
    void openCreatePayment(de.koelle.christian.trickytripper.model.Participant) -> a
    void openCurrencySelection(android.app.Activity,java.util.Currency,int,de.koelle.christian.trickytripper.activities.CurrencySelectionActivity$CurrencySelectionMode) -> a
    void openCurrencySelectionForCalculation(android.app.Activity,java.util.Currency,int) -> a
    void openCurrencySelectionForNewExchangeRate(android.app.Activity,java.util.Currency,int,boolean) -> a
    void openDeleteConfirmationOnActivity(androidx.fragment.app.FragmentManager,android.os.Bundle) -> a
    void openDeleteConfirmationOnFragment(androidx.fragment.app.FragmentManager,android.os.Bundle,androidx.fragment.app.Fragment) -> a
    void openDeleteExchangeRates(android.app.Activity,java.util.Currency[]) -> a
    void openEditExchangeRate(android.app.Activity,de.koelle.christian.trickytripper.model.ExchangeRate) -> a
    void openEditExchangeRate(android.app.Activity,de.koelle.christian.trickytripper.model.ExchangeRate,java.util.Currency) -> a
    void openEditPayment(de.koelle.christian.trickytripper.model.Payment) -> a
    void openEditTrip(android.app.Activity,de.koelle.christian.trickytripper.model.TripSummary) -> a
    void openHelp(androidx.fragment.app.FragmentManager) -> a
    void openMoneyCalculatorView(de.koelle.christian.trickytripper.model.Amount,int,android.app.Activity) -> a
    void openParticipantSelection(android.app.Activity,java.util.ArrayList,de.koelle.christian.trickytripper.model.Amount,boolean,java.util.ArrayList) -> a
    void startActivityWithParams(java.util.Map,java.lang.Class,de.koelle.christian.trickytripper.constants.ViewMode) -> a
    void startActivityWithParamsForResult(java.util.Map,java.lang.Class,de.koelle.christian.trickytripper.constants.ViewMode,int,android.app.Activity) -> a
    void openDatePickerOnActivity(androidx.fragment.app.FragmentManager) -> b
    void openDeleteConfirmation(androidx.fragment.app.FragmentManager,android.os.Bundle,androidx.fragment.app.Fragment) -> b
    void openEditParticipant(de.koelle.christian.trickytripper.model.Participant) -> b
    void openImportExchangeRates(android.app.Activity,java.util.Currency[]) -> b
    void openSettings() -> b
    void openExport() -> c
    void openTransferMoney(de.koelle.christian.trickytripper.model.Participant) -> c
de.koelle.christian.trickytripper.dataaccess.DataManager -> de.koelle.christian.trickytripper.e.a:
    boolean deleteExchangeRates(java.util.List) -> a
    void deleteTrip(de.koelle.christian.trickytripper.model.TripSummary) -> a
    boolean doesExchangeRateAlreadyExist(de.koelle.christian.trickytripper.model.ExchangeRate) -> a
    boolean doesParticipantAlreadyExist(java.lang.String,long,long) -> a
    boolean doesTripAlreadyExist(java.lang.String,long) -> a
    java.util.List findSuitableRates(java.util.Currency,java.util.Currency) -> a
    de.koelle.christian.trickytripper.model.CurrenciesUsed findUsedCurrenciesForTarget(java.util.Currency) -> a
    java.util.ArrayList getAllPaymentDescriptionsInTrip(long) -> a
    de.koelle.christian.trickytripper.model.ExchangeRate getExchangeRateById(java.lang.Long) -> a
    boolean oneOrLessTripsLeft() -> a
    void persistImportedExchangeRate(de.koelle.christian.trickytripper.model.ExchangeRate,boolean) -> a
    de.koelle.christian.trickytripper.model.Participant persistParticipantInTrip(long,de.koelle.christian.trickytripper.model.Participant) -> a
    de.koelle.christian.trickytripper.model.Payment persistPaymentInTrip(long,de.koelle.christian.trickytripper.model.Payment) -> a
    de.koelle.christian.trickytripper.model.Trip persistTrip(de.koelle.christian.trickytripper.model.Trip) -> a
    boolean deleteParticipant(long) -> b
    java.util.List getAllExchangeRatesWithoutInversion() -> b
    de.koelle.christian.trickytripper.model.ExchangeRate persistExchangeRate(de.koelle.christian.trickytripper.model.ExchangeRate) -> b
    void deletePayment(long) -> c
    java.util.List getAllTripSummaries() -> c
    void persistExchangeRateUsedLast(de.koelle.christian.trickytripper.model.ExchangeRate) -> c
    de.koelle.christian.trickytripper.model.Trip loadTripById(long) -> d
    boolean hasTripPayments(long) -> e
de.koelle.christian.trickytripper.dataaccess.PhoneContactResolver -> de.koelle.christian.trickytripper.e.b:
    android.content.ContentResolver mResolver -> a
    java.util.ArrayList findContactByNameString2(java.lang.String) -> a
de.koelle.christian.trickytripper.dataaccess.impl.Dao -> de.koelle.christian.trickytripper.e.c.a:
de.koelle.christian.trickytripper.dataaccess.impl.DataManagerImpl -> de.koelle.christian.trickytripper.e.c.b:
    android.database.sqlite.SQLiteDatabase db -> a
    de.koelle.christian.trickytripper.dataaccess.impl.daos.ParticipantDao participantDao -> c
    de.koelle.christian.trickytripper.dataaccess.impl.daos.TripDao tripDao -> b
    de.koelle.christian.trickytripper.dataaccess.impl.daos.ExchangeRateDao exchangeRateDao -> e
    de.koelle.christian.trickytripper.dataaccess.impl.daos.PaymentDao paymentDao -> d
    java.util.List convertPaymentReferenceToPayment(java.util.List,java.util.List) -> a
    boolean deleteExchangeRates(java.util.List) -> a
    void deleteTrip(de.koelle.christian.trickytripper.model.TripSummary) -> a
    boolean doesExchangeRateAlreadyExist(de.koelle.christian.trickytripper.model.ExchangeRate) -> a
    boolean doesParticipantAlreadyExist(java.lang.String,long,long) -> a
    boolean doesTripAlreadyExist(java.lang.String,long) -> a
    java.util.List findSuitableRates(java.util.Currency,java.util.Currency) -> a
    de.koelle.christian.trickytripper.model.CurrenciesUsed findUsedCurrenciesForTarget(java.util.Currency) -> a
    java.util.ArrayList getAllPaymentDescriptionsInTrip(long) -> a
    de.koelle.christian.trickytripper.model.ExchangeRate getExchangeRateById(java.lang.Long) -> a
    boolean oneOrLessTripsLeft() -> a
    void persistImportedExchangeRate(de.koelle.christian.trickytripper.model.ExchangeRate,boolean) -> a
    de.koelle.christian.trickytripper.model.Participant persistParticipantInTrip(long,de.koelle.christian.trickytripper.model.Participant) -> a
    de.koelle.christian.trickytripper.model.Payment persistPaymentInTrip(long,de.koelle.christian.trickytripper.model.Payment) -> a
    de.koelle.christian.trickytripper.model.Trip persistTrip(de.koelle.christian.trickytripper.model.Trip) -> a
    boolean deleteExchangeRatesById(java.util.List) -> b
    boolean deleteParticipant(long) -> b
    java.util.List getAllExchangeRatesWithoutInversion() -> b
    de.koelle.christian.trickytripper.model.ExchangeRate persistExchangeRate(de.koelle.christian.trickytripper.model.ExchangeRate) -> b
    void deletePayment(long) -> c
    java.util.List getAllTripSummaries() -> c
    void persistExchangeRateUsedLast(de.koelle.christian.trickytripper.model.ExchangeRate) -> c
    de.koelle.christian.trickytripper.model.Trip loadTripById(long) -> d
    boolean hasTripPayments(long) -> e
de.koelle.christian.trickytripper.dataaccess.impl.OpenHelper -> de.koelle.christian.trickytripper.e.c.c:
    android.content.Context context -> a
de.koelle.christian.trickytripper.dataaccess.impl.daos.ExchangeRateDao -> de.koelle.christian.trickytripper.e.c.d.a:
    java.lang.String ER_SELECTION_ARGS_FIND_ALL_MATCHING -> g
    android.database.sqlite.SQLiteDatabase db -> a
    java.lang.String ER_SELECTION_ARGS_FIND_IMPORTED -> f
    java.lang.String ERP_SELECTION_ARGS_FIND_ALL_MATCHING -> i
    java.lang.String ERP_SELECTION_ARGS_FIND_EXISTING -> h
    android.database.sqlite.SQLiteStatement insertStatementErp -> c
    android.database.sqlite.SQLiteStatement insertStatementEr -> b
    android.database.sqlite.SQLiteStatement countDescInErUnless -> e
    android.database.sqlite.SQLiteStatement countDescInEr -> d
    void addIfNotYetContained(java.util.Currency,java.util.List,java.util.Currency) -> a
    de.koelle.christian.trickytripper.model.ExchangeRate assembleExchangeRate(android.database.Cursor) -> a
    long create(de.koelle.christian.trickytripper.model.ExchangeRate) -> a
    void delete(java.util.List) -> a
    java.util.Map findCurrenciesInExchangeRates(java.util.Currency) -> a
    java.util.List findSuitableRates(java.util.Currency,java.util.Currency) -> a
    java.util.List getAllExchangeRatesWithoutInversion() -> a
    de.koelle.christian.trickytripper.model.ExchangeRate getExchangeRateById(java.lang.Long) -> a
    java.util.List queryExchangeRates(java.lang.String,java.lang.String[],java.lang.String) -> a
    int updatePrefs(java.util.Currency,java.util.Currency,long) -> a
    long createPref(de.koelle.christian.trickytripper.model.ExchangeRate) -> b
    void deletePrefs(java.util.List) -> b
    java.util.List findMatchingExchangeRates(java.util.Currency,java.util.Currency) -> b
    java.util.Map findUsedCurrencies(java.util.Currency) -> b
    boolean doesExchangeRateAlreadyExist(de.koelle.christian.trickytripper.model.ExchangeRate) -> c
    java.util.List queryExchangeRatePrefs(java.util.Currency,java.util.Currency) -> c
    java.util.List findExistingImportedRecords(de.koelle.christian.trickytripper.model.ExchangeRate) -> d
    void persistExchangeRateUsedLast(de.koelle.christian.trickytripper.model.ExchangeRate) -> e
    void update(de.koelle.christian.trickytripper.model.ExchangeRate) -> f
de.koelle.christian.trickytripper.dataaccess.impl.daos.ExchangeRatePrefTable -> de.koelle.christian.trickytripper.e.c.d.b:
    void onCreate(android.database.sqlite.SQLiteDatabase) -> a
    void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int) -> a
de.koelle.christian.trickytripper.dataaccess.impl.daos.ExchangeRateTable -> de.koelle.christian.trickytripper.e.c.d.c:
    void onCreate(android.database.sqlite.SQLiteDatabase) -> a
    void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int) -> a
de.koelle.christian.trickytripper.dataaccess.impl.daos.ExchangeRateUsedComparator -> de.koelle.christian.trickytripper.e.c.d.d:
    java.util.List sortedIdListUsedLast -> a
    int compare(de.koelle.christian.trickytripper.model.ExchangeRate,de.koelle.christian.trickytripper.model.ExchangeRate) -> a
de.koelle.christian.trickytripper.dataaccess.impl.daos.ParticipantDao -> de.koelle.christian.trickytripper.e.c.d.e:
    android.database.sqlite.SQLiteDatabase db -> a
    android.database.sqlite.SQLiteStatement countNameInTripStatement -> c
    android.database.sqlite.SQLiteStatement insertStatement -> b
    android.database.sqlite.SQLiteStatement deleteStatement -> e
    android.database.sqlite.SQLiteStatement countNameInTripStatementUnless -> d
    long create(de.koelle.christian.trickytripper.dataaccess.impl.tecbeans.ParticipantReference) -> a
    void deleteAllInTrip(long) -> a
    boolean doesParticipantAlreadyExist(java.lang.String,long,long) -> a
    void deleteParticipant(long) -> b
    void update(de.koelle.christian.trickytripper.dataaccess.impl.tecbeans.ParticipantReference) -> b
    java.util.List getAllParticipantsInTrip(long) -> c
de.koelle.christian.trickytripper.dataaccess.impl.daos.ParticipantTable -> de.koelle.christian.trickytripper.e.c.d.f:
    void onCreate(android.database.sqlite.SQLiteDatabase) -> a
    void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int) -> a
de.koelle.christian.trickytripper.dataaccess.impl.daos.PaymentDao -> de.koelle.christian.trickytripper.e.c.d.g:
    android.database.sqlite.SQLiteDatabase db -> a
    android.database.sqlite.SQLiteStatement stmtCountPaymentsInTrip -> f
    android.database.sqlite.SQLiteStatement stmtDelete -> c
    android.database.sqlite.SQLiteStatement stmtInsert -> b
    android.database.sqlite.SQLiteStatement stmtDeleteByPaymentId -> e
    android.database.sqlite.SQLiteStatement stmtInsertRelation -> d
    int countPaymentsInTrip(long) -> a
    long create(de.koelle.christian.trickytripper.dataaccess.impl.tecbeans.PaymentParticipantRelationKey) -> a
    long create(de.koelle.christian.trickytripper.dataaccess.impl.tecbeans.PaymentReference) -> a
    void create(long,java.util.List) -> a
    void deleteAllInTrip(long) -> b
    void update(de.koelle.christian.trickytripper.dataaccess.impl.tecbeans.PaymentReference) -> b
    void deletePayment(long) -> c
    void deleteWithRelations(long) -> d
    java.util.ArrayList getAllPaymentDescriptionsInTrip(long) -> e
    java.util.List getAllPaymentsInTrip(long) -> f
    void deleteAllRelatedRecords(long) -> g
de.koelle.christian.trickytripper.dataaccess.impl.daos.PaymentTable -> de.koelle.christian.trickytripper.e.c.d.h:
    void onCreate(android.database.sqlite.SQLiteDatabase) -> a
    void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int) -> a
de.koelle.christian.trickytripper.dataaccess.impl.daos.RelPaymentParticipantTable -> de.koelle.christian.trickytripper.e.c.d.i:
    void onCreate(android.database.sqlite.SQLiteDatabase) -> a
    void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int) -> a
de.koelle.christian.trickytripper.dataaccess.impl.daos.TripDao -> de.koelle.christian.trickytripper.e.c.d.j:
    android.database.sqlite.SQLiteDatabase db -> a
    android.database.sqlite.SQLiteStatement countNameInTripStatement -> c
    android.database.sqlite.SQLiteStatement insertStatement -> b
    android.database.sqlite.SQLiteStatement countTripStatement -> e
    android.database.sqlite.SQLiteStatement countNameInTripStatementUnless -> d
    long create(de.koelle.christian.trickytripper.model.Trip) -> a
    void delete(long) -> a
    boolean doesTripAlreadyExist(java.lang.String,long) -> a
    java.util.List findAllCurrenciesUsedInTrips() -> a
    de.koelle.christian.trickytripper.model.Trip get(long) -> b
    java.util.List getAll() -> b
    void update(de.koelle.christian.trickytripper.model.Trip) -> b
    java.util.List getAllTripSummaries() -> c
    boolean onlyOneTripLeft() -> d
de.koelle.christian.trickytripper.dataaccess.impl.daos.TripTable -> de.koelle.christian.trickytripper.e.c.d.k:
    void onCreate(android.database.sqlite.SQLiteDatabase) -> a
    void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int) -> a
de.koelle.christian.trickytripper.dataaccess.impl.tecbeans.ParticipantReference -> de.koelle.christian.trickytripper.e.c.e.a:
    long id -> b
    long trip_id -> a
    java.lang.String name -> c
    boolean active -> d
    long getId() -> a
    java.lang.String getName() -> b
    long getTrip_id() -> c
    boolean isActive() -> d
de.koelle.christian.trickytripper.dataaccess.impl.tecbeans.PaymentParticipantRelationKey -> de.koelle.christian.trickytripper.e.c.e.b:
    long participantId -> b
    long paymentId -> a
    boolean isPayer -> c
    de.koelle.christian.trickytripper.model.Amount amount -> d
    de.koelle.christian.trickytripper.model.Amount getAmount() -> a
    void setPaymentId(long) -> a
    long getParticipantId() -> b
    long getPaymentId() -> c
    boolean isPayer() -> d
de.koelle.christian.trickytripper.dataaccess.impl.tecbeans.PaymentReference -> de.koelle.christian.trickytripper.e.c.e.c:
    java.util.Date paymentDateTime -> e
    java.util.List paymentRelationKeys -> f
    long trip_id -> a
    long id -> c
    de.koelle.christian.trickytripper.model.PaymentCategory category -> b
    java.lang.String description -> d
    void createAndAddEntry(java.util.Map$Entry,boolean,java.util.List,long) -> a
    de.koelle.christian.trickytripper.model.PaymentCategory getCategory() -> a
    void setCategory(de.koelle.christian.trickytripper.model.PaymentCategory) -> a
    void setDescription(java.lang.String) -> a
    void setId(long) -> a
    void setPaymentDateTime(java.util.Date) -> a
    java.lang.String getDescription() -> b
    long getId() -> c
    java.util.Date getPaymentDateTime() -> d
    java.util.List getPaymentRelationKeys() -> e
    long getTrip_id() -> f
de.koelle.christian.trickytripper.decoupling.ActivityResolver -> de.koelle.christian.trickytripper.f.a:
    java.lang.Object getActivity() -> a
de.koelle.christian.trickytripper.decoupling.PrefsResolver -> de.koelle.christian.trickytripper.f.b:
    android.content.SharedPreferences getPrefs() -> a
    android.content.SharedPreferences$Editor getEditingPrefsEditor() -> b
de.koelle.christian.trickytripper.decoupling.ResourceResolver -> de.koelle.christian.trickytripper.f.c:
    java.util.Locale getLocale() -> a
    java.lang.String resolve(int) -> a
de.koelle.christian.trickytripper.decoupling.impl.ActivityResolverImpl -> de.koelle.christian.trickytripper.f.d.a:
    android.app.Activity activity -> a
    java.lang.Object getActivity() -> a
de.koelle.christian.trickytripper.decoupling.impl.ResourceResolverImpl -> de.koelle.christian.trickytripper.f.d.b:
    android.content.res.Resources resources -> a
    java.util.Locale getLocale() -> a
    java.lang.String resolve(int) -> a
de.koelle.christian.trickytripper.dialogs.DatePickerDialogFragment -> de.koelle.christian.trickytripper.g.a:
    java.util.Calendar initialDate -> a
    java.util.Calendar resultDate -> b
    java.util.Date resultDateTime -> c
    java.util.Calendar access$000(de.koelle.christian.trickytripper.dialogs.DatePickerDialogFragment) -> a
    java.util.Date access$202(de.koelle.christian.trickytripper.dialogs.DatePickerDialogFragment,java.util.Date) -> a
    void bindWidgets(android.view.View) -> a
    java.util.Calendar access$100(de.koelle.christian.trickytripper.dialogs.DatePickerDialogFragment) -> b
    de.koelle.christian.trickytripper.dialogs.DatePickerDialogFragment$DatePickerDialogCallback getCallBack() -> b
    java.util.Date access$200(de.koelle.christian.trickytripper.dialogs.DatePickerDialogFragment) -> c
    de.koelle.christian.trickytripper.dialogs.DatePickerDialogFragment$DatePickerDialogCallback access$300(de.koelle.christian.trickytripper.dialogs.DatePickerDialogFragment) -> d
de.koelle.christian.trickytripper.dialogs.DatePickerDialogFragment$1 -> de.koelle.christian.trickytripper.g.a$a:
    de.koelle.christian.trickytripper.dialogs.DatePickerDialogFragment this$0 -> b
    android.view.View val$view -> a
de.koelle.christian.trickytripper.dialogs.DatePickerDialogFragment$2 -> de.koelle.christian.trickytripper.g.a$b:
    de.koelle.christian.trickytripper.dialogs.DatePickerDialogFragment this$0 -> a
de.koelle.christian.trickytripper.dialogs.DatePickerDialogFragment$3 -> de.koelle.christian.trickytripper.g.a$c:
    de.koelle.christian.trickytripper.dialogs.DatePickerDialogFragment this$0 -> a
de.koelle.christian.trickytripper.dialogs.DatePickerDialogFragment$DatePickerDialogCallback -> de.koelle.christian.trickytripper.g.a$d:
    void deliverDatePickerResult(java.util.Date) -> a
    int getDatePickerStringIdForTitle() -> b
    java.util.Date getDatePickerInitialDate() -> c
de.koelle.christian.trickytripper.dialogs.DeleteDialogFragment -> de.koelle.christian.trickytripper.g.b:
    void access$000(de.koelle.christian.trickytripper.dialogs.DeleteDialogFragment,android.os.Bundle) -> a
    void doDelete(android.os.Bundle) -> b
    de.koelle.christian.trickytripper.dialogs.DeleteDialogFragment$DeleteConfirmationCallback getCallBack() -> b
    java.lang.String getMessage(android.os.Bundle) -> c
de.koelle.christian.trickytripper.dialogs.DeleteDialogFragment$1 -> de.koelle.christian.trickytripper.g.b$a:
    de.koelle.christian.trickytripper.dialogs.DeleteDialogFragment this$0 -> a
de.koelle.christian.trickytripper.dialogs.DeleteDialogFragment$2 -> de.koelle.christian.trickytripper.g.b$b:
    android.os.Bundle val$arguments -> a
    de.koelle.christian.trickytripper.dialogs.DeleteDialogFragment this$0 -> b
de.koelle.christian.trickytripper.dialogs.DeleteDialogFragment$DeleteConfirmationCallback -> de.koelle.christian.trickytripper.g.b$c:
    java.lang.String getDeleteConfirmationMsg(android.os.Bundle) -> a
    void doDelete(android.os.Bundle) -> b
de.koelle.christian.trickytripper.dialogs.HelpDialogFragment -> de.koelle.christian.trickytripper.g.c:
    java.lang.String determineHelpFileUrl(android.app.Activity,de.koelle.christian.trickytripper.controller.MiscController) -> a
de.koelle.christian.trickytripper.dialogs.HelpDialogFragment$1 -> de.koelle.christian.trickytripper.g.c$a:
    de.koelle.christian.trickytripper.dialogs.HelpDialogFragment this$0 -> a
de.koelle.christian.trickytripper.dialogs.PermissionRationaleDialog -> de.koelle.christian.trickytripper.g.d:
    de.koelle.christian.trickytripper.dialogs.PermissionRationaleDialog$PermissionRationaleDialogCallback callback -> a
de.koelle.christian.trickytripper.dialogs.PermissionRationaleDialog$1 -> de.koelle.christian.trickytripper.g.d$a:
    de.koelle.christian.trickytripper.dialogs.PermissionRationaleDialog this$0 -> a
de.koelle.christian.trickytripper.dialogs.PermissionRationaleDialog$PermissionRationaleDialogCallback -> de.koelle.christian.trickytripper.g.d$b:
    int getPermissionNotificationTextId() -> a
    void permissionCustomNotificationDone() -> d
de.koelle.christian.trickytripper.exchangerates.ExchangeRateImporter -> de.koelle.christian.trickytripper.h.a:
de.koelle.christian.trickytripper.exchangerates.impl.AbstractExchangeRateResultExtractor -> de.koelle.christian.trickytripper.h.b.a:
    java.lang.String NBS -> a
    java.lang.Double extractValue(java.lang.String) -> a
    java.util.regex.Pattern getPattern() -> a
    java.lang.String clean(java.lang.String) -> b
de.koelle.christian.trickytripper.exchangerates.impl.AsyncExchangeRateJsonResolverExchangeratesapiIoImpl -> de.koelle.christian.trickytripper.h.b.b:
    android.content.Context context -> a
    de.koelle.christian.common.json.AsyncJsonParser caller -> b
    void cancelRunningRequests() -> a
    void getExchangeRate(java.util.Currency,java.util.Currency,de.koelle.christian.trickytripper.exchangerates.impl.AsyncExchangeRateResolverResultCallback) -> a
    java.lang.String provideUrl(java.util.Currency,java.util.Currency) -> a
de.koelle.christian.trickytripper.exchangerates.impl.AsyncExchangeRateJsonResolverExchangeratesapiIoImpl$1 -> de.koelle.christian.trickytripper.h.b.b$a:
    de.koelle.christian.trickytripper.exchangerates.impl.AsyncExchangeRateResolverResultCallback val$callback -> b
    java.util.Currency val$to -> a
    void deliverResult(org.json.JSONObject) -> a
de.koelle.christian.trickytripper.exchangerates.impl.AsyncExchangeRateResolver -> de.koelle.christian.trickytripper.h.b.c:
    void cancelRunningRequests() -> a
    void getExchangeRate(java.util.Currency,java.util.Currency,de.koelle.christian.trickytripper.exchangerates.impl.AsyncExchangeRateResolverResultCallback) -> a
de.koelle.christian.trickytripper.exchangerates.impl.AsyncExchangeRateResolverResultCallback -> de.koelle.christian.trickytripper.h.b.d:
    void deliverResult(java.lang.String) -> a
de.koelle.christian.trickytripper.exchangerates.impl.ExchangeRateImporterImpl -> de.koelle.christian.trickytripper.h.b.e:
    de.koelle.christian.trickytripper.exchangerates.impl.AsyncExchangeRateResolver asyncExchangeRateResolver -> a
    boolean stopped -> e
    int chunkDelay -> d
    de.koelle.christian.trickytripper.exchangerates.impl.ExchangeRateResultExtractor exchangeRateResultExtractor -> b
    int chunkSize -> c
    void cancelRunningRequests() -> a
    void importExchangeRates(java.util.Set,de.koelle.christian.trickytripper.exchangerates.impl.ExchangeRateImporterResultCallback) -> a
    void sendRequest(de.koelle.christian.trickytripper.exchangerates.impl.ExchangeRateImporterResultCallback,java.util.List) -> a
    void setAsyncExchangeRateResolver(de.koelle.christian.trickytripper.exchangerates.impl.AsyncExchangeRateResolver) -> a
    void setExchangeRateResultExtractor(de.koelle.christian.trickytripper.exchangerates.impl.ExchangeRateResultExtractor) -> a
    void idle() -> b
de.koelle.christian.trickytripper.exchangerates.impl.ExchangeRateImporterImpl$1 -> de.koelle.christian.trickytripper.h.b.e$a:
de.koelle.christian.trickytripper.exchangerates.impl.ExchangeRateImporterImpl$FromToCurrencyPair -> de.koelle.christian.trickytripper.h.b.e$b:
    java.util.Currency to -> b
    java.util.Currency from -> a
    java.util.Currency getFrom() -> a
    java.util.Currency getTo() -> b
de.koelle.christian.trickytripper.exchangerates.impl.ExchangeRateImporterImpl$MyAsyncExchangeRateResolverResult -> de.koelle.christian.trickytripper.h.b.e$c:
    de.koelle.christian.trickytripper.exchangerates.impl.ExchangeRateImporterResultCallback exchangeRateImporterCallback -> d
    de.koelle.christian.trickytripper.exchangerates.impl.ExchangeRateResultExtractor exchangeRateResultExtractor -> c
    java.util.Currency to -> b
    java.util.Currency from -> a
    de.koelle.christian.trickytripper.model.ExchangeRate assembleResult(java.util.Currency,java.util.Currency,java.lang.Double) -> a
    void deliverResult(java.lang.String) -> a
de.koelle.christian.trickytripper.exchangerates.impl.ExchangeRateImporterResultCallback -> de.koelle.christian.trickytripper.h.b.f:
    void deliverResult(de.koelle.christian.trickytripper.exchangerates.impl.ExchangeRateImporterResultContainer) -> a
de.koelle.christian.trickytripper.exchangerates.impl.ExchangeRateImporterResultCallback$ExchangeRateImporterResultState -> de.koelle.christian.trickytripper.h.b.f$a:
    de.koelle.christian.trickytripper.exchangerates.impl.ExchangeRateImporterResultCallback$ExchangeRateImporterResultState[] $VALUES -> e
    de.koelle.christian.trickytripper.exchangerates.impl.ExchangeRateImporterResultCallback$ExchangeRateImporterResultState TECHNICAL_ERROR -> d
    de.koelle.christian.trickytripper.exchangerates.impl.ExchangeRateImporterResultCallback$ExchangeRateImporterResultState NON_PARSABLE_JSON_RESULT -> c
    de.koelle.christian.trickytripper.exchangerates.impl.ExchangeRateImporterResultCallback$ExchangeRateImporterResultState CURRENCY_NOT_ALIVE -> b
    de.koelle.christian.trickytripper.exchangerates.impl.ExchangeRateImporterResultCallback$ExchangeRateImporterResultState SUCCESS -> a
de.koelle.christian.trickytripper.exchangerates.impl.ExchangeRateImporterResultContainer -> de.koelle.christian.trickytripper.h.b.g:
    java.util.Currency to -> c
    java.util.Currency from -> b
    de.koelle.christian.trickytripper.exchangerates.impl.ExchangeRateImporterResultCallback$ExchangeRateImporterResultState resultState -> d
    de.koelle.christian.trickytripper.model.ExchangeRate exchangeRateResult -> a
    java.lang.String stateComment -> e
    boolean requestWasSuccess() -> a
de.koelle.christian.trickytripper.exchangerates.impl.ExchangeRateResultExtractor -> de.koelle.christian.trickytripper.h.b.h:
    java.lang.Double extractValue(java.lang.String) -> a
de.koelle.christian.trickytripper.exchangerates.impl.ExchangeRateResultExtractorJsonGoogleImpl -> de.koelle.christian.trickytripper.h.b.i:
    java.util.regex.Pattern REGEX_NUMBER_PATTERN -> b
    java.util.regex.Pattern getPattern() -> a
de.koelle.christian.trickytripper.export.Exporter -> de.koelle.christian.trickytripper.i.a:
    java.util.List exportReport(de.koelle.christian.trickytripper.model.ExportSettings,java.util.List,de.koelle.christian.trickytripper.model.Trip,de.koelle.christian.trickytripper.decoupling.ResourceResolver,de.koelle.christian.trickytripper.decoupling.ActivityResolver,de.koelle.christian.trickytripper.factories.AmountFactory) -> a
de.koelle.christian.trickytripper.export.StreamSender -> de.koelle.christian.trickytripper.i.b:
    void sendStream(android.app.Activity,java.lang.String,java.lang.String,java.util.List,de.koelle.christian.trickytripper.model.ExportSettings$ExportOutputChannel) -> a
de.koelle.christian.trickytripper.export.impl.ExportCharResolver -> de.koelle.christian.trickytripper.i.c.a:
    java.lang.CharSequence getColumnDelimiter(de.koelle.christian.trickytripper.export.impl.StyleClass[]) -> a
    java.lang.CharSequence getTablePostfix() -> a
    java.lang.CharSequence translateValue(java.lang.String) -> a
    java.lang.CharSequence getRowEndDelimiter() -> b
    java.lang.CharSequence getRowStartDelimiter(de.koelle.christian.trickytripper.export.impl.StyleClass[]) -> b
    java.lang.CharSequence getTablePrefix() -> c
de.koelle.christian.trickytripper.export.impl.ExporterFileNameUtils -> de.koelle.christian.trickytripper.i.c.b:
    java.lang.StringBuilder clean(java.lang.String) -> a
    java.lang.StringBuilder filterSpecialChars(java.lang.StringBuilder) -> a
    java.lang.String getTimeStamp(java.util.Date,java.util.Locale) -> a
    java.lang.String getTimeStamp(java.util.Locale) -> a
    java.lang.StringBuilder toCamelCase(java.lang.StringBuilder,java.lang.String) -> a
de.koelle.christian.trickytripper.export.impl.ExporterImpl -> de.koelle.christian.trickytripper.i.c.c:
    de.koelle.christian.common.io.FileWriter fileWriter -> a
    java.lang.StringBuilder buildFileName(java.lang.StringBuilder,java.lang.StringBuilder,java.util.List,de.koelle.christian.trickytripper.decoupling.ResourceResolver) -> a
    void createAndWriteFiles(de.koelle.christian.trickytripper.model.ExportSettings,java.util.List,de.koelle.christian.trickytripper.model.Trip,de.koelle.christian.trickytripper.decoupling.ResourceResolver,de.koelle.christian.common.io.FileWriter,java.util.List,java.lang.StringBuilder,java.lang.StringBuilder,de.koelle.christian.trickytripper.export.impl.res.HtmlExportCharResolver,de.koelle.christian.trickytripper.export.impl.res.CsvExportCharResolver,de.koelle.christian.trickytripper.export.impl.res.TxtExportCharResolver,de.koelle.christian.trickytripper.factories.AmountFactory) -> a
    java.util.List exportReport(de.koelle.christian.trickytripper.model.ExportSettings,java.util.List,de.koelle.christian.trickytripper.model.Trip,de.koelle.christian.trickytripper.decoupling.ResourceResolver,de.koelle.christian.trickytripper.decoupling.ActivityResolver,de.koelle.christian.trickytripper.factories.AmountFactory) -> a
    java.lang.String[] getReportMetaInfo(java.util.List,de.koelle.christian.trickytripper.model.Trip,de.koelle.christian.trickytripper.decoupling.ResourceResolver) -> a
de.koelle.christian.trickytripper.export.impl.StreamSenderImpl -> de.koelle.christian.trickytripper.i.c.d:
    void sendStream(android.app.Activity,java.lang.String,java.lang.String,java.util.List,de.koelle.christian.trickytripper.model.ExportSettings$ExportOutputChannel) -> a
de.koelle.christian.trickytripper.export.impl.StyleClass -> de.koelle.christian.trickytripper.i.c.e:
    de.koelle.christian.trickytripper.export.impl.StyleClass BACKGROUND_SPENDER -> e
    de.koelle.christian.trickytripper.export.impl.StyleClass BACKGROUND_PAYER -> d
    de.koelle.christian.trickytripper.export.impl.StyleClass HEADING -> c
    java.lang.String className -> a
    de.koelle.christian.trickytripper.export.impl.StyleClass NUMERIC_VALUE -> b
    de.koelle.christian.trickytripper.export.impl.StyleClass[] $VALUES -> f
    java.lang.String getClassName() -> a
de.koelle.christian.trickytripper.export.impl.content.DebtTableExporter -> de.koelle.christian.trickytripper.i.c.f.a:
    de.koelle.christian.trickytripper.export.impl.ExportCharResolver charResolver -> a
    boolean isInReportScope(java.util.Collection,java.util.Map$Entry,java.util.Map$Entry) -> a
    java.lang.StringBuilder prepareContents(de.koelle.christian.trickytripper.model.Trip,de.koelle.christian.trickytripper.decoupling.ResourceResolver,java.util.Collection) -> a
    void setCharResolver(de.koelle.christian.trickytripper.export.impl.ExportCharResolver) -> a
de.koelle.christian.trickytripper.export.impl.content.PaymentTableExporter -> de.koelle.christian.trickytripper.i.c.f.b:
    de.koelle.christian.trickytripper.export.impl.ExportCharResolver charResolver -> a
    java.util.Comparator paymentComparator -> b
    java.util.Comparator createComparator(de.koelle.christian.trickytripper.decoupling.ResourceResolver) -> a
    java.util.List deriveRelevantPayments(de.koelle.christian.trickytripper.model.Trip,java.util.Collection) -> a
    void fillAndSortRelevantParticipants(java.util.List,java.util.List,java.util.List,java.util.Comparator) -> a
    de.koelle.christian.trickytripper.model.Amount getAmount(de.koelle.christian.trickytripper.model.Participant,java.util.Set) -> a
    java.lang.StringBuilder prepareContents(de.koelle.christian.trickytripper.model.Trip,de.koelle.christian.trickytripper.decoupling.ResourceResolver,java.util.Collection,de.koelle.christian.trickytripper.factories.AmountFactory) -> a
    void setCharResolver(de.koelle.christian.trickytripper.export.impl.ExportCharResolver) -> a
de.koelle.christian.trickytripper.export.impl.content.PaymentTableExporter$1 -> de.koelle.christian.trickytripper.i.c.f.b$a:
    java.text.Collator val$collator -> a
    int compare(de.koelle.christian.trickytripper.model.Participant,de.koelle.christian.trickytripper.model.Participant) -> a
de.koelle.christian.trickytripper.export.impl.content.SpendingTableExporter -> de.koelle.christian.trickytripper.i.c.f.c:
    de.koelle.christian.trickytripper.export.impl.ExportCharResolver charResolver -> a
    void addAllRelevantCategories(de.koelle.christian.trickytripper.strategies.SumReport,java.util.Set,java.util.List) -> a
    java.util.Set createSortedSet(de.koelle.christian.trickytripper.decoupling.ResourceResolver,java.text.Collator) -> a
    boolean isReportForAll(java.util.List) -> a
    boolean isSingleAndRelevant(de.koelle.christian.trickytripper.strategies.SumReport,java.util.List,de.koelle.christian.trickytripper.model.PaymentCategory) -> a
    java.lang.StringBuilder prepareContents(de.koelle.christian.trickytripper.model.Trip,de.koelle.christian.trickytripper.decoupling.ResourceResolver,java.util.List,boolean,boolean) -> a
    void setCharResolver(de.koelle.christian.trickytripper.export.impl.ExportCharResolver) -> a
de.koelle.christian.trickytripper.export.impl.content.SpendingTableExporter$1 -> de.koelle.christian.trickytripper.i.c.f.c$a:
    de.koelle.christian.trickytripper.decoupling.ResourceResolver val$resourceResolver -> b
    java.text.Collator val$collator -> a
    int compare(de.koelle.christian.trickytripper.model.PaymentCategory,de.koelle.christian.trickytripper.model.PaymentCategory) -> a
de.koelle.christian.trickytripper.export.impl.content.TableExporterUtils -> de.koelle.christian.trickytripper.i.c.f.d:
    java.lang.String getAmount(java.util.Locale,de.koelle.christian.trickytripper.model.Amount) -> a
    boolean partOf(de.koelle.christian.trickytripper.model.Participant,java.util.Set) -> a
    boolean partOf(java.util.Collection,java.util.Set) -> a
de.koelle.christian.trickytripper.export.impl.content.TransferTableExporter -> de.koelle.christian.trickytripper.i.c.f.e:
    de.koelle.christian.trickytripper.export.impl.ExportCharResolver charResolver -> a
    java.lang.StringBuilder prepareContents(de.koelle.christian.trickytripper.model.Trip,de.koelle.christian.trickytripper.decoupling.ResourceResolver,java.util.Collection) -> a
    void setCharResolver(de.koelle.christian.trickytripper.export.impl.ExportCharResolver) -> a
de.koelle.christian.trickytripper.export.impl.model.ReportAsciTable -> de.koelle.christian.trickytripper.i.c.g.a:
    java.util.List rows -> b
    java.util.List headings -> a
    void addHeading(java.lang.String) -> a
    void addRow(de.koelle.christian.trickytripper.export.impl.model.ReportAsciTableLayoutTableRow) -> a
    java.lang.String[] getHeadings() -> a
de.koelle.christian.trickytripper.export.impl.model.ReportAsciTableHeadingCallback -> de.koelle.christian.trickytripper.i.c.g.b:
    java.lang.String[] getHeadings() -> a
de.koelle.christian.trickytripper.export.impl.model.ReportAsciTableLayoutTableRow -> de.koelle.christian.trickytripper.i.c.g.c:
    java.util.List content -> b
    de.koelle.christian.trickytripper.export.impl.model.ReportAsciTableHeadingCallback callback -> a
    void addContent(java.lang.String) -> a
    java.lang.Object asciTableColumnContent(int) -> a
    java.lang.String[] asciTableColumnNames() -> a
    void setCallback(de.koelle.christian.trickytripper.export.impl.model.ReportAsciTableHeadingCallback) -> a
de.koelle.christian.trickytripper.export.impl.model.ReportAsciTableUtils -> de.koelle.christian.trickytripper.i.c.g.d:
    de.koelle.christian.trickytripper.export.impl.model.ReportAsciTable buildReportAsciiTable(java.lang.StringBuilder) -> a
de.koelle.christian.trickytripper.export.impl.model.ReportAsciTableWrapper -> de.koelle.christian.trickytripper.i.c.g.e:
    java.util.Map tables -> a
    java.lang.String reportMetaInfo -> b
    void addTable(java.lang.String,de.koelle.christian.trickytripper.export.impl.model.ReportAsciTable) -> a
    void appendUnderline(int,java.lang.StringBuilder) -> a
    java.lang.StringBuilder getOutput() -> a
    void setReportMetaInfo(java.lang.String) -> a
de.koelle.christian.trickytripper.export.impl.res.CsvExportCharResolver -> de.koelle.christian.trickytripper.i.c.h.a:
    java.lang.CharSequence getColumnDelimiter(de.koelle.christian.trickytripper.export.impl.StyleClass[]) -> a
    java.lang.CharSequence getTablePostfix() -> a
    java.lang.CharSequence translateValue(java.lang.String) -> a
    java.lang.CharSequence getRowEndDelimiter() -> b
    java.lang.CharSequence getRowStartDelimiter(de.koelle.christian.trickytripper.export.impl.StyleClass[]) -> b
    java.lang.CharSequence getTablePrefix() -> c
de.koelle.christian.trickytripper.export.impl.res.HtmlExportCharResolver -> de.koelle.christian.trickytripper.i.c.h.b:
    java.lang.String title -> a
    java.lang.String FILE_PREFIX -> c
    java.lang.String lang -> b
    java.lang.CharSequence getColumnDelimiter(de.koelle.christian.trickytripper.export.impl.StyleClass[]) -> a
    java.lang.CharSequence getTablePostfix() -> a
    java.lang.CharSequence translateValue(java.lang.String) -> a
    java.lang.StringBuilder writeReportMetaInfo(java.lang.String[]) -> a
    java.lang.CharSequence getRowEndDelimiter() -> b
    java.lang.CharSequence getRowStartDelimiter(de.koelle.christian.trickytripper.export.impl.StyleClass[]) -> b
    void setLang(java.lang.String) -> b
    java.lang.String appendStyles(de.koelle.christian.trickytripper.export.impl.StyleClass[]) -> c
    java.lang.CharSequence getTablePrefix() -> c
    void setTitle(java.lang.String) -> c
    java.lang.CharSequence getFilePostfix() -> d
    java.lang.CharSequence wrapInHeading(java.lang.String) -> d
    java.lang.CharSequence getFilePrefix() -> e
    java.lang.CharSequence wrapInSubHeading(java.lang.String) -> e
    java.lang.CharSequence getNewLine() -> f
de.koelle.christian.trickytripper.export.impl.res.TxtExportCharResolver -> de.koelle.christian.trickytripper.i.c.h.c:
    java.lang.CharSequence getColumnDelimiter(de.koelle.christian.trickytripper.export.impl.StyleClass[]) -> a
    java.lang.CharSequence getTablePostfix() -> a
    java.lang.CharSequence translateValue(java.lang.String) -> a
    java.lang.StringBuilder writeReportMetaInfo(java.lang.String[]) -> a
    java.lang.CharSequence getRowEndDelimiter() -> b
    java.lang.CharSequence getRowStartDelimiter(de.koelle.christian.trickytripper.export.impl.StyleClass[]) -> b
    java.lang.StringBuilder wrapInHeading(java.lang.String) -> b
    java.lang.CharSequence getTablePrefix() -> c
de.koelle.christian.trickytripper.factories.AmountFactory -> de.koelle.christian.trickytripper.j.a:
    java.util.Currency currency -> a
    de.koelle.christian.trickytripper.model.Amount createAmount() -> a
    de.koelle.christian.trickytripper.model.Amount createAmount(java.lang.Double) -> a
    void setCurrency(java.util.Currency) -> a
de.koelle.christian.trickytripper.factories.ModelFactory -> de.koelle.christian.trickytripper.j.b:
    de.koelle.christian.trickytripper.model.Payment createNewPayment(java.lang.String,de.koelle.christian.trickytripper.model.PaymentCategory) -> a
    de.koelle.christian.trickytripper.model.Trip createTrip(java.util.Currency,java.lang.String) -> a
de.koelle.christian.trickytripper.model.Amount -> de.koelle.christian.trickytripper.k.a:
    java.lang.Double value -> a
    java.util.Currency unit -> b
    void addAmount(de.koelle.christian.trickytripper.model.Amount) -> a
    void addValue(java.lang.Double) -> a
    de.koelle.christian.trickytripper.model.Amount doClone() -> a
    void setUnit(java.util.Currency) -> a
    java.util.Currency getUnit() -> b
    void setValue(java.lang.Double) -> b
    java.lang.Double getValue() -> c
de.koelle.christian.trickytripper.model.CurrenciesUsed -> de.koelle.christian.trickytripper.k.b:
    java.util.List currenciesUsedUnmatched -> b
    java.util.List currenciesUsedMatching -> a
    java.util.List currenciesInTrips -> e
    java.util.List currenciesInExchangeRatesUnmatched -> d
    java.util.List currenciesInExchangeRatesMatching -> c
    java.util.List getCurrenciesInExchangeRatesMatching() -> a
    void setCurrenciesInExchangeRatesMatching(java.util.List) -> a
    java.util.List getCurrenciesInExchangeRatesUnmatched() -> b
    void setCurrenciesInExchangeRatesUnmatched(java.util.List) -> b
    java.util.List getCurrenciesInTrips() -> c
    void setCurrenciesInTrips(java.util.List) -> c
    java.util.List getCurrenciesUsedMatching() -> d
    void setCurrenciesUsedMatching(java.util.List) -> d
    java.util.List getCurrenciesUsedUnmatched() -> e
    void setCurrenciesUsedUnmatched(java.util.List) -> e
    java.util.Currency getFirstImportant() -> f
de.koelle.christian.trickytripper.model.CurrencyWithName -> de.koelle.christian.trickytripper.k.c:
    java.util.Currency currency -> a
    java.lang.String longName -> b
    java.util.Currency getCurrency() -> a
de.koelle.christian.trickytripper.model.Debts -> de.koelle.christian.trickytripper.k.d:
    java.util.Map loanerToDebts -> a
    java.util.Map getLoanerToDebts() -> a
de.koelle.christian.trickytripper.model.ExchangeRate -> de.koelle.christian.trickytripper.k.e:
    java.util.Date updateDate -> f
    java.lang.Double exchangeRate -> d
    java.util.Currency currencyTo -> c
    boolean inversion -> i
    java.util.Currency currencyFrom -> b
    boolean isSelected -> j
    de.koelle.christian.trickytripper.model.ImportOrigin importOrigin -> h
    long id -> a
    java.lang.String description -> e
    java.util.Date creationDate -> g
    de.koelle.christian.trickytripper.model.ExchangeRate cloneToInversion() -> a
    boolean equalsFromImportPointOfView(de.koelle.christian.trickytripper.model.ExchangeRate) -> a
    void setCreationDate(java.util.Date) -> a
    void setCurrencyFrom(java.util.Currency) -> a
    void setDescription(java.lang.String) -> a
    void setExchangeRate(java.lang.Double) -> a
    void setId(long) -> a
    void setImportOrigin(de.koelle.christian.trickytripper.model.ImportOrigin) -> a
    void setInversion(boolean) -> a
    de.koelle.christian.trickytripper.model.ExchangeRate doClone() -> b
    boolean equalsStraight(de.koelle.christian.trickytripper.model.ExchangeRate) -> b
    void setCurrencyTo(java.util.Currency) -> b
    void setSelected(boolean) -> b
    void setUpdateDate(java.util.Date) -> b
    de.koelle.christian.trickytripper.model.ExchangeRate cloneInternal(boolean) -> c
    java.util.Date getCreationDate() -> c
    java.util.Currency getCurrencyFrom() -> d
    java.util.Currency getCurrencyTo() -> e
    java.lang.String getDescription() -> f
    java.lang.Double getExchangeRate() -> g
    long getId() -> h
    de.koelle.christian.trickytripper.model.ImportOrigin getImportOrigin() -> i
    java.lang.Double getInvertedExchangeRate() -> j
    java.lang.String getSortString() -> k
    java.util.Date getUpdateDate() -> l
    boolean isImported() -> m
    boolean isInversion() -> n
    boolean isNew() -> o
    boolean isSelected() -> p
de.koelle.christian.trickytripper.model.ExchangeRateSelection -> de.koelle.christian.trickytripper.k.f:
    de.koelle.christian.trickytripper.model.ExchangeRateSelection[] $VALUES -> f
    de.koelle.christian.trickytripper.model.ExchangeRateSelection NONE -> b
    de.koelle.christian.trickytripper.model.ExchangeRateSelection ALL -> c
    de.koelle.christian.trickytripper.model.ExchangeRateSelection ALL_IMPORTED -> d
    de.koelle.christian.trickytripper.model.ExchangeRateSelection ALL_CUSTOM -> e
    int resourceId -> a
    de.koelle.christian.trickytripper.model.ExchangeRateSelection getByResourceId(int) -> a
    int getResourceId() -> a
de.koelle.christian.trickytripper.model.ExportSettings -> de.koelle.christian.trickytripper.k.g:
    boolean showGlobalSumsOnIndividualSpendingReport -> i
    boolean formatHtml -> e
    boolean formatCsv -> f
    boolean formatTxt -> g
    boolean separateFilesForIndividuals -> h
    boolean exportPayments -> a
    boolean exportTransfers -> b
    boolean exportSpending -> c
    boolean exportDebts -> d
    de.koelle.christian.trickytripper.model.ExportSettings$ExportOutputChannel outputChannel -> j
    de.koelle.christian.trickytripper.model.ExportSettings$ExportOutputChannel getOutputChannel() -> a
    void setExportDebts(boolean) -> a
    void setOutputChannel(de.koelle.christian.trickytripper.model.ExportSettings$ExportOutputChannel) -> a
    boolean isExportDebts() -> b
    void setExportPayments(boolean) -> b
    boolean isExportPayments() -> c
    void setExportSpending(boolean) -> c
    boolean isExportSpending() -> d
    void setExportTransfers(boolean) -> d
    boolean isExportTransfers() -> e
    void setFormatCsv(boolean) -> e
    boolean isFormatCsv() -> f
    void setFormatHtml(boolean) -> f
    boolean isFormatHtml() -> g
    void setFormatTxt(boolean) -> g
    boolean isFormatTxt() -> h
    void setSeparateFilesForIndividuals(boolean) -> h
    boolean isSeparateFilesForIndividuals() -> i
    void setShowGlobalSumsOnIndividualSpendingReport(boolean) -> i
    boolean isShowGlobalSumsOnIndividualSpendingReport() -> j
de.koelle.christian.trickytripper.model.ExportSettings$ExportOutputChannel -> de.koelle.christian.trickytripper.k.g$a:
    de.koelle.christian.trickytripper.model.ExportSettings$ExportOutputChannel OPEN -> c
    de.koelle.christian.trickytripper.model.ExportSettings$ExportOutputChannel STREAM_SENDING -> d
    boolean supportsMultipleFiles -> b
    de.koelle.christian.trickytripper.model.ExportSettings$ExportOutputChannel[] $VALUES -> e
    int resourceId -> a
    int getResourceStringId() -> a
    de.koelle.christian.trickytripper.model.ExportSettings$ExportOutputChannel valueOfNull(java.lang.String) -> a
    java.util.List getAllValues() -> b
    boolean isSupportingMultipleFiles() -> c
de.koelle.christian.trickytripper.model.HierarchicalCurrencyList -> de.koelle.christian.trickytripper.k.h:
    java.util.List currenciesInExchangeRatesMatching -> b
    java.util.List currenciesUsedMatching -> a
    java.util.List currenciesElse -> f
    java.util.List currenciesInTrips -> e
    java.util.List currenciesInExchangeRatesUnmatched -> d
    java.util.List currenciesUsedUnmatched -> c
    java.util.List createListWithAllLists() -> a
    void setCurrenciesElse(java.util.List) -> a
    void setCurrenciesInExchangeRatesMatching(java.util.List) -> b
    void setCurrenciesInExchangeRatesUnmatched(java.util.List) -> c
    void setCurrenciesInTrips(java.util.List) -> d
    void setCurrenciesUsedMatching(java.util.List) -> e
    void setCurrenciesUsedUnmatched(java.util.List) -> f
de.koelle.christian.trickytripper.model.ImportOrigin -> de.koelle.christian.trickytripper.k.i:
    de.koelle.christian.trickytripper.model.ImportOrigin GOOGLE -> b
    de.koelle.christian.trickytripper.model.ImportOrigin[] $VALUES -> c
    de.koelle.christian.trickytripper.model.ImportOrigin NONE -> a
    de.koelle.christian.trickytripper.model.ImportOrigin getValueByOrdinal(int) -> a
de.koelle.christian.trickytripper.model.ImportSettings -> de.koelle.christian.trickytripper.k.j:
    boolean createNewRateOnValueChange -> a
    boolean isCreateNewRateOnValueChange() -> a
    void setCreateNewRateOnValueChange(boolean) -> a
de.koelle.christian.trickytripper.model.Participant -> de.koelle.christian.trickytripper.k.k:
    long id -> b
    java.lang.String name -> a
    java.lang.String externalId -> c
    boolean active -> d
    int compareTo(de.koelle.christian.trickytripper.model.Participant) -> a
    long getId() -> a
    void setActive(boolean) -> a
    void setId(long) -> a
    void setName(java.lang.String) -> a
    java.lang.String getName() -> b
    boolean isActive() -> c
de.koelle.christian.trickytripper.model.Payment -> de.koelle.christian.trickytripper.k.l:
    java.util.Date paymentDateTime -> c
    long id -> a
    java.util.Map payerToPayment -> e
    de.koelle.christian.trickytripper.model.PaymentCategory category -> b
    java.util.Map debitorToAmount -> f
    java.lang.String description -> d
    de.koelle.christian.trickytripper.model.PaymentCategory getCategory() -> a
    void getTotalAmount(de.koelle.christian.trickytripper.model.Amount) -> a
    void removeBlanksFromMap(java.util.Map) -> a
    void setCategory(de.koelle.christian.trickytripper.model.PaymentCategory) -> a
    void setDescription(java.lang.String) -> a
    void setId(long) -> a
    void setPaymentDateTime(java.util.Date) -> a
    java.lang.String getDescription() -> b
    long getId() -> c
    java.util.Map getParticipantToPayment() -> d
    java.util.Map getParticipantToSpending() -> e
    java.util.Date getPaymentDateTime() -> f
    boolean isMoneyTransfer() -> g
    void removeBlankEntries() -> h
de.koelle.christian.trickytripper.model.PaymentCategory -> de.koelle.christian.trickytripper.k.m:
    de.koelle.christian.trickytripper.model.PaymentCategory ENTRANCE_FEE -> k
    de.koelle.christian.trickytripper.model.PaymentCategory CULTURE -> j
    de.koelle.christian.trickytripper.model.PaymentCategory MONEY_TRANSFER -> l
    de.koelle.christian.trickytripper.model.PaymentCategory PUBLIC_TRANSPORT -> g
    de.koelle.christian.trickytripper.model.PaymentCategory GAS -> f
    de.koelle.christian.trickytripper.model.PaymentCategory RENTALS -> i
    de.koelle.christian.trickytripper.model.PaymentCategory OTHER -> h
    de.koelle.christian.trickytripper.model.PaymentCategory HOUSING -> c
    de.koelle.christian.trickytripper.model.PaymentCategory[] $VALUES -> m
    de.koelle.christian.trickytripper.model.PaymentCategory BEVERAGES -> e
    de.koelle.christian.trickytripper.model.PaymentCategory FOOD -> d
    int resourceId -> a
    boolean internal -> b
    int getResourceStringId() -> a
    de.koelle.christian.trickytripper.model.PaymentCategory getValueByOrdinal(int) -> a
    java.util.List getAllValues() -> b
    boolean isInternal() -> c
de.koelle.christian.trickytripper.model.PhoneContact -> de.koelle.christian.trickytripper.k.n:
    java.lang.String phone -> a
    java.lang.String email -> c
    java.lang.String displayName -> b
de.koelle.christian.trickytripper.model.ResourceLabelAwareEnumeration -> de.koelle.christian.trickytripper.k.o:
    int getResourceStringId() -> a
    java.util.List getAllValues() -> b
de.koelle.christian.trickytripper.model.Trip -> de.koelle.christian.trickytripper.k.p:
    de.koelle.christian.trickytripper.strategies.SumReport sumReport -> g
    java.util.List payments -> d
    java.util.Currency baseCurrency -> e
    java.util.List participant -> c
    long id -> a
    java.lang.String name -> b
    java.util.Map debts -> f
    java.util.Currency getBaseCurrency() -> a
    boolean partOfPayments(de.koelle.christian.trickytripper.model.Participant) -> a
    void setBaseCurrency(java.util.Currency) -> a
    void setDebts(java.util.Map) -> a
    void setId(long) -> a
    void setName(java.lang.String) -> a
    void setParticipant(java.util.List) -> a
    void setSumReport(de.koelle.christian.trickytripper.strategies.SumReport) -> a
    java.util.Map getDebts() -> b
    void setPayments(java.util.List) -> b
    long getId() -> c
    java.lang.String getName() -> d
    java.util.List getParticipant() -> e
    java.util.List getPayments() -> f
    de.koelle.christian.trickytripper.strategies.SumReport getSumReport() -> g
de.koelle.christian.trickytripper.model.TripSummary -> de.koelle.christian.trickytripper.k.q:
    java.util.Currency baseCurrency -> b
    java.lang.String name -> a
    long id -> c
    int compareTo(de.koelle.christian.trickytripper.model.TripSummary) -> a
    java.util.Currency getBaseCurrency() -> a
    void setBaseCurrency(java.util.Currency) -> a
    void setId(long) -> a
    void setName(java.lang.String) -> a
    long getId() -> b
    java.lang.String getName() -> c
de.koelle.christian.trickytripper.model.modelAdapter.CurrencyExpandableListAdapter -> de.koelle.christian.trickytripper.k.r.a:
    int[] mChildTo -> f
    android.view.LayoutInflater inflater -> d
    int[] mGroupTo -> h
    java.lang.Integer[] visualToModelMapping -> a
    java.util.List currencies -> c
    java.lang.String[] mChildFrom -> e
    java.lang.String[] mGroupFrom -> g
    int size -> b
    de.koelle.christian.trickytripper.model.modelAdapter.CurrencyGroupNamingCallback callback -> i
    void bindView(android.view.View,java.util.Map,java.lang.String[],int[]) -> a
    java.lang.Object getGroupValueByPosition(int) -> a
    de.koelle.christian.trickytripper.model.CurrencyWithName getRecordByVisualId(int,int) -> a
    android.view.View newChildView(boolean,android.view.ViewGroup) -> a
    java.lang.Object getChildValueByPosition(int,int) -> b
    java.util.List getListById(int) -> b
    android.view.View newGroupView(boolean,android.view.ViewGroup) -> b
    int getVisualToModelIndex(int) -> c
de.koelle.christian.trickytripper.model.modelAdapter.CurrencyGroupNamingCallback -> de.koelle.christian.trickytripper.k.r.b:
    java.lang.String getGroupDescription(int) -> a
de.koelle.christian.trickytripper.model.modelAdapter.ExchangeRateRowListAdapter -> de.koelle.christian.trickytripper.k.r.c:
    java.util.List rows -> a
    android.content.Context context -> b
    de.koelle.christian.trickytripper.ui.utils.ExchangeRateDescriptionUtils exchangeRateDescUtils -> d
    de.koelle.christian.trickytripper.model.modelAdapter.ExchangeRateRowListAdapter$DisplayMode mode -> c
de.koelle.christian.trickytripper.model.modelAdapter.ExchangeRateRowListAdapter$DisplayMode -> de.koelle.christian.trickytripper.k.r.c$a:
    de.koelle.christian.trickytripper.model.modelAdapter.ExchangeRateRowListAdapter$DisplayMode DOUBLE_WITH_SELECTION -> b
    de.koelle.christian.trickytripper.model.modelAdapter.ExchangeRateRowListAdapter$DisplayMode SINGLE -> a
    de.koelle.christian.trickytripper.model.modelAdapter.ExchangeRateRowListAdapter$DisplayMode[] $VALUES -> c
de.koelle.christian.trickytripper.model.modelAdapter.ParticipantRowListAdapter -> de.koelle.christian.trickytripper.k.r.d:
    java.util.List rows -> a
    android.content.Context context -> b
    boolean isInActive(de.koelle.christian.trickytripper.ui.model.ParticipantRow) -> a
de.koelle.christian.trickytripper.model.modelAdapter.PaymentInlineReport -> de.koelle.christian.trickytripper.k.r.e:
    java.lang.String total -> a
    java.lang.String debitedTo -> c
    java.lang.String payedBy -> b
    java.lang.String getDebitedTo() -> a
    void setDebitedTo(java.lang.String) -> a
    java.lang.String getPayedBy() -> b
    void setPayedBy(java.lang.String) -> b
    java.lang.String getTotal() -> c
    void setTotal(java.lang.String) -> c
de.koelle.christian.trickytripper.model.modelAdapter.PaymentRowListAdapter -> de.koelle.christian.trickytripper.k.r.f:
    java.util.List rows -> a
    android.content.Context context -> b
    de.koelle.christian.trickytripper.factories.AmountFactory amountFactory -> c
    java.util.Locale locale -> d
    java.text.Collator collator -> e
    de.koelle.christian.common.utils.DateUtils dateUtils -> f
    void appendUserAndAmount(java.util.Locale,java.lang.StringBuilder,java.util.Iterator,java.util.Map$Entry) -> a
    de.koelle.christian.trickytripper.model.modelAdapter.PaymentInlineReport createInlineReport(de.koelle.christian.trickytripper.model.Payment) -> a
de.koelle.christian.trickytripper.model.modelAdapter.TripSummarySymbolResolvingDelegator -> de.koelle.christian.trickytripper.k.r.g:
    android.content.res.Resources resources -> e
    de.koelle.christian.trickytripper.model.TripSummary nested -> d
    int compareTo(de.koelle.christian.trickytripper.model.TripSummary) -> a
    java.util.Currency getBaseCurrency() -> a
    void setBaseCurrency(java.util.Currency) -> a
    void setId(long) -> a
    void setName(java.lang.String) -> a
    long getId() -> b
    java.lang.String getName() -> c
de.koelle.christian.trickytripper.model.utils.PaymentComparator -> de.koelle.christian.trickytripper.k.s.a:
    int compare(de.koelle.christian.trickytripper.model.Payment,de.koelle.christian.trickytripper.model.Payment) -> a
de.koelle.christian.trickytripper.modelutils.AmountViewUtils -> de.koelle.christian.trickytripper.l.a:
    java.lang.String getAmountString(java.util.Locale,de.koelle.christian.trickytripper.model.Amount,boolean,boolean) -> a
    java.lang.String getAmountString(java.util.Locale,de.koelle.christian.trickytripper.model.Amount,boolean,boolean,boolean) -> a
    java.lang.String getAmountString(java.util.Locale,de.koelle.christian.trickytripper.model.Amount,boolean,boolean,boolean,boolean,boolean) -> a
    int getColor(android.content.Context,de.koelle.christian.trickytripper.model.Amount) -> a
    java.lang.String getDoubleString(java.util.Locale,java.lang.Double) -> a
    java.lang.String getDoubleString(java.util.Locale,java.lang.Double,boolean,boolean,boolean,boolean,java.lang.StringBuilder) -> a
de.koelle.christian.trickytripper.modelutils.CurrencyViewUtils -> de.koelle.christian.trickytripper.l.b:
    java.lang.String getCurrencyCodeInBrackets(java.util.Currency) -> a
de.koelle.christian.trickytripper.provider.TrickyTripperFileProvider -> de.koelle.christian.trickytripper.provider.TrickyTripperFileProvider:
    boolean isCacheDirNotFileDir -> b
    android.content.UriMatcher uriMatcher -> a
de.koelle.christian.trickytripper.strategies.SumAmountStrategy -> de.koelle.christian.trickytripper.m.a:
de.koelle.christian.trickytripper.strategies.SumReport -> de.koelle.christian.trickytripper.m.b:
    java.util.Map totalSpendingByCategoryCount -> m
    int totalSpendingCount -> k
    java.util.Map spendingByUser -> a
    java.util.Map spendingByUserByCategory -> b
    java.util.Map spendingByUserCount -> c
    java.util.Map spendingByUserByCategoryCount -> d
    java.util.Map balanceByUser -> i
    de.koelle.christian.trickytripper.model.Amount totalSpending -> j
    java.util.Map totalSpendingByCategory -> l
    java.util.Map paymentByUser -> e
    java.util.Map paymentByUserByCategory -> f
    java.util.Map paymentByUserCount -> g
    java.util.Map paymentByUserByCategoryCount -> h
    void addNewParticipant(de.koelle.christian.trickytripper.model.Participant,de.koelle.christian.trickytripper.model.Amount) -> a
    java.util.Map getBalanceByUser() -> a
    void removeParticipant(de.koelle.christian.trickytripper.model.Participant) -> a
    void setBalanceByUser(java.util.Map) -> a
    void setTotalSpending(de.koelle.christian.trickytripper.model.Amount) -> a
    void setTotalSpendingCount(int) -> a
    java.util.Map getPaymentByUser() -> b
    void setPaymentByUser(java.util.Map) -> b
    java.util.Map getPaymentByUserByCategory() -> c
    void setPaymentByUserByCategory(java.util.Map) -> c
    java.util.Map getPaymentByUserByCategoryCount() -> d
    void setPaymentByUserByCategoryCount(java.util.Map) -> d
    java.util.Map getPaymentByUserCount() -> e
    void setPaymentByUserCount(java.util.Map) -> e
    java.util.Map getSpendingByUser() -> f
    void setSpendingByUser(java.util.Map) -> f
    java.util.Map getSpendingByUserByCategory() -> g
    void setSpendingByUserByCategory(java.util.Map) -> g
    java.util.Map getSpendingByUserByCategoryCount() -> h
    void setSpendingByUserByCategoryCount(java.util.Map) -> h
    java.util.Map getSpendingByUserCount() -> i
    void setSpendingByUserCount(java.util.Map) -> i
    de.koelle.christian.trickytripper.model.Amount getTotalSpending() -> j
    void setTotalSpendingByCategory(java.util.Map) -> j
    java.util.Map getTotalSpendingByCategory() -> k
    void setTotalSpendingByCategoryCount(java.util.Map) -> k
    java.util.Map getTotalSpendingByCategoryCount() -> l
    int getTotalSpendingCount() -> m
de.koelle.christian.trickytripper.strategies.TripReportLogic -> de.koelle.christian.trickytripper.m.c:
    de.koelle.christian.trickytripper.factories.AmountFactory amountFactory -> a
    de.koelle.christian.trickytripper.strategies.impl.AbstractSumAmountStrategy paymentsStrategy -> c
    de.koelle.christian.trickytripper.strategies.impl.AbstractSumAmountStrategy spendingsStrategy -> b
    java.util.Map createDebts2(java.util.List,java.util.Map) -> a
    de.koelle.christian.trickytripper.strategies.SumReport createSumReport(java.util.List,java.util.List) -> a
    java.util.Map$Entry getMaxDeviation(boolean,java.util.Map) -> a
    java.util.Map initCategoryCountMap(java.util.List) -> a
    boolean isBalanceEven(java.util.Map) -> a
    void refreshDebts2(java.util.List,java.util.Map,java.util.Map) -> a
    void setAmountFactory(de.koelle.christian.trickytripper.factories.AmountFactory) -> a
    void fillResultWithBlankDebts(java.util.List,java.util.Map) -> b
    java.util.Map initCategoryMap(java.util.List) -> b
    void updateDebts2(java.util.List,java.util.Map,java.util.Map) -> b
de.koelle.christian.trickytripper.strategies.impl.AbstractSumAmountStrategy -> de.koelle.christian.trickytripper.m.d.a:
    de.koelle.christian.trickytripper.factories.AmountFactory amountFactory -> a
    void addAmount(de.koelle.christian.trickytripper.strategies.SumReport,java.util.List,java.util.List) -> a
    void doAddAmountParticipantResult(de.koelle.christian.trickytripper.strategies.SumReport,de.koelle.christian.trickytripper.model.Participant,de.koelle.christian.trickytripper.model.Payment) -> a
    void doAddAmountTotalResult(de.koelle.christian.trickytripper.strategies.SumReport,de.koelle.christian.trickytripper.model.Payment) -> a
    de.koelle.christian.trickytripper.factories.AmountFactory getAmountFactory() -> a
    void initParticipants(de.koelle.christian.trickytripper.strategies.SumReport,java.util.List,de.koelle.christian.trickytripper.factories.AmountFactory) -> a
    void setAmountFactory(de.koelle.christian.trickytripper.factories.AmountFactory) -> a
    void fillSumReport(de.koelle.christian.trickytripper.strategies.SumReport,java.util.List,java.util.List) -> b
de.koelle.christian.trickytripper.strategies.impl.PaymentSumAmountStrategy -> de.koelle.christian.trickytripper.m.d.b:
    void doAddAmountParticipantResult(de.koelle.christian.trickytripper.strategies.SumReport,de.koelle.christian.trickytripper.model.Participant,de.koelle.christian.trickytripper.model.Payment) -> a
    void doAddAmountTotalResult(de.koelle.christian.trickytripper.strategies.SumReport,de.koelle.christian.trickytripper.model.Payment) -> a
de.koelle.christian.trickytripper.strategies.impl.SpendingSumAmountStrategy -> de.koelle.christian.trickytripper.m.d.c:
    void doAddAmountParticipantResult(de.koelle.christian.trickytripper.strategies.SumReport,de.koelle.christian.trickytripper.model.Participant,de.koelle.christian.trickytripper.model.Payment) -> a
    void doAddAmountTotalResult(de.koelle.christian.trickytripper.strategies.SumReport,de.koelle.christian.trickytripper.model.Payment) -> a
de.koelle.christian.trickytripper.ui.model.DialogState -> de.koelle.christian.trickytripper.n.a.a:
    de.koelle.christian.trickytripper.model.Participant participantReporting -> a
    de.koelle.christian.trickytripper.model.Participant getParticipantReporting() -> a
    void setParticipantReporting(de.koelle.christian.trickytripper.model.Participant) -> a
de.koelle.christian.trickytripper.ui.model.ParticipantRow -> de.koelle.christian.trickytripper.n.a.b:
    de.koelle.christian.trickytripper.model.Amount sumPaid -> b
    de.koelle.christian.trickytripper.model.Amount sumSpent -> c
    de.koelle.christian.trickytripper.model.Participant participant -> a
    de.koelle.christian.trickytripper.model.Amount balance -> d
    de.koelle.christian.trickytripper.model.Amount getBalance() -> a
    void setAmountOfPaymentLines(int) -> a
    void setBalance(de.koelle.christian.trickytripper.model.Amount) -> a
    void setParticipant(de.koelle.christian.trickytripper.model.Participant) -> a
    de.koelle.christian.trickytripper.model.Participant getParticipant() -> b
    void setSumPaid(de.koelle.christian.trickytripper.model.Amount) -> b
    de.koelle.christian.trickytripper.model.Amount getSumPaid() -> c
    void setSumSpent(de.koelle.christian.trickytripper.model.Amount) -> c
    de.koelle.christian.trickytripper.model.Amount getSumSpent() -> d
de.koelle.christian.trickytripper.ui.model.RowObject -> de.koelle.christian.trickytripper.n.a.c:
    java.lang.Object rowObject -> b
    de.koelle.christian.trickytripper.ui.model.RowObjectCallback callback -> c
    java.lang.String stringToDisplay -> a
    java.lang.Object getRowObject() -> a
    void setRowObject(java.lang.Object) -> a
    void setStringToDisplay(java.lang.String) -> a
    java.lang.String getStringToDisplay() -> b
de.koelle.christian.trickytripper.ui.model.RowObjectCallback -> de.koelle.christian.trickytripper.n.a.d:
    java.lang.String getStringToDisplay(java.lang.Object) -> a
de.koelle.christian.trickytripper.ui.model.SpinnerObject -> de.koelle.christian.trickytripper.n.a.e:
    long id -> b
    java.lang.String stringToDisplay -> a
    long getId() -> a
    void setId(long) -> a
    void setStringToDisplay(java.lang.String) -> a
de.koelle.christian.trickytripper.ui.utils.ExchangeRateDescriptionUtils -> de.koelle.christian.trickytripper.n.b.a:
    de.koelle.christian.common.utils.DateUtils dateUtils -> b
    java.lang.String prefixForImportedRecords -> a
    android.content.res.Resources resources -> c
    java.lang.StringBuilder deriveDescription(de.koelle.christian.trickytripper.model.ExchangeRate) -> a
    java.util.Locale getLocale(android.content.res.Resources) -> a
    java.lang.StringBuilder deriveDescriptionWithRate(de.koelle.christian.trickytripper.model.ExchangeRate) -> b
de.koelle.christian.trickytripper.ui.utils.PrepareOptionsSupport -> de.koelle.christian.trickytripper.n.b.b:
    void reset(android.view.Menu) -> a
de.koelle.christian.trickytripper.ui.utils.UiAmountViewUtils -> de.koelle.christian.trickytripper.n.b.c:
    void writeAmountToEditText(de.koelle.christian.trickytripper.model.Amount,android.widget.EditText,java.util.Locale,de.koelle.christian.common.ui.filter.DecimalNumberInputUtil) -> a
    void writeDoubleToEditText(java.lang.Double,android.widget.EditText,java.util.Locale,de.koelle.christian.common.ui.filter.DecimalNumberInputUtil) -> a
    void writeValueToEditText(android.widget.EditText,de.koelle.christian.common.ui.filter.DecimalNumberInputUtil,java.lang.String) -> a
de.koelle.christian.trickytripper.ui.utils.UiViewUtils -> de.koelle.christian.trickytripper.n.b.d:
    java.util.Set getListSelection(android.widget.ListView,android.widget.ArrayAdapter) -> a
de.koelle.christian.trickytripper.ui.view.CheckableLinearLayout -> de.koelle.christian.trickytripper.ui.view.CheckableLinearLayout:
    de.koelle.christian.trickytripper.ui.view.CheckableSupport checkableSupport -> a
de.koelle.christian.trickytripper.ui.view.CheckableSupport -> de.koelle.christian.trickytripper.ui.view.a:
    android.widget.CheckBox checkbox -> a
    boolean isChecked() -> a
    void onFinishInflate(android.view.ViewGroup) -> a
    void setChecked(boolean) -> a
    android.widget.CheckBox findCheckbox(android.view.ViewGroup) -> b
    void toggle() -> b
okhttp3.Address -> c.a:
    okhttp3.Authenticator proxyAuthenticator -> d
    javax.net.ssl.HostnameVerifier hostnameVerifier -> j
    okhttp3.HttpUrl url -> a
    java.util.List connectionSpecs -> f
    javax.net.ssl.SSLSocketFactory sslSocketFactory -> i
    javax.net.SocketFactory socketFactory -> c
    java.util.List protocols -> e
    okhttp3.CertificatePinner certificatePinner -> k
    java.net.ProxySelector proxySelector -> g
    java.net.Proxy proxy -> h
    okhttp3.Dns dns -> b
    okhttp3.CertificatePinner certificatePinner() -> a
    java.util.List connectionSpecs() -> b
    okhttp3.Dns dns() -> c
    javax.net.ssl.HostnameVerifier hostnameVerifier() -> d
    java.util.List protocols() -> e
    java.net.Proxy proxy() -> f
    okhttp3.Authenticator proxyAuthenticator() -> g
    java.net.ProxySelector proxySelector() -> h
    javax.net.SocketFactory socketFactory() -> i
    javax.net.ssl.SSLSocketFactory sslSocketFactory() -> j
    okhttp3.HttpUrl url() -> k
okhttp3.Authenticator -> c.b:
    okhttp3.Authenticator NONE -> a
    okhttp3.Request authenticate(okhttp3.Route,okhttp3.Response) -> a
okhttp3.Authenticator$1 -> c.b$a:
    okhttp3.Request authenticate(okhttp3.Route,okhttp3.Response) -> a
okhttp3.Cache -> c.c:
    okhttp3.internal.InternalCache internalCache -> a
okhttp3.CacheControl -> c.d:
    boolean onlyIfCached -> j
    int maxStaleSeconds -> h
    boolean noTransform -> k
    int minFreshSeconds -> i
    java.lang.String headerValue -> l
    boolean isPrivate -> e
    boolean isPublic -> f
    int sMaxAgeSeconds -> d
    boolean mustRevalidate -> g
    boolean noCache -> a
    boolean noStore -> b
    int maxAgeSeconds -> c
    boolean isPrivate() -> a
    okhttp3.CacheControl parse(okhttp3.Headers) -> a
    boolean isPublic() -> b
    int maxAgeSeconds() -> c
    int maxStaleSeconds() -> d
    int minFreshSeconds() -> e
    boolean mustRevalidate() -> f
    boolean noCache() -> g
    boolean noStore() -> h
    boolean onlyIfCached() -> i
    java.lang.String headerValue() -> j
okhttp3.CacheControl$1 -> c.d$a:
okhttp3.CacheControl$Builder -> c.d$b:
    boolean onlyIfCached -> f
    int maxStaleSeconds -> d
    boolean noTransform -> g
    int minFreshSeconds -> e
    boolean noCache -> a
    boolean noStore -> b
    int maxAgeSeconds -> c
    okhttp3.CacheControl build() -> a
    okhttp3.CacheControl$Builder maxStale(int,java.util.concurrent.TimeUnit) -> a
    okhttp3.CacheControl$Builder noCache() -> b
    okhttp3.CacheControl$Builder onlyIfCached() -> c
okhttp3.Call -> c.e:
    void enqueue(okhttp3.Callback) -> a
okhttp3.Call$Factory -> c.e$a:
okhttp3.Callback -> c.f:
    void onFailure(okhttp3.Call,java.io.IOException) -> a
    void onResponse(okhttp3.Call,okhttp3.Response) -> a
okhttp3.CertificatePinner -> c.g:
    java.util.Map hostnameToPins -> a
    okhttp3.internal.tls.TrustRootIndex trustRootIndex -> b
    okhttp3.CertificatePinner DEFAULT -> c
    java.util.Map access$200(okhttp3.CertificatePinner) -> a
    void check(java.lang.String,java.util.List) -> a
    java.util.Set findMatchingPins(java.lang.String) -> a
    okhttp3.CertificatePinner$Builder newBuilder() -> a
    java.lang.String pin(java.security.cert.Certificate) -> a
    okio.ByteString sha1(java.security.cert.X509Certificate) -> a
    okhttp3.internal.tls.TrustRootIndex access$300(okhttp3.CertificatePinner) -> b
okhttp3.CertificatePinner$1 -> c.g$a:
okhttp3.CertificatePinner$Builder -> c.g$b:
    java.util.Map hostnameToPins -> a
    okhttp3.internal.tls.TrustRootIndex trustRootIndex -> b
    java.util.Map access$000(okhttp3.CertificatePinner$Builder) -> a
    okhttp3.CertificatePinner build() -> a
    okhttp3.CertificatePinner$Builder trustRootIndex(okhttp3.internal.tls.TrustRootIndex) -> a
    okhttp3.internal.tls.TrustRootIndex access$100(okhttp3.CertificatePinner$Builder) -> b
okhttp3.CipherSuite -> c.h:
    okhttp3.CipherSuite TLS_DH_anon_EXPORT_WITH_RC4_40_MD5 -> p
    okhttp3.CipherSuite TLS_RSA_WITH_AES_256_CBC_SHA256 -> O
    okhttp3.CipherSuite TLS_ECDH_RSA_WITH_AES_256_CBC_SHA -> s0
    okhttp3.CipherSuite TLS_KRB5_WITH_DES_CBC_MD5 -> x
    okhttp3.CipherSuite TLS_RSA_WITH_AES_256_GCM_SHA384 -> W
    okhttp3.CipherSuite TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA -> w0
    okhttp3.CipherSuite TLS_DHE_DSS_WITH_AES_128_CBC_SHA -> F
    okhttp3.CipherSuite TLS_ECDHE_ECDSA_WITH_RC4_128_SHA -> k0
    okhttp3.CipherSuite TLS_ECDH_RSA_WITH_NULL_SHA -> o0
    okhttp3.CipherSuite TLS_RSA_WITH_AES_128_CBC_SHA256 -> N
    okhttp3.CipherSuite TLS_DH_anon_WITH_AES_256_GCM_SHA384 -> c0
    java.lang.String javaName -> a
    okhttp3.CipherSuite TLS_RSA_EXPORT_WITH_DES40_CBC_SHA -> g
    okhttp3.CipherSuite TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA -> g0
    okhttp3.CipherSuite TLS_RSA_WITH_AES_128_GCM_SHA256 -> V
    okhttp3.CipherSuite TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA -> o
    okhttp3.CipherSuite TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384 -> S0
    okhttp3.CipherSuite TLS_KRB5_WITH_RC4_128_SHA -> w
    okhttp3.CipherSuite TLS_RSA_WITH_RC4_128_SHA -> f
    okhttp3.CipherSuite TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384 -> K0
    okhttp3.CipherSuite TLS_RSA_WITH_AES_128_CBC_SHA -> E
    okhttp3.CipherSuite[] $VALUES -> T0
    okhttp3.CipherSuite TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384 -> O0
    okhttp3.CipherSuite TLS_DHE_RSA_WITH_DES_CBC_SHA -> n
    okhttp3.CipherSuite TLS_ECDH_anon_WITH_AES_256_CBC_SHA -> C0
    okhttp3.CipherSuite TLS_RSA_WITH_NULL_SHA256 -> M
    okhttp3.CipherSuite TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384 -> G0
    okhttp3.CipherSuite TLS_KRB5_WITH_3DES_EDE_CBC_SHA -> v
    okhttp3.CipherSuite TLS_DH_anon_WITH_AES_256_CBC_SHA256 -> U
    okhttp3.CipherSuite TLS_ECDHE_RSA_WITH_NULL_SHA -> t0
    okhttp3.CipherSuite TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA -> x0
    okhttp3.CipherSuite TLS_KRB5_EXPORT_WITH_RC4_40_MD5 -> D
    okhttp3.CipherSuite TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA -> l0
    okhttp3.CipherSuite TLS_RSA_WITH_RC4_128_MD5 -> e
    okhttp3.CipherSuite TLS_ECDH_RSA_WITH_RC4_128_SHA -> p0
    okhttp3.CipherSuite TLS_DH_anon_WITH_AES_256_CBC_SHA -> L
    okhttp3.CipherSuite TLS_EMPTY_RENEGOTIATION_INFO_SCSV -> d0
    okhttp3.CipherSuite TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA -> m
    okhttp3.CipherSuite TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA -> h0
    okhttp3.CipherSuite TLS_DH_anon_WITH_AES_128_CBC_SHA256 -> T
    okhttp3.CipherSuite TLS_KRB5_WITH_DES_CBC_SHA -> u
    okhttp3.CipherSuite TLS_RSA_EXPORT_WITH_RC4_40_MD5 -> d
    okhttp3.CipherSuite TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5 -> C
    okhttp3.CipherSuite TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 -> L0
    okhttp3.CipherSuite TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 -> P0
    okhttp3.CipherSuite TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA -> l
    okhttp3.CipherSuite TLS_DHE_RSA_WITH_AES_256_CBC_SHA -> K
    okhttp3.CipherSuite TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 -> D0
    okhttp3.CipherSuite TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 -> H0
    okhttp3.CipherSuite TLS_DH_anon_WITH_3DES_EDE_CBC_SHA -> t
    okhttp3.CipherSuite TLS_DHE_RSA_WITH_AES_256_CBC_SHA256 -> S
    okhttp3.CipherSuite TLS_ECDHE_RSA_WITH_RC4_128_SHA -> u0
    okhttp3.CipherSuite TLS_ECDH_anon_WITH_NULL_SHA -> y0
    okhttp3.CipherSuite TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA -> m0
    okhttp3.CipherSuite TLS_RSA_WITH_NULL_SHA -> c
    okhttp3.CipherSuite TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA -> q0
    okhttp3.CipherSuite TLS_KRB5_EXPORT_WITH_RC4_40_SHA -> B
    okhttp3.CipherSuite TLS_ECDH_ECDSA_WITH_NULL_SHA -> e0
    okhttp3.CipherSuite TLS_DHE_DSS_WITH_DES_CBC_SHA -> k
    okhttp3.CipherSuite TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA -> i0
    okhttp3.CipherSuite TLS_DHE_DSS_WITH_AES_256_CBC_SHA -> J
    okhttp3.CipherSuite TLS_DH_anon_WITH_DES_CBC_SHA -> s
    okhttp3.CipherSuite TLS_DHE_DSS_WITH_AES_256_GCM_SHA384 -> a0
    okhttp3.CipherSuite TLS_DHE_DSS_WITH_AES_256_CBC_SHA256 -> R
    okhttp3.CipherSuite TLS_DHE_DSS_WITH_AES_128_GCM_SHA256 -> Z
    okhttp3.CipherSuite TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 -> M0
    okhttp3.CipherSuite TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 -> Q0
    okhttp3.CipherSuite TLS_RSA_WITH_NULL_MD5 -> b
    okhttp3.CipherSuite TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA -> A
    okhttp3.CipherSuite TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384 -> E0
    okhttp3.CipherSuite TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 -> I0
    okhttp3.CipherSuite TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA -> j
    okhttp3.CipherSuite TLS_RSA_WITH_AES_256_CBC_SHA -> I
    okhttp3.CipherSuite TLS_ECDH_anon_WITH_RC4_128_SHA -> z0
    okhttp3.CipherSuite TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA -> A0
    okhttp3.CipherSuite TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA -> r
    okhttp3.CipherSuite TLS_DHE_RSA_WITH_AES_128_CBC_SHA256 -> Q
    okhttp3.CipherSuite TLS_ECDH_RSA_WITH_AES_128_CBC_SHA -> r0
    okhttp3.CipherSuite TLS_KRB5_WITH_RC4_128_MD5 -> z
    okhttp3.CipherSuite TLS_DHE_RSA_WITH_AES_256_GCM_SHA384 -> Y
    okhttp3.CipherSuite TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA -> v0
    okhttp3.CipherSuite TLS_ECDHE_ECDSA_WITH_NULL_SHA -> j0
    okhttp3.CipherSuite TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA -> n0
    okhttp3.CipherSuite TLS_DH_anon_WITH_AES_128_GCM_SHA256 -> b0
    okhttp3.CipherSuite TLS_DH_anon_WITH_AES_128_CBC_SHA -> H
    okhttp3.CipherSuite TLS_RSA_WITH_3DES_EDE_CBC_SHA -> i
    okhttp3.CipherSuite TLS_ECDH_ECDSA_WITH_RC4_128_SHA -> f0
    okhttp3.CipherSuite TLS_DHE_DSS_WITH_AES_128_CBC_SHA256 -> P
    okhttp3.CipherSuite TLS_DH_anon_WITH_RC4_128_MD5 -> q
    okhttp3.CipherSuite TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256 -> R0
    okhttp3.CipherSuite TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 -> X
    okhttp3.CipherSuite TLS_KRB5_WITH_3DES_EDE_CBC_MD5 -> y
    okhttp3.CipherSuite TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256 -> J0
    okhttp3.CipherSuite TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256 -> N0
    okhttp3.CipherSuite TLS_ECDH_anon_WITH_AES_128_CBC_SHA -> B0
    okhttp3.CipherSuite TLS_RSA_WITH_DES_CBC_SHA -> h
    okhttp3.CipherSuite TLS_DHE_RSA_WITH_AES_128_CBC_SHA -> G
    okhttp3.CipherSuite TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256 -> F0
    okhttp3.CipherSuite forJavaName(java.lang.String) -> a
okhttp3.Connection -> c.i:
    okhttp3.Route route() -> a
okhttp3.ConnectionPool -> c.j:
    java.util.Deque connections -> d
    java.lang.Runnable cleanupRunnable -> c
    long keepAliveDurationNs -> b
    boolean cleanupRunning -> f
    java.util.concurrent.Executor executor -> g
    okhttp3.internal.RouteDatabase routeDatabase -> e
    int maxIdleConnections -> a
    long cleanup(long) -> a
    boolean connectionBecameIdle(okhttp3.internal.io.RealConnection) -> a
    okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation) -> a
    int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long) -> a
    void put(okhttp3.internal.io.RealConnection) -> b
okhttp3.ConnectionPool$1 -> c.j$a:
    okhttp3.ConnectionPool this$0 -> a
okhttp3.ConnectionSpec -> c.k:
    okhttp3.ConnectionSpec COMPATIBLE_TLS -> g
    okhttp3.ConnectionSpec CLEARTEXT -> h
    okhttp3.ConnectionSpec MODERN_TLS -> f
    okhttp3.CipherSuite[] APPROVED_CIPHER_SUITES -> e
    java.lang.String[] tlsVersions -> d
    boolean tls -> a
    boolean supportsTlsExtensions -> b
    java.lang.String[] cipherSuites -> c
    boolean access$400(okhttp3.ConnectionSpec) -> a
    void apply(javax.net.ssl.SSLSocket,boolean) -> a
    java.util.List cipherSuites() -> a
    boolean isCompatible(javax.net.ssl.SSLSocket) -> a
    boolean nonEmptyIntersection(java.lang.String[],java.lang.String[]) -> a
    java.lang.String[] access$500(okhttp3.ConnectionSpec) -> b
    boolean isTls() -> b
    okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean) -> b
    java.lang.String[] access$600(okhttp3.ConnectionSpec) -> c
    boolean supportsTlsExtensions() -> c
    boolean access$700(okhttp3.ConnectionSpec) -> d
    java.util.List tlsVersions() -> d
okhttp3.ConnectionSpec$1 -> c.k$a:
okhttp3.ConnectionSpec$Builder -> c.k$b:
    boolean tls -> a
    java.lang.String[] tlsVersions -> c
    java.lang.String[] cipherSuites -> b
    boolean supportsTlsExtensions -> d
    boolean access$000(okhttp3.ConnectionSpec$Builder) -> a
    okhttp3.ConnectionSpec build() -> a
    okhttp3.ConnectionSpec$Builder cipherSuites(java.lang.String[]) -> a
    okhttp3.ConnectionSpec$Builder cipherSuites(okhttp3.CipherSuite[]) -> a
    okhttp3.ConnectionSpec$Builder supportsTlsExtensions(boolean) -> a
    okhttp3.ConnectionSpec$Builder tlsVersions(okhttp3.TlsVersion[]) -> a
    java.lang.String[] access$100(okhttp3.ConnectionSpec$Builder) -> b
    okhttp3.ConnectionSpec$Builder tlsVersions(java.lang.String[]) -> b
    java.lang.String[] access$200(okhttp3.ConnectionSpec$Builder) -> c
    boolean access$300(okhttp3.ConnectionSpec$Builder) -> d
okhttp3.Cookie -> c.l:
    boolean hostOnly -> i
    long expiresAt -> c
    java.util.regex.Pattern MONTH_PATTERN -> k
    java.util.regex.Pattern YEAR_PATTERN -> j
    java.util.regex.Pattern TIME_PATTERN -> m
    java.util.regex.Pattern DAY_OF_MONTH_PATTERN -> l
    boolean secure -> f
    java.lang.String name -> a
    boolean httpOnly -> g
    boolean persistent -> h
    java.lang.String value -> b
    java.lang.String path -> e
    java.lang.String domain -> d
    int dateCharacterOffset(java.lang.String,int,int,boolean) -> a
    boolean domainMatch(okhttp3.HttpUrl,java.lang.String) -> a
    java.lang.String name() -> a
    okhttp3.Cookie parse(long,okhttp3.HttpUrl,java.lang.String) -> a
    java.util.List parseAll(okhttp3.HttpUrl,okhttp3.Headers) -> a
    java.lang.String parseDomain(java.lang.String) -> a
    long parseExpires(java.lang.String,int,int) -> a
    okhttp3.Cookie parse(okhttp3.HttpUrl,java.lang.String) -> b
    long parseMaxAge(java.lang.String) -> b
    java.lang.String value() -> b
okhttp3.CookieJar -> c.m:
    okhttp3.CookieJar NO_COOKIES -> a
    java.util.List loadForRequest(okhttp3.HttpUrl) -> a
    void saveFromResponse(okhttp3.HttpUrl,java.util.List) -> a
okhttp3.CookieJar$1 -> c.m$a:
    java.util.List loadForRequest(okhttp3.HttpUrl) -> a
    void saveFromResponse(okhttp3.HttpUrl,java.util.List) -> a
okhttp3.Dispatcher -> c.n:
    java.util.Deque readyAsyncCalls -> d
    java.util.Deque runningAsyncCalls -> e
    int maxRequestsPerHost -> b
    java.util.concurrent.ExecutorService executorService -> c
    int maxRequests -> a
    void enqueue(okhttp3.RealCall$AsyncCall) -> a
    java.util.concurrent.ExecutorService executorService() -> a
    void finished(okhttp3.RealCall$AsyncCall) -> b
    void promoteCalls() -> b
    int runningCallsForHost(okhttp3.RealCall$AsyncCall) -> c
okhttp3.Dns -> c.o:
    okhttp3.Dns SYSTEM -> a
    java.util.List lookup(java.lang.String) -> a
okhttp3.Dns$1 -> c.o$a:
    java.util.List lookup(java.lang.String) -> a
okhttp3.Handshake -> c.p:
    okhttp3.TlsVersion tlsVersion -> a
    okhttp3.CipherSuite cipherSuite -> b
    java.util.List localCertificates -> d
    java.util.List peerCertificates -> c
    okhttp3.CipherSuite cipherSuite() -> a
    okhttp3.Handshake get(javax.net.ssl.SSLSession) -> a
    java.util.List peerCertificates() -> b
okhttp3.Headers -> c.q:
    java.lang.String[] namesAndValues -> a
    java.lang.String get(java.lang.String) -> a
    java.lang.String get(java.lang.String[],java.lang.String) -> a
    java.lang.String name(int) -> a
    okhttp3.Headers$Builder newBuilder() -> a
    java.util.Date getDate(java.lang.String) -> b
    int size() -> b
    java.lang.String value(int) -> b
    java.util.List values(java.lang.String) -> c
okhttp3.Headers$1 -> c.q$a:
okhttp3.Headers$Builder -> c.q$b:
    java.util.List namesAndValues -> a
    java.util.List access$000(okhttp3.Headers$Builder) -> a
    okhttp3.Headers$Builder add(java.lang.String,java.lang.String) -> a
    okhttp3.Headers$Builder addLenient(java.lang.String) -> a
    okhttp3.Headers build() -> a
    okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String) -> b
    okhttp3.Headers$Builder removeAll(java.lang.String) -> b
    okhttp3.Headers$Builder set(java.lang.String,java.lang.String) -> c
    void checkNameAndValue(java.lang.String,java.lang.String) -> d
okhttp3.HttpUrl -> c.r:
    java.lang.String fragment -> g
    java.lang.String url -> h
    java.util.List queryNamesAndValues -> f
    char[] HEX_DIGITS -> i
    java.lang.String scheme -> a
    int port -> e
    java.lang.String password -> c
    java.lang.String username -> b
    java.lang.String host -> d
    java.lang.String access$100(okhttp3.HttpUrl) -> a
    java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean) -> a
    java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean) -> a
    void canonicalize(okio.Buffer,java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean) -> a
    int decodeHexDigit(char) -> a
    java.lang.String encodedFragment() -> a
    void namesAndValuesToQueryString(java.lang.StringBuilder,java.util.List) -> a
    okhttp3.HttpUrl$Builder newBuilder(java.lang.String) -> a
    java.lang.String percentDecode(java.lang.String,int,int,boolean) -> a
    java.lang.String percentDecode(java.lang.String,boolean) -> a
    java.util.List percentDecode(java.util.List,boolean) -> a
    void percentDecode(okio.Buffer,java.lang.String,int,int,boolean) -> a
    boolean percentEncoded(java.lang.String,int,int) -> a
    java.lang.String access$200(okhttp3.HttpUrl) -> b
    java.lang.String encodedPassword() -> b
    void pathSegmentsToString(java.lang.StringBuilder,java.util.List) -> b
    okhttp3.HttpUrl resolve(java.lang.String) -> b
    int access$300(okhttp3.HttpUrl) -> c
    int defaultPort(java.lang.String) -> c
    java.lang.String encodedPath() -> c
    java.util.List encodedPathSegments() -> d
    okhttp3.HttpUrl parse(java.lang.String) -> d
    java.lang.String encodedQuery() -> e
    java.util.List queryStringToNamesAndValues(java.lang.String) -> e
    java.lang.String encodedUsername() -> f
    java.lang.String host() -> g
    boolean isHttps() -> h
    okhttp3.HttpUrl$Builder newBuilder() -> i
    int port() -> j
    java.lang.String query() -> k
    java.lang.String scheme() -> l
    java.net.URI uri() -> m
okhttp3.HttpUrl$1 -> c.r$a:
    int[] $SwitchMap$okhttp3$HttpUrl$Builder$ParseResult -> a
okhttp3.HttpUrl$Builder -> c.r$b:
    java.lang.String encodedFragment -> h
    java.util.List encodedPathSegments -> f
    java.lang.String scheme -> a
    int port -> e
    java.util.List encodedQueryNamesAndValues -> g
    java.lang.String encodedPassword -> c
    java.lang.String encodedUsername -> b
    java.lang.String host -> d
    okhttp3.HttpUrl build() -> a
    java.lang.String canonicalizeHost(java.lang.String,int,int) -> a
    boolean decodeIpv4Suffix(java.lang.String,int,int,byte[],int) -> a
    okhttp3.HttpUrl$Builder encodedQuery(java.lang.String) -> a
    java.lang.String inet6AddressToAscii(byte[]) -> a
    okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String) -> a
    okhttp3.HttpUrl$Builder port(int) -> a
    void push(java.lang.String,int,int,boolean,boolean) -> a
    java.net.InetAddress decodeIpv6(java.lang.String,int,int) -> b
    int effectivePort() -> b
    okhttp3.HttpUrl$Builder host(java.lang.String) -> b
    int parsePort(java.lang.String,int,int) -> c
    okhttp3.HttpUrl$Builder reencodeForUri() -> c
    okhttp3.HttpUrl$Builder scheme(java.lang.String) -> c
    boolean isDot(java.lang.String) -> d
    void pop() -> d
    int portColonOffset(java.lang.String,int,int) -> d
    boolean isDotDot(java.lang.String) -> e
    void resolvePath(java.lang.String,int,int) -> e
    int schemeDelimiterOffset(java.lang.String,int,int) -> f
    int slashCount(java.lang.String,int,int) -> g
okhttp3.HttpUrl$Builder$ParseResult -> c.r$b$a:
    okhttp3.HttpUrl$Builder$ParseResult INVALID_PORT -> d
    okhttp3.HttpUrl$Builder$ParseResult INVALID_HOST -> e
    okhttp3.HttpUrl$Builder$ParseResult[] $VALUES -> f
    okhttp3.HttpUrl$Builder$ParseResult SUCCESS -> a
    okhttp3.HttpUrl$Builder$ParseResult MISSING_SCHEME -> b
    okhttp3.HttpUrl$Builder$ParseResult UNSUPPORTED_SCHEME -> c
okhttp3.Interceptor -> c.s:
    okhttp3.Response intercept(okhttp3.Interceptor$Chain) -> a
okhttp3.Interceptor$Chain -> c.s$a:
    okhttp3.Response proceed(okhttp3.Request) -> a
okhttp3.MediaType -> c.t:
    java.util.regex.Pattern TYPE_SUBTYPE -> c
    java.util.regex.Pattern PARAMETER -> d
    java.lang.String mediaType -> a
    java.lang.String charset -> b
    java.nio.charset.Charset charset(java.nio.charset.Charset) -> a
    okhttp3.MediaType parse(java.lang.String) -> a
okhttp3.OkHttpClient -> c.u:
    okhttp3.ConnectionPool connectionPool -> r
    java.util.List DEFAULT_PROTOCOLS -> z
    boolean followRedirects -> u
    java.net.ProxySelector proxySelector -> g
    okhttp3.Dispatcher dispatcher -> a
    okhttp3.Dns dns -> s
    java.util.List DEFAULT_CONNECTION_SPECS -> A
    okhttp3.internal.tls.TrustRootIndex trustRootIndex -> m
    okhttp3.Authenticator authenticator -> q
    javax.net.ssl.SSLSocketFactory sslSocketFactory -> l
    java.util.List networkInterceptors -> f
    java.util.List connectionSpecs -> d
    int writeTimeout -> y
    okhttp3.CertificatePinner certificatePinner -> o
    int connectTimeout -> w
    okhttp3.internal.InternalCache internalCache -> j
    boolean retryOnConnectionFailure -> v
    java.net.Proxy proxy -> b
    javax.net.ssl.HostnameVerifier hostnameVerifier -> n
    boolean followSslRedirects -> t
    java.util.List interceptors -> e
    okhttp3.Authenticator proxyAuthenticator -> p
    int readTimeout -> x
    java.util.List protocols -> c
    okhttp3.CookieJar cookieJar -> h
    okhttp3.Cache cache -> i
    javax.net.SocketFactory socketFactory -> k
    okhttp3.Authenticator authenticator() -> a
    okhttp3.Call newCall(okhttp3.Request) -> a
    okhttp3.CertificatePinner certificatePinner() -> b
    int connectTimeoutMillis() -> c
    okhttp3.ConnectionPool connectionPool() -> d
    java.util.List connectionSpecs() -> e
    okhttp3.CookieJar cookieJar() -> f
    okhttp3.Dispatcher dispatcher() -> g
    okhttp3.Dns dns() -> h
    boolean followRedirects() -> i
    boolean followSslRedirects() -> j
    javax.net.ssl.HostnameVerifier hostnameVerifier() -> k
    java.util.List interceptors() -> l
    okhttp3.internal.InternalCache internalCache() -> m
    java.util.List networkInterceptors() -> n
    java.util.List protocols() -> o
    java.net.Proxy proxy() -> p
    okhttp3.Authenticator proxyAuthenticator() -> q
    java.net.ProxySelector proxySelector() -> r
    int readTimeoutMillis() -> s
    boolean retryOnConnectionFailure() -> t
    javax.net.SocketFactory socketFactory() -> u
    javax.net.ssl.SSLSocketFactory sslSocketFactory() -> v
    int writeTimeoutMillis() -> w
    java.util.List access$000() -> x
    java.util.List access$100() -> y
okhttp3.OkHttpClient$1 -> c.u$a:
    void addLenient(okhttp3.Headers$Builder,java.lang.String) -> a
    void apply(okhttp3.ConnectionSpec,javax.net.ssl.SSLSocket,boolean) -> a
    boolean connectionBecameIdle(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection) -> a
    okhttp3.internal.io.RealConnection get(okhttp3.ConnectionPool,okhttp3.Address,okhttp3.internal.http.StreamAllocation) -> a
    okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient) -> a
    okhttp3.internal.RouteDatabase routeDatabase(okhttp3.ConnectionPool) -> a
    void put(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection) -> b
okhttp3.OkHttpClient$Builder -> c.u$b:
    okhttp3.ConnectionPool connectionPool -> r
    boolean followRedirects -> u
    java.net.ProxySelector proxySelector -> g
    okhttp3.Dispatcher dispatcher -> a
    okhttp3.Dns dns -> s
    okhttp3.internal.tls.TrustRootIndex trustRootIndex -> m
    okhttp3.Authenticator authenticator -> q
    javax.net.ssl.SSLSocketFactory sslSocketFactory -> l
    java.util.List networkInterceptors -> f
    java.util.List connectionSpecs -> d
    int writeTimeout -> y
    okhttp3.CertificatePinner certificatePinner -> o
    int connectTimeout -> w
    okhttp3.internal.InternalCache internalCache -> j
    boolean retryOnConnectionFailure -> v
    java.net.Proxy proxy -> b
    javax.net.ssl.HostnameVerifier hostnameVerifier -> n
    boolean followSslRedirects -> t
    java.util.List interceptors -> e
    okhttp3.Authenticator proxyAuthenticator -> p
    int readTimeout -> x
    java.util.List protocols -> c
    okhttp3.CookieJar cookieJar -> h
    okhttp3.Cache cache -> i
    javax.net.SocketFactory socketFactory -> k
okhttp3.Protocol -> c.v:
    okhttp3.Protocol[] $VALUES -> f
    okhttp3.Protocol HTTP_1_0 -> b
    okhttp3.Protocol HTTP_1_1 -> c
    java.lang.String protocol -> a
    okhttp3.Protocol SPDY_3 -> d
    okhttp3.Protocol HTTP_2 -> e
    okhttp3.Protocol get(java.lang.String) -> a
okhttp3.RealCall -> c.w:
    okhttp3.OkHttpClient client -> a
    boolean executed -> b
    boolean canceled -> c
    okhttp3.Request originalRequest -> d
    okhttp3.internal.http.HttpEngine engine -> e
    okhttp3.Response access$100(okhttp3.RealCall,boolean) -> a
    java.lang.String access$200(okhttp3.RealCall) -> a
    void enqueue(okhttp3.Callback) -> a
    void enqueue(okhttp3.Callback,boolean) -> a
    okhttp3.Response getResponse(okhttp3.Request,boolean) -> a
    okhttp3.Response getResponseWithInterceptorChain(boolean) -> a
    java.lang.String toLoggableString() -> a
    okhttp3.OkHttpClient access$300(okhttp3.RealCall) -> b
okhttp3.RealCall$1 -> c.w$a:
okhttp3.RealCall$ApplicationInterceptorChain -> c.w$b:
    boolean forWebSocket -> b
    okhttp3.RealCall this$0 -> c
    int index -> a
    okhttp3.Response proceed(okhttp3.Request) -> a
okhttp3.RealCall$AsyncCall -> c.w$c:
    okhttp3.RealCall this$0 -> d
    okhttp3.Callback responseCallback -> b
    boolean forWebSocket -> c
    void execute() -> b
    java.lang.String host() -> c
okhttp3.Request -> c.x:
    okhttp3.HttpUrl url -> a
    okhttp3.RequestBody body -> d
    okhttp3.CacheControl cacheControl -> f
    java.lang.Object tag -> e
    java.lang.String method -> b
    okhttp3.Headers headers -> c
    okhttp3.Headers access$1000(okhttp3.Request) -> a
    okhttp3.RequestBody body() -> a
    java.lang.String header(java.lang.String) -> a
    okhttp3.HttpUrl access$600(okhttp3.Request) -> b
    okhttp3.CacheControl cacheControl() -> b
    java.lang.String access$700(okhttp3.Request) -> c
    okhttp3.Headers headers() -> c
    okhttp3.RequestBody access$800(okhttp3.Request) -> d
    boolean isHttps() -> d
    java.lang.Object access$900(okhttp3.Request) -> e
    java.lang.String method() -> e
    okhttp3.Request$Builder newBuilder() -> f
    okhttp3.HttpUrl url() -> g
okhttp3.Request$1 -> c.x$a:
okhttp3.Request$Builder -> c.x$b:
    okhttp3.HttpUrl url -> a
    okhttp3.RequestBody body -> d
    java.lang.Object tag -> e
    okhttp3.Headers$Builder headers -> c
    java.lang.String method -> b
    okhttp3.HttpUrl access$000(okhttp3.Request$Builder) -> a
    okhttp3.Request build() -> a
    okhttp3.Request$Builder header(java.lang.String,java.lang.String) -> a
    okhttp3.Request$Builder method(java.lang.String,okhttp3.RequestBody) -> a
    okhttp3.Request$Builder removeHeader(java.lang.String) -> a
    okhttp3.Request$Builder url(okhttp3.HttpUrl) -> a
    java.lang.String access$100(okhttp3.Request$Builder) -> b
    okhttp3.Request$Builder url(java.lang.String) -> b
    okhttp3.Headers$Builder access$200(okhttp3.Request$Builder) -> c
    okhttp3.RequestBody access$300(okhttp3.Request$Builder) -> d
    java.lang.Object access$400(okhttp3.Request$Builder) -> e
okhttp3.RequestBody -> c.y:
    long contentLength() -> a
    void writeTo(okio.BufferedSink) -> a
    okhttp3.MediaType contentType() -> b
okhttp3.Response -> c.z:
    okhttp3.Handshake handshake -> e
    okhttp3.Response networkResponse -> h
    okhttp3.ResponseBody body -> g
    okhttp3.Protocol protocol -> b
    okhttp3.Headers headers -> f
    okhttp3.Request request -> a
    int code -> c
    okhttp3.Response cacheResponse -> i
    okhttp3.CacheControl cacheControl -> k
    java.lang.String message -> d
    okhttp3.Response priorResponse -> j
    okhttp3.Request access$1100(okhttp3.Response) -> a
    okhttp3.ResponseBody body() -> a
    java.lang.String header(java.lang.String) -> a
    java.lang.String header(java.lang.String,java.lang.String) -> a
    okhttp3.Protocol access$1200(okhttp3.Response) -> b
    okhttp3.CacheControl cacheControl() -> b
    int access$1300(okhttp3.Response) -> c
    int code() -> c
    java.lang.String access$1400(okhttp3.Response) -> d
    okhttp3.Handshake handshake() -> d
    okhttp3.Handshake access$1500(okhttp3.Response) -> e
    okhttp3.Headers headers() -> e
    okhttp3.Headers access$1600(okhttp3.Response) -> f
    okhttp3.Response$Builder newBuilder() -> f
    okhttp3.ResponseBody access$1700(okhttp3.Response) -> g
    okhttp3.Request request() -> g
    okhttp3.Response access$1800(okhttp3.Response) -> h
    okhttp3.Response access$1900(okhttp3.Response) -> i
    okhttp3.Response access$2000(okhttp3.Response) -> j
okhttp3.Response$1 -> c.z$a:
okhttp3.Response$Builder -> c.z$b:
    okhttp3.Handshake handshake -> e
    okhttp3.Response networkResponse -> h
    okhttp3.ResponseBody body -> g
    okhttp3.Protocol protocol -> b
    okhttp3.Request request -> a
    int code -> c
    okhttp3.Response cacheResponse -> i
    java.lang.String message -> d
    okhttp3.Headers$Builder headers -> f
    okhttp3.Response priorResponse -> j
    okhttp3.Request access$000(okhttp3.Response$Builder) -> a
    okhttp3.Response$Builder addHeader(java.lang.String,java.lang.String) -> a
    okhttp3.Response$Builder body(okhttp3.ResponseBody) -> a
    okhttp3.Response build() -> a
    okhttp3.Response$Builder cacheResponse(okhttp3.Response) -> a
    void checkSupportResponse(java.lang.String,okhttp3.Response) -> a
    okhttp3.Response$Builder code(int) -> a
    okhttp3.Response$Builder handshake(okhttp3.Handshake) -> a
    okhttp3.Response$Builder headers(okhttp3.Headers) -> a
    okhttp3.Response$Builder message(java.lang.String) -> a
    okhttp3.Response$Builder protocol(okhttp3.Protocol) -> a
    okhttp3.Response$Builder request(okhttp3.Request) -> a
    okhttp3.Protocol access$100(okhttp3.Response$Builder) -> b
    okhttp3.Response$Builder header(java.lang.String,java.lang.String) -> b
    okhttp3.Response$Builder networkResponse(okhttp3.Response) -> b
    int access$200(okhttp3.Response$Builder) -> c
    okhttp3.Response$Builder priorResponse(okhttp3.Response) -> c
    java.lang.String access$300(okhttp3.Response$Builder) -> d
    void checkPriorResponse(okhttp3.Response) -> d
    okhttp3.Handshake access$400(okhttp3.Response$Builder) -> e
    okhttp3.Headers$Builder access$500(okhttp3.Response$Builder) -> f
    okhttp3.ResponseBody access$600(okhttp3.Response$Builder) -> g
    okhttp3.Response access$700(okhttp3.Response$Builder) -> h
    okhttp3.Response access$800(okhttp3.Response$Builder) -> i
    okhttp3.Response access$900(okhttp3.Response$Builder) -> j
okhttp3.ResponseBody -> c.a0:
    byte[] bytes() -> n
    long contentLength() -> o
    okhttp3.MediaType contentType() -> p
    okio.BufferedSource source() -> q
    java.lang.String string() -> r
    java.nio.charset.Charset charset() -> s
okhttp3.Route -> c.b0:
    java.net.InetSocketAddress inetSocketAddress -> c
    java.net.Proxy proxy -> b
    okhttp3.Address address -> a
    okhttp3.Address address() -> a
    java.net.Proxy proxy() -> b
    boolean requiresTunnel() -> c
    java.net.InetSocketAddress socketAddress() -> d
okhttp3.TlsVersion -> c.c0:
    okhttp3.TlsVersion TLS_1_2 -> b
    okhttp3.TlsVersion TLS_1_0 -> d
    okhttp3.TlsVersion TLS_1_1 -> c
    java.lang.String javaName -> a
    okhttp3.TlsVersion SSL_3_0 -> e
    okhttp3.TlsVersion[] $VALUES -> f
    okhttp3.TlsVersion forJavaName(java.lang.String) -> a
okhttp3.internal.ConnectionSpecSelector -> c.d0.a:
    java.util.List connectionSpecs -> a
    int nextModeIndex -> b
    boolean isFallbackPossible -> c
    boolean isFallback -> d
    okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket) -> a
    boolean connectionFailed(java.io.IOException) -> a
    boolean isFallbackPossible(javax.net.ssl.SSLSocket) -> b
okhttp3.internal.Internal -> c.d0.b:
    okhttp3.internal.Internal instance -> b
    java.util.logging.Logger logger -> a
    void addLenient(okhttp3.Headers$Builder,java.lang.String) -> a
    void apply(okhttp3.ConnectionSpec,javax.net.ssl.SSLSocket,boolean) -> a
    boolean connectionBecameIdle(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection) -> a
    okhttp3.internal.io.RealConnection get(okhttp3.ConnectionPool,okhttp3.Address,okhttp3.internal.http.StreamAllocation) -> a
    okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient) -> a
    okhttp3.internal.RouteDatabase routeDatabase(okhttp3.ConnectionPool) -> a
    void put(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection) -> b
okhttp3.internal.InternalCache -> c.d0.c:
    okhttp3.Response get(okhttp3.Request) -> a
    okhttp3.internal.http.CacheRequest put(okhttp3.Response) -> a
    void trackConditionalCacheHit() -> a
    void trackResponse(okhttp3.internal.http.CacheStrategy) -> a
    void update(okhttp3.Response,okhttp3.Response) -> a
    void remove(okhttp3.Request) -> b
okhttp3.internal.NamedRunnable -> c.d0.d:
    java.lang.String name -> a
    void execute() -> b
okhttp3.internal.OptionalMethod -> c.d0.e:
    java.lang.Class[] methodParams -> c
    java.lang.Class returnType -> a
    java.lang.String methodName -> b
    java.lang.reflect.Method getMethod(java.lang.Class) -> a
    java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[]) -> a
    java.lang.Object invoke(java.lang.Object,java.lang.Object[]) -> a
    boolean isSupported(java.lang.Object) -> a
    java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[]) -> b
    java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[]) -> c
    java.lang.Object invokeWithoutCheckedException(java.lang.Object,java.lang.Object[]) -> d
okhttp3.internal.Platform -> c.d0.f:
    okhttp3.internal.Platform PLATFORM -> a
    void afterHandshake(javax.net.ssl.SSLSocket) -> a
    byte[] concatLengthPrefixed(java.util.List) -> a
    void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List) -> a
    void connectSocket(java.net.Socket,java.net.InetSocketAddress,int) -> a
    java.lang.String getPrefix() -> a
    java.lang.Object readFieldOrNull(java.lang.Object,java.lang.Class,java.lang.String) -> a
    javax.net.ssl.X509TrustManager trustManager(javax.net.ssl.SSLSocketFactory) -> a
    okhttp3.internal.tls.TrustRootIndex trustRootIndex(javax.net.ssl.X509TrustManager) -> a
    okhttp3.internal.Platform findPlatform() -> b
    java.lang.String getSelectedProtocol(javax.net.ssl.SSLSocket) -> b
    okhttp3.internal.Platform get() -> c
okhttp3.internal.Platform$Android -> c.d0.f$a:
    okhttp3.internal.OptionalMethod setUseSessionTickets -> c
    okhttp3.internal.OptionalMethod setAlpnProtocols -> f
    okhttp3.internal.OptionalMethod getAlpnSelectedProtocol -> e
    okhttp3.internal.OptionalMethod setHostname -> d
    java.lang.Class sslParametersClass -> b
    void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List) -> a
    void connectSocket(java.net.Socket,java.net.InetSocketAddress,int) -> a
    javax.net.ssl.X509TrustManager trustManager(javax.net.ssl.SSLSocketFactory) -> a
    okhttp3.internal.tls.TrustRootIndex trustRootIndex(javax.net.ssl.X509TrustManager) -> a
    java.lang.String getSelectedProtocol(javax.net.ssl.SSLSocket) -> b
okhttp3.internal.Platform$JdkWithJettyBootPlatform -> c.d0.f$b:
    java.lang.Class serverProviderClass -> f
    java.lang.Class clientProviderClass -> e
    java.lang.reflect.Method getMethod -> c
    java.lang.reflect.Method removeMethod -> d
    java.lang.reflect.Method putMethod -> b
    void afterHandshake(javax.net.ssl.SSLSocket) -> a
    void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List) -> a
    java.lang.String getSelectedProtocol(javax.net.ssl.SSLSocket) -> b
okhttp3.internal.Platform$JettyNegoProvider -> c.d0.f$c:
    java.util.List protocols -> a
    java.lang.String selected -> c
    boolean unsupported -> b
    boolean access$000(okhttp3.internal.Platform$JettyNegoProvider) -> a
    java.lang.String access$100(okhttp3.internal.Platform$JettyNegoProvider) -> b
okhttp3.internal.RouteDatabase -> c.d0.g:
    java.util.Set failedRoutes -> a
    void connected(okhttp3.Route) -> a
    void failed(okhttp3.Route) -> b
    boolean shouldPostpone(okhttp3.Route) -> c
okhttp3.internal.Util -> c.d0.h:
    java.nio.charset.Charset UTF_8 -> c
    byte[] EMPTY_BYTE_ARRAY -> a
    java.util.regex.Pattern VERIFY_AS_IP_ADDRESS -> e
    java.util.TimeZone UTC -> d
    java.lang.String[] EMPTY_STRING_ARRAY -> b
    void checkOffsetAndCount(long,long,long) -> a
    void closeAll(java.io.Closeable,java.io.Closeable) -> a
    void closeQuietly(java.io.Closeable) -> a
    void closeQuietly(java.net.Socket) -> a
    java.lang.String[] concat(java.lang.String[],java.lang.String) -> a
    boolean containsInvalidHostnameAsciiCodes(java.lang.String) -> a
    int delimiterOffset(java.lang.String,int,int,char) -> a
    int delimiterOffset(java.lang.String,int,int,java.lang.String) -> a
    boolean discard(okio.Source,int,java.util.concurrent.TimeUnit) -> a
    boolean equal(java.lang.Object,java.lang.Object) -> a
    java.lang.String hostHeader(okhttp3.HttpUrl) -> a
    java.util.List immutableList(java.util.List) -> a
    java.util.List immutableList(java.lang.Object[]) -> a
    java.util.Map immutableMap(java.util.Map) -> a
    java.util.List intersect(java.lang.Object[],java.lang.Object[]) -> a
    java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[]) -> a
    boolean isAndroidGetsocknameError(java.lang.AssertionError) -> a
    okio.ByteString sha1(okio.ByteString) -> a
    int skipLeadingAsciiWhitespace(java.lang.String,int,int) -> a
    java.util.concurrent.ThreadFactory threadFactory(java.lang.String,boolean) -> a
    boolean contains(java.lang.String[],java.lang.String) -> b
    java.lang.String domainToAscii(java.lang.String) -> b
    boolean skipAll(okio.Source,int,java.util.concurrent.TimeUnit) -> b
    int skipTrailingAsciiWhitespace(java.lang.String,int,int) -> b
    java.lang.String trimSubstring(java.lang.String,int,int) -> c
    boolean verifyAsIpAddress(java.lang.String) -> c
okhttp3.internal.Util$1 -> c.d0.h$a:
    java.lang.String val$name -> a
    boolean val$daemon -> b
okhttp3.internal.Version -> c.d0.i:
    java.lang.String userAgent() -> a
okhttp3.internal.framed.ErrorCode -> c.d0.j.a:
    okhttp3.internal.framed.ErrorCode INVALID_CREDENTIALS -> u
    okhttp3.internal.framed.ErrorCode[] $VALUES -> v
    okhttp3.internal.framed.ErrorCode INADEQUATE_SECURITY -> s
    int spdyRstCode -> b
    okhttp3.internal.framed.ErrorCode HTTP_1_1_REQUIRED -> t
    int spdyGoAwayCode -> c
    okhttp3.internal.framed.ErrorCode CONNECT_ERROR -> q
    okhttp3.internal.framed.ErrorCode ENHANCE_YOUR_CALM -> r
    int httpCode -> a
    okhttp3.internal.framed.ErrorCode CANCEL -> o
    okhttp3.internal.framed.ErrorCode COMPRESSION_ERROR -> p
    okhttp3.internal.framed.ErrorCode FRAME_TOO_LARGE -> m
    okhttp3.internal.framed.ErrorCode REFUSED_STREAM -> n
    okhttp3.internal.framed.ErrorCode FLOW_CONTROL_ERROR -> k
    okhttp3.internal.framed.ErrorCode STREAM_CLOSED -> l
    okhttp3.internal.framed.ErrorCode STREAM_ALREADY_CLOSED -> i
    okhttp3.internal.framed.ErrorCode INTERNAL_ERROR -> j
    okhttp3.internal.framed.ErrorCode UNSUPPORTED_VERSION -> g
    okhttp3.internal.framed.ErrorCode STREAM_IN_USE -> h
    okhttp3.internal.framed.ErrorCode PROTOCOL_ERROR -> e
    okhttp3.internal.framed.ErrorCode INVALID_STREAM -> f
    okhttp3.internal.framed.ErrorCode NO_ERROR -> d
    okhttp3.internal.framed.ErrorCode fromHttp2(int) -> a
    okhttp3.internal.framed.ErrorCode fromSpdy3Rst(int) -> b
    okhttp3.internal.framed.ErrorCode fromSpdyGoAway(int) -> c
okhttp3.internal.framed.FrameReader -> c.d0.j.b:
    boolean nextFrame(okhttp3.internal.framed.FrameReader$Handler) -> a
    void readConnectionPreface() -> k
okhttp3.internal.framed.FrameReader$Handler -> c.d0.j.b$a:
    void ackSettings() -> a
    void data(boolean,int,okio.BufferedSource,int) -> a
    void goAway(int,okhttp3.internal.framed.ErrorCode,okio.ByteString) -> a
    void headers(boolean,boolean,int,int,java.util.List,okhttp3.internal.framed.HeadersMode) -> a
    void ping(boolean,int,int) -> a
    void priority(int,int,int,boolean) -> a
    void pushPromise(int,int,java.util.List) -> a
    void rstStream(int,okhttp3.internal.framed.ErrorCode) -> a
    void settings(boolean,okhttp3.internal.framed.Settings) -> a
    void windowUpdate(int,long) -> a
okhttp3.internal.framed.FrameWriter -> c.d0.j.c:
    void ackSettings(okhttp3.internal.framed.Settings) -> a
    void data(boolean,int,okio.Buffer,int) -> a
    void goAway(int,okhttp3.internal.framed.ErrorCode,byte[]) -> a
    void ping(boolean,int,int) -> a
    void pushPromise(int,int,java.util.List) -> a
    void rstStream(int,okhttp3.internal.framed.ErrorCode) -> a
    void synStream(boolean,boolean,int,int,java.util.List) -> a
    void windowUpdate(int,long) -> a
    void settings(okhttp3.internal.framed.Settings) -> b
    int maxDataLength() -> l
    void connectionPreface() -> m
okhttp3.internal.framed.FramedConnection -> c.d0.j.d:
    java.util.concurrent.ExecutorService executor -> v
    okhttp3.internal.framed.Settings peerSettings -> o
    okhttp3.internal.framed.FrameWriter frameWriter -> s
    long unacknowledgedBytesRead -> l
    okhttp3.internal.framed.Settings okHttpSettings -> n
    okhttp3.internal.framed.PushObserver pushObserver -> k
    boolean receivedInitialPeerSettings -> p
    okhttp3.internal.framed.FramedConnection$Reader readerRunnable -> t
    java.util.Set currentPushRequests -> u
    int lastGoodStreamId -> f
    int nextStreamId -> g
    java.net.Socket socket -> r
    okhttp3.internal.framed.Variant variant -> q
    okhttp3.internal.framed.FramedConnection$Listener listener -> c
    java.util.Map streams -> d
    java.util.concurrent.ExecutorService pushExecutor -> i
    java.util.Map pings -> j
    okhttp3.Protocol protocol -> a
    boolean shutdown -> h
    boolean client -> b
    long bytesLeftInWriteWindow -> m
    java.lang.String hostname -> e
    java.lang.String access$1100(okhttp3.internal.framed.FramedConnection) -> a
    void access$1200(okhttp3.internal.framed.FramedConnection,okhttp3.internal.framed.ErrorCode,okhttp3.internal.framed.ErrorCode) -> a
    boolean access$1300(okhttp3.internal.framed.FramedConnection,int) -> a
    void access$1400(okhttp3.internal.framed.FramedConnection,int,okio.BufferedSource,int,boolean) -> a
    void access$1500(okhttp3.internal.framed.FramedConnection,int,java.util.List,boolean) -> a
    boolean access$1602(okhttp3.internal.framed.FramedConnection,boolean) -> a
    void access$2200(okhttp3.internal.framed.FramedConnection,int,okhttp3.internal.framed.ErrorCode) -> a
    void access$2500(okhttp3.internal.framed.FramedConnection,boolean,int,int,okhttp3.internal.framed.Ping) -> a
    void access$2600(okhttp3.internal.framed.FramedConnection,int,java.util.List) -> a
    void close(okhttp3.internal.framed.ErrorCode,okhttp3.internal.framed.ErrorCode) -> a
    okhttp3.internal.framed.FramedStream newStream(int,java.util.List,boolean,boolean) -> a
    okhttp3.internal.framed.FramedStream newStream(java.util.List,boolean,boolean) -> a
    void pushDataLater(int,okio.BufferedSource,int,boolean) -> a
    void pushHeadersLater(int,java.util.List,boolean) -> a
    void pushRequestLater(int,java.util.List) -> a
    void setIdle(boolean) -> a
    void shutdown(okhttp3.internal.framed.ErrorCode) -> a
    void writeData(int,boolean,okio.Buffer,long) -> a
    void writePing(boolean,int,int,okhttp3.internal.framed.Ping) -> a
    boolean access$1600(okhttp3.internal.framed.FramedConnection) -> b
    int access$1702(okhttp3.internal.framed.FramedConnection,int) -> b
    boolean access$2302(okhttp3.internal.framed.FramedConnection,boolean) -> b
    void access$900(okhttp3.internal.framed.FramedConnection,boolean,int,int,okhttp3.internal.framed.Ping) -> b
    okhttp3.internal.framed.FramedStream getStream(int) -> b
    void writePingLater(boolean,int,int,okhttp3.internal.framed.Ping) -> b
    void writeSynReset(int,okhttp3.internal.framed.ErrorCode) -> b
    void writeWindowUpdateLater(int,long) -> b
    int access$1700(okhttp3.internal.framed.FramedConnection) -> c
    okhttp3.internal.framed.Ping access$2400(okhttp3.internal.framed.FramedConnection,int) -> c
    okhttp3.internal.framed.FramedStream removeStream(int) -> c
    void writeSynResetLater(int,okhttp3.internal.framed.ErrorCode) -> c
    int access$1800(okhttp3.internal.framed.FramedConnection) -> d
    void pushResetLater(int,okhttp3.internal.framed.ErrorCode) -> d
    boolean pushedStream(int) -> d
    java.util.Map access$1900(okhttp3.internal.framed.FramedConnection) -> e
    void addBytesToWriteWindow(long) -> e
    okhttp3.internal.framed.Ping removePing(int) -> e
    okhttp3.internal.framed.FramedConnection$Listener access$2000(okhttp3.internal.framed.FramedConnection) -> f
    boolean access$2300(okhttp3.internal.framed.FramedConnection) -> g
    okhttp3.internal.framed.PushObserver access$2700(okhttp3.internal.framed.FramedConnection) -> h
    java.util.Set access$2800(okhttp3.internal.framed.FramedConnection) -> i
    okhttp3.Protocol getProtocol() -> n
    int maxConcurrentStreams() -> o
    void sendConnectionPreface() -> p
    java.util.concurrent.ExecutorService access$2100() -> q
okhttp3.internal.framed.FramedConnection$1 -> c.d0.j.d$a:
    okhttp3.internal.framed.FramedConnection this$0 -> d
    int val$streamId -> b
    okhttp3.internal.framed.ErrorCode val$errorCode -> c
    void execute() -> b
okhttp3.internal.framed.FramedConnection$2 -> c.d0.j.d$b:
    okhttp3.internal.framed.FramedConnection this$0 -> d
    long val$unacknowledgedBytesRead -> c
    int val$streamId -> b
    void execute() -> b
okhttp3.internal.framed.FramedConnection$3 -> c.d0.j.d$c:
    okhttp3.internal.framed.Ping val$ping -> e
    okhttp3.internal.framed.FramedConnection this$0 -> f
    int val$payload2 -> d
    boolean val$reply -> b
    int val$payload1 -> c
    void execute() -> b
okhttp3.internal.framed.FramedConnection$4 -> c.d0.j.d$d:
    okhttp3.internal.framed.FramedConnection this$0 -> d
    java.util.List val$requestHeaders -> c
    int val$streamId -> b
    void execute() -> b
okhttp3.internal.framed.FramedConnection$5 -> c.d0.j.d$e:
    okhttp3.internal.framed.FramedConnection this$0 -> e
    java.util.List val$requestHeaders -> c
    int val$streamId -> b
    boolean val$inFinished -> d
    void execute() -> b
okhttp3.internal.framed.FramedConnection$6 -> c.d0.j.d$f:
    okio.Buffer val$buffer -> c
    okhttp3.internal.framed.FramedConnection this$0 -> f
    boolean val$inFinished -> e
    int val$byteCount -> d
    int val$streamId -> b
    void execute() -> b
okhttp3.internal.framed.FramedConnection$7 -> c.d0.j.d$g:
    okhttp3.internal.framed.FramedConnection this$0 -> d
    int val$streamId -> b
    okhttp3.internal.framed.ErrorCode val$errorCode -> c
    void execute() -> b
okhttp3.internal.framed.FramedConnection$Builder -> c.d0.j.d$h:
    okio.BufferedSink sink -> d
    okhttp3.internal.framed.FramedConnection$Listener listener -> e
    okio.BufferedSource source -> c
    okhttp3.internal.framed.PushObserver pushObserver -> g
    boolean client -> h
    okhttp3.Protocol protocol -> f
    java.net.Socket socket -> a
    java.lang.String hostname -> b
    okhttp3.Protocol access$000(okhttp3.internal.framed.FramedConnection$Builder) -> a
    okhttp3.internal.framed.FramedConnection build() -> a
    okhttp3.internal.framed.FramedConnection$Builder listener(okhttp3.internal.framed.FramedConnection$Listener) -> a
    okhttp3.internal.framed.FramedConnection$Builder protocol(okhttp3.Protocol) -> a
    okhttp3.internal.framed.FramedConnection$Builder socket(java.net.Socket,java.lang.String,okio.BufferedSource,okio.BufferedSink) -> a
    okhttp3.internal.framed.PushObserver access$100(okhttp3.internal.framed.FramedConnection$Builder) -> b
    boolean access$200(okhttp3.internal.framed.FramedConnection$Builder) -> c
    okhttp3.internal.framed.FramedConnection$Listener access$300(okhttp3.internal.framed.FramedConnection$Builder) -> d
    java.lang.String access$400(okhttp3.internal.framed.FramedConnection$Builder) -> e
    java.net.Socket access$500(okhttp3.internal.framed.FramedConnection$Builder) -> f
    okio.BufferedSink access$600(okhttp3.internal.framed.FramedConnection$Builder) -> g
    okio.BufferedSource access$700(okhttp3.internal.framed.FramedConnection$Builder) -> h
okhttp3.internal.framed.FramedConnection$Listener -> c.d0.j.d$i:
    okhttp3.internal.framed.FramedConnection$Listener REFUSE_INCOMING_STREAMS -> a
    void onSettings(okhttp3.internal.framed.FramedConnection) -> a
    void onStream(okhttp3.internal.framed.FramedStream) -> a
okhttp3.internal.framed.FramedConnection$Listener$1 -> c.d0.j.d$i$a:
    void onStream(okhttp3.internal.framed.FramedStream) -> a
okhttp3.internal.framed.FramedConnection$Reader -> c.d0.j.d$j:
    okhttp3.internal.framed.FramedConnection this$0 -> c
    okhttp3.internal.framed.FrameReader frameReader -> b
    void ackSettings() -> a
    void ackSettingsLater(okhttp3.internal.framed.Settings) -> a
    void data(boolean,int,okio.BufferedSource,int) -> a
    void goAway(int,okhttp3.internal.framed.ErrorCode,okio.ByteString) -> a
    void headers(boolean,boolean,int,int,java.util.List,okhttp3.internal.framed.HeadersMode) -> a
    void ping(boolean,int,int) -> a
    void priority(int,int,int,boolean) -> a
    void pushPromise(int,int,java.util.List) -> a
    void rstStream(int,okhttp3.internal.framed.ErrorCode) -> a
    void settings(boolean,okhttp3.internal.framed.Settings) -> a
    void windowUpdate(int,long) -> a
    void execute() -> b
okhttp3.internal.framed.FramedConnection$Reader$1 -> c.d0.j.d$j$a:
    okhttp3.internal.framed.FramedConnection$Reader this$1 -> c
    okhttp3.internal.framed.FramedStream val$newStream -> b
    void execute() -> b
okhttp3.internal.framed.FramedConnection$Reader$2 -> c.d0.j.d$j$b:
    okhttp3.internal.framed.FramedConnection$Reader this$1 -> b
    void execute() -> b
okhttp3.internal.framed.FramedConnection$Reader$3 -> c.d0.j.d$j$c:
    okhttp3.internal.framed.FramedConnection$Reader this$1 -> c
    okhttp3.internal.framed.Settings val$peerSettings -> b
    void execute() -> b
okhttp3.internal.framed.FramedStream -> c.d0.j.e:
    okhttp3.internal.framed.FramedStream$FramedDataSource source -> f
    okhttp3.internal.framed.FramedConnection connection -> d
    java.util.List responseHeaders -> e
    okhttp3.internal.framed.ErrorCode errorCode -> j
    long bytesLeftInWriteWindow -> b
    long unacknowledgedBytesRead -> a
    okhttp3.internal.framed.FramedStream$FramedDataSink sink -> g
    okhttp3.internal.framed.FramedStream$StreamTimeout writeTimeout -> i
    int id -> c
    okhttp3.internal.framed.FramedStream$StreamTimeout readTimeout -> h
    void access$1000(okhttp3.internal.framed.FramedStream) -> a
    void addBytesToWriteWindow(long) -> a
    void close(okhttp3.internal.framed.ErrorCode) -> a
    int getId() -> a
    void receiveData(okio.BufferedSource,int) -> a
    void receiveHeaders(java.util.List,okhttp3.internal.framed.HeadersMode) -> a
    okhttp3.internal.framed.FramedStream$StreamTimeout access$1100(okhttp3.internal.framed.FramedStream) -> b
    void closeLater(okhttp3.internal.framed.ErrorCode) -> b
    java.util.List getResponseHeaders() -> b
    void access$1200(okhttp3.internal.framed.FramedStream) -> c
    okio.Sink getSink() -> c
    void receiveRstStream(okhttp3.internal.framed.ErrorCode) -> c
    okhttp3.internal.framed.FramedConnection access$500(okhttp3.internal.framed.FramedStream) -> d
    boolean closeInternal(okhttp3.internal.framed.ErrorCode) -> d
    okio.Source getSource() -> d
    int access$600(okhttp3.internal.framed.FramedStream) -> e
    boolean isLocallyInitiated() -> e
    okhttp3.internal.framed.FramedStream$StreamTimeout access$700(okhttp3.internal.framed.FramedStream) -> f
    boolean isOpen() -> f
    okhttp3.internal.framed.ErrorCode access$800(okhttp3.internal.framed.FramedStream) -> g
    okio.Timeout readTimeout() -> g
    void access$900(okhttp3.internal.framed.FramedStream) -> h
    void receiveFin() -> h
    okio.Timeout writeTimeout() -> i
    void cancelStreamIfNecessary() -> j
    void checkOutNotClosed() -> k
    void waitForIo() -> l
okhttp3.internal.framed.FramedStream$1 -> c.d0.j.e$a:
okhttp3.internal.framed.FramedStream$FramedDataSink -> c.d0.j.e$b:
    okio.Buffer sendBuffer -> a
    boolean closed -> b
    okhttp3.internal.framed.FramedStream this$0 -> d
    boolean finished -> c
    boolean access$200(okhttp3.internal.framed.FramedStream$FramedDataSink) -> a
    boolean access$202(okhttp3.internal.framed.FramedStream$FramedDataSink,boolean) -> a
    void emitDataFrame(boolean) -> a
    void write(okio.Buffer,long) -> a
    boolean access$400(okhttp3.internal.framed.FramedStream$FramedDataSink) -> b
    okio.Timeout timeout() -> b
okhttp3.internal.framed.FramedStream$FramedDataSource -> c.d0.j.e$c:
    okhttp3.internal.framed.FramedStream this$0 -> f
    okio.Buffer readBuffer -> b
    okio.Buffer receiveBuffer -> a
    boolean finished -> e
    long maxByteCount -> c
    boolean closed -> d
    boolean access$100(okhttp3.internal.framed.FramedStream$FramedDataSource) -> a
    boolean access$102(okhttp3.internal.framed.FramedStream$FramedDataSource,boolean) -> a
    void receive(okio.BufferedSource,long) -> a
    boolean access$300(okhttp3.internal.framed.FramedStream$FramedDataSource) -> b
    long read(okio.Buffer,long) -> b
    okio.Timeout timeout() -> b
    void checkNotClosed() -> c
    void waitUntilReadable() -> d
okhttp3.internal.framed.FramedStream$StreamTimeout -> c.d0.j.e$d:
    okhttp3.internal.framed.FramedStream this$0 -> i
    java.io.IOException newTimeoutException(java.io.IOException) -> b
    void timedOut() -> i
    void exitAndThrowIfTimedOut() -> k
okhttp3.internal.framed.Header -> c.d0.j.f:
    okio.ByteString value -> b
    okio.ByteString TARGET_METHOD -> e
    okio.ByteString RESPONSE_STATUS -> d
    okio.ByteString name -> a
    okio.ByteString VERSION -> j
    okio.ByteString TARGET_SCHEME -> g
    okio.ByteString TARGET_PATH -> f
    int hpackSize -> c
    okio.ByteString TARGET_HOST -> i
    okio.ByteString TARGET_AUTHORITY -> h
okhttp3.internal.framed.HeadersMode -> c.d0.j.g:
    okhttp3.internal.framed.HeadersMode SPDY_REPLY -> b
    okhttp3.internal.framed.HeadersMode SPDY_SYN_STREAM -> a
    okhttp3.internal.framed.HeadersMode HTTP_20_HEADERS -> d
    okhttp3.internal.framed.HeadersMode SPDY_HEADERS -> c
    okhttp3.internal.framed.HeadersMode[] $VALUES -> e
    boolean failIfHeadersAbsent() -> a
    boolean failIfHeadersPresent() -> b
    boolean failIfStreamAbsent() -> c
    boolean failIfStreamPresent() -> d
okhttp3.internal.framed.Hpack -> c.d0.j.h:
    java.util.Map NAME_TO_FIRST_INDEX -> b
    okhttp3.internal.framed.Header[] STATIC_HEADER_TABLE -> a
    okhttp3.internal.framed.Header[] access$000() -> a
    okio.ByteString access$100(okio.ByteString) -> a
    java.util.Map access$200() -> b
    okio.ByteString checkLowercase(okio.ByteString) -> b
    java.util.Map nameToFirstIndex() -> c
okhttp3.internal.framed.Hpack$Reader -> c.d0.j.h$a:
    java.util.List headerList -> a
    okio.BufferedSource source -> b
    okhttp3.internal.framed.Header[] dynamicTable -> e
    int dynamicTableByteCount -> h
    int nextHeaderIndex -> f
    int headerCount -> g
    int maxDynamicTableByteCount -> d
    int headerTableSizeSetting -> c
    java.util.List getAndResetHeaderList() -> a
    void headerTableSizeSetting(int) -> a
    void insertIntoDynamicTable(int,okhttp3.internal.framed.Header) -> a
    int readInt(int,int) -> a
    int dynamicTableIndex(int) -> b
    okio.ByteString readByteString() -> b
    int evictToRecoverBytes(int) -> c
    void readHeaders() -> c
    void adjustDynamicTableByteCount() -> d
    okio.ByteString getName(int) -> d
    void clearDynamicTable() -> e
    boolean isStaticHeader(int) -> e
    int readByte() -> f
    void readIndexedHeader(int) -> f
    void readLiteralHeaderWithIncrementalIndexingIndexedName(int) -> g
    void readLiteralHeaderWithIncrementalIndexingNewName() -> g
    void readLiteralHeaderWithoutIndexingIndexedName(int) -> h
    void readLiteralHeaderWithoutIndexingNewName() -> h
okhttp3.internal.framed.Hpack$Writer -> c.d0.j.h$b:
    okio.Buffer out -> a
    void writeByteString(okio.ByteString) -> a
    void writeHeaders(java.util.List) -> a
    void writeInt(int,int,int) -> a
okhttp3.internal.framed.Http2 -> c.d0.j.i:
    okio.ByteString CONNECTION_PREFACE -> b
    java.util.logging.Logger logger -> a
    okio.ByteString access$000() -> a
    java.io.IOException access$200(java.lang.String,java.lang.Object[]) -> a
    int access$300(okio.BufferedSource) -> a
    int access$400(int,byte,short) -> a
    void access$600(okio.BufferedSink,int) -> a
    okhttp3.internal.framed.FrameReader newReader(okio.BufferedSource,boolean) -> a
    okhttp3.internal.framed.FrameWriter newWriter(okio.BufferedSink,boolean) -> a
    java.util.logging.Logger access$100() -> b
    java.lang.IllegalArgumentException access$500(java.lang.String,java.lang.Object[]) -> b
    int lengthWithoutPadding(int,byte,short) -> b
    int readMedium(okio.BufferedSource) -> b
    void writeMedium(okio.BufferedSink,int) -> b
    java.lang.IllegalArgumentException illegalArgument(java.lang.String,java.lang.Object[]) -> c
    java.io.IOException ioException(java.lang.String,java.lang.Object[]) -> d
okhttp3.internal.framed.Http2$ContinuationSource -> c.d0.j.i$a:
    okio.BufferedSource source -> a
    short padding -> f
    int streamId -> d
    byte flags -> c
    int left -> e
    int length -> b
    long read(okio.Buffer,long) -> b
    okio.Timeout timeout() -> b
    void readContinuationHeader() -> c
okhttp3.internal.framed.Http2$FrameLogger -> c.d0.j.i$b:
    java.lang.String[] TYPES -> a
    java.lang.String[] BINARY -> c
    java.lang.String[] FLAGS -> b
    java.lang.String formatFlags(byte,byte) -> a
    java.lang.String formatHeader(boolean,int,int,byte,byte) -> a
okhttp3.internal.framed.Http2$Reader -> c.d0.j.i$c:
    okhttp3.internal.framed.Http2$ContinuationSource continuation -> b
    okio.BufferedSource source -> a
    okhttp3.internal.framed.Hpack$Reader hpackReader -> d
    boolean client -> c
    boolean nextFrame(okhttp3.internal.framed.FrameReader$Handler) -> a
    void readData(okhttp3.internal.framed.FrameReader$Handler,int,byte,int) -> a
    java.util.List readHeaderBlock(int,short,byte,int) -> a
    void readPriority(okhttp3.internal.framed.FrameReader$Handler,int) -> a
    void readGoAway(okhttp3.internal.framed.FrameReader$Handler,int,byte,int) -> b
    void readHeaders(okhttp3.internal.framed.FrameReader$Handler,int,byte,int) -> c
    void readPing(okhttp3.internal.framed.FrameReader$Handler,int,byte,int) -> d
    void readPriority(okhttp3.internal.framed.FrameReader$Handler,int,byte,int) -> e
    void readPushPromise(okhttp3.internal.framed.FrameReader$Handler,int,byte,int) -> f
    void readRstStream(okhttp3.internal.framed.FrameReader$Handler,int,byte,int) -> g
    void readSettings(okhttp3.internal.framed.FrameReader$Handler,int,byte,int) -> h
    void readWindowUpdate(okhttp3.internal.framed.FrameReader$Handler,int,byte,int) -> i
    void readConnectionPreface() -> k
okhttp3.internal.framed.Http2$Writer -> c.d0.j.i$d:
    okio.BufferedSink sink -> a
    okio.Buffer hpackBuffer -> c
    okhttp3.internal.framed.Hpack$Writer hpackWriter -> d
    boolean closed -> f
    int maxFrameSize -> e
    boolean client -> b
    void ackSettings(okhttp3.internal.framed.Settings) -> a
    void data(boolean,int,okio.Buffer,int) -> a
    void dataFrame(int,byte,okio.Buffer,int) -> a
    void frameHeader(int,int,byte,byte) -> a
    void goAway(int,okhttp3.internal.framed.ErrorCode,byte[]) -> a
    void headers(boolean,int,java.util.List) -> a
    void ping(boolean,int,int) -> a
    void pushPromise(int,int,java.util.List) -> a
    void rstStream(int,okhttp3.internal.framed.ErrorCode) -> a
    void synStream(boolean,boolean,int,int,java.util.List) -> a
    void windowUpdate(int,long) -> a
    void settings(okhttp3.internal.framed.Settings) -> b
    void writeContinuationFrames(int,long) -> b
    int maxDataLength() -> l
    void connectionPreface() -> m
okhttp3.internal.framed.Huffman -> c.d0.j.j:
    int[] CODES -> b
    okhttp3.internal.framed.Huffman$Node root -> a
    okhttp3.internal.framed.Huffman INSTANCE -> d
    byte[] CODE_LENGTHS -> c
    void addCode(int,int,byte) -> a
    void buildTree() -> a
    byte[] decode(byte[]) -> a
    okhttp3.internal.framed.Huffman get() -> b
okhttp3.internal.framed.Huffman$Node -> c.d0.j.j$a:
    int symbol -> b
    int terminalBits -> c
    okhttp3.internal.framed.Huffman$Node[] children -> a
    okhttp3.internal.framed.Huffman$Node[] access$000(okhttp3.internal.framed.Huffman$Node) -> a
    int access$100(okhttp3.internal.framed.Huffman$Node) -> b
    int access$200(okhttp3.internal.framed.Huffman$Node) -> c
okhttp3.internal.framed.NameValueBlockReader -> c.d0.j.k:
    okio.BufferedSource source -> c
    okio.InflaterSource inflaterSource -> a
    int compressedLimit -> b
    int access$000(okhttp3.internal.framed.NameValueBlockReader) -> a
    int access$002(okhttp3.internal.framed.NameValueBlockReader,int) -> a
    void close() -> a
    java.util.List readNameValueBlock(int) -> a
    void doneReading() -> b
    okio.ByteString readByteString() -> c
okhttp3.internal.framed.NameValueBlockReader$1 -> c.d0.j.k$a:
    okhttp3.internal.framed.NameValueBlockReader this$0 -> b
    long read(okio.Buffer,long) -> b
okhttp3.internal.framed.NameValueBlockReader$2 -> c.d0.j.k$b:
okhttp3.internal.framed.Ping -> c.d0.j.l:
    java.util.concurrent.CountDownLatch latch -> a
    long sent -> b
    long received -> c
    void cancel() -> a
    void receive() -> b
    void send() -> c
okhttp3.internal.framed.PushObserver -> c.d0.j.m:
    okhttp3.internal.framed.PushObserver CANCEL -> a
    boolean onData(int,okio.BufferedSource,int,boolean) -> a
    boolean onHeaders(int,java.util.List,boolean) -> a
    boolean onRequest(int,java.util.List) -> a
    void onReset(int,okhttp3.internal.framed.ErrorCode) -> a
okhttp3.internal.framed.PushObserver$1 -> c.d0.j.m$a:
    boolean onData(int,okio.BufferedSource,int,boolean) -> a
    boolean onHeaders(int,java.util.List,boolean) -> a
    boolean onRequest(int,java.util.List) -> a
    void onReset(int,okhttp3.internal.framed.ErrorCode) -> a
okhttp3.internal.framed.Settings -> c.d0.j.n:
    int[] values -> d
    int persistValue -> b
    int persisted -> c
    int set -> a
    void clear() -> a
    int flags(int) -> a
    void merge(okhttp3.internal.framed.Settings) -> a
    okhttp3.internal.framed.Settings set(int,int,int) -> a
    int get(int) -> b
    int getHeaderTableSize() -> b
    int getInitialWindowSize(int) -> c
    int size() -> c
    int getMaxConcurrentStreams(int) -> d
    int getMaxFrameSize(int) -> e
    boolean isPersisted(int) -> f
    boolean isSet(int) -> g
    boolean persistValue(int) -> h
okhttp3.internal.framed.Spdy3 -> c.d0.j.o:
    byte[] DICTIONARY -> a
    okhttp3.internal.framed.FrameReader newReader(okio.BufferedSource,boolean) -> a
    okhttp3.internal.framed.FrameWriter newWriter(okio.BufferedSink,boolean) -> a
okhttp3.internal.framed.Spdy3$Reader -> c.d0.j.o$a:
    okio.BufferedSource source -> a
    okhttp3.internal.framed.NameValueBlockReader headerBlockReader -> c
    boolean client -> b
    java.io.IOException ioException(java.lang.String,java.lang.Object[]) -> a
    boolean nextFrame(okhttp3.internal.framed.FrameReader$Handler) -> a
    void readGoAway(okhttp3.internal.framed.FrameReader$Handler,int,int) -> a
    void readHeaders(okhttp3.internal.framed.FrameReader$Handler,int,int) -> b
    void readPing(okhttp3.internal.framed.FrameReader$Handler,int,int) -> c
    void readRstStream(okhttp3.internal.framed.FrameReader$Handler,int,int) -> d
    void readSettings(okhttp3.internal.framed.FrameReader$Handler,int,int) -> e
    void readSynReply(okhttp3.internal.framed.FrameReader$Handler,int,int) -> f
    void readSynStream(okhttp3.internal.framed.FrameReader$Handler,int,int) -> g
    void readWindowUpdate(okhttp3.internal.framed.FrameReader$Handler,int,int) -> h
    void readConnectionPreface() -> k
okhttp3.internal.framed.Spdy3$Writer -> c.d0.j.o$b:
    okio.BufferedSink headerBlockOut -> c
    okio.Buffer headerBlockBuffer -> b
    okio.BufferedSink sink -> a
    boolean closed -> e
    boolean client -> d
    void ackSettings(okhttp3.internal.framed.Settings) -> a
    void data(boolean,int,okio.Buffer,int) -> a
    void goAway(int,okhttp3.internal.framed.ErrorCode,byte[]) -> a
    void ping(boolean,int,int) -> a
    void pushPromise(int,int,java.util.List) -> a
    void rstStream(int,okhttp3.internal.framed.ErrorCode) -> a
    void sendDataFrame(int,int,okio.Buffer,int) -> a
    void synStream(boolean,boolean,int,int,java.util.List) -> a
    void windowUpdate(int,long) -> a
    void writeNameValueBlockToBuffer(java.util.List) -> a
    void settings(okhttp3.internal.framed.Settings) -> b
    int maxDataLength() -> l
    void connectionPreface() -> m
okhttp3.internal.framed.Variant -> c.d0.j.p:
    okhttp3.internal.framed.FrameReader newReader(okio.BufferedSource,boolean) -> a
    okhttp3.internal.framed.FrameWriter newWriter(okio.BufferedSink,boolean) -> a
okhttp3.internal.http.CacheRequest -> c.d0.k.a:
    void abort() -> a
    okio.Sink body() -> b
okhttp3.internal.http.CacheStrategy -> c.d0.k.b:
    okhttp3.Response cacheResponse -> b
    okhttp3.Request networkRequest -> a
    boolean isCacheable(okhttp3.Response,okhttp3.Request) -> a
okhttp3.internal.http.CacheStrategy$1 -> c.d0.k.b$a:
okhttp3.internal.http.CacheStrategy$Factory -> c.d0.k.b$b:
    java.util.Date lastModified -> f
    java.lang.String lastModifiedString -> g
    long receivedResponseMillis -> j
    long sentRequestMillis -> i
    java.util.Date servedDate -> d
    int ageSeconds -> l
    okhttp3.Response cacheResponse -> c
    java.lang.String etag -> k
    long nowMillis -> a
    okhttp3.Request request -> b
    java.lang.String servedDateString -> e
    java.util.Date expires -> h
    okhttp3.internal.http.CacheStrategy get() -> a
    boolean hasConditions(okhttp3.Request) -> a
    long cacheResponseAge() -> b
    long computeFreshnessLifetime() -> c
    okhttp3.internal.http.CacheStrategy getCandidate() -> d
    boolean isFreshnessLifetimeHeuristic() -> e
okhttp3.internal.http.HeaderParser -> c.d0.k.c:
    int parseSeconds(java.lang.String,int) -> a
    int skipUntil(java.lang.String,int,java.lang.String) -> a
    int skipWhitespace(java.lang.String,int) -> b
okhttp3.internal.http.Http1xStream -> c.d0.k.d:
    okio.BufferedSink sink -> c
    okio.BufferedSource source -> b
    okhttp3.internal.http.StreamAllocation streamAllocation -> a
    int state -> e
    okhttp3.internal.http.HttpEngine httpEngine -> d
    okio.BufferedSink access$300(okhttp3.internal.http.Http1xStream) -> a
    void access$400(okhttp3.internal.http.Http1xStream,okio.ForwardingTimeout) -> a
    int access$502(okhttp3.internal.http.Http1xStream,int) -> a
    okio.Sink createRequestBody(okhttp3.Request,long) -> a
    void detachTimeout(okio.ForwardingTimeout) -> a
    void finishRequest() -> a
    okio.Sink newFixedLengthSink(long) -> a
    okhttp3.ResponseBody openResponseBody(okhttp3.Response) -> a
    void setHttpEngine(okhttp3.internal.http.HttpEngine) -> a
    void writeRequest(okhttp3.Headers,java.lang.String) -> a
    void writeRequestBody(okhttp3.internal.http.RetryableSink) -> a
    void writeRequestHeaders(okhttp3.Request) -> a
    int access$500(okhttp3.internal.http.Http1xStream) -> b
    okio.Source getTransferStream(okhttp3.Response) -> b
    okio.Source newChunkedSource(okhttp3.internal.http.HttpEngine) -> b
    okio.Source newFixedLengthSource(long) -> b
    okhttp3.Response$Builder readResponseHeaders() -> b
    okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream) -> c
    okio.Sink newChunkedSink() -> c
    okhttp3.internal.http.StreamAllocation access$700(okhttp3.internal.http.Http1xStream) -> d
    okio.Source newUnknownLengthSource() -> d
    okhttp3.Headers readHeaders() -> e
    okhttp3.Response$Builder readResponse() -> f
okhttp3.internal.http.Http1xStream$1 -> c.d0.k.d$a:
okhttp3.internal.http.Http1xStream$AbstractSource -> c.d0.k.d$b:
    okhttp3.internal.http.Http1xStream this$0 -> c
    okio.ForwardingTimeout timeout -> a
    boolean closed -> b
    void endOfInput(boolean) -> a
    okio.Timeout timeout() -> b
okhttp3.internal.http.Http1xStream$ChunkedSink -> c.d0.k.d$c:
    okhttp3.internal.http.Http1xStream this$0 -> c
    okio.ForwardingTimeout timeout -> a
    boolean closed -> b
    void write(okio.Buffer,long) -> a
    okio.Timeout timeout() -> b
okhttp3.internal.http.Http1xStream$ChunkedSource -> c.d0.k.d$d:
    boolean hasMoreChunks -> e
    long bytesRemainingInChunk -> d
    okhttp3.internal.http.Http1xStream this$0 -> g
    okhttp3.internal.http.HttpEngine httpEngine -> f
    long read(okio.Buffer,long) -> b
    void readChunkSize() -> c
okhttp3.internal.http.Http1xStream$FixedLengthSink -> c.d0.k.d$e:
    okio.ForwardingTimeout timeout -> a
    long bytesRemaining -> c
    boolean closed -> b
    okhttp3.internal.http.Http1xStream this$0 -> d
    void write(okio.Buffer,long) -> a
    okio.Timeout timeout() -> b
okhttp3.internal.http.Http1xStream$FixedLengthSource -> c.d0.k.d$f:
    long bytesRemaining -> d
    okhttp3.internal.http.Http1xStream this$0 -> e
    long read(okio.Buffer,long) -> b
okhttp3.internal.http.Http1xStream$UnknownLengthSource -> c.d0.k.d$g:
    boolean inputExhausted -> d
    okhttp3.internal.http.Http1xStream this$0 -> e
    long read(okio.Buffer,long) -> b
okhttp3.internal.http.Http2xStream -> c.d0.k.e:
    java.util.List HTTP_2_SKIPPED_RESPONSE_HEADERS -> p
    java.util.List HTTP_2_SKIPPED_REQUEST_HEADERS -> o
    okio.ByteString ENCODING -> k
    okio.ByteString TE -> j
    okio.ByteString UPGRADE -> l
    okhttp3.internal.http.StreamAllocation streamAllocation -> a
    okio.ByteString KEEP_ALIVE -> g
    okio.ByteString HOST -> f
    okhttp3.internal.framed.FramedStream stream -> d
    okio.ByteString TRANSFER_ENCODING -> i
    okio.ByteString PROXY_CONNECTION -> h
    okio.ByteString CONNECTION -> e
    okhttp3.internal.framed.FramedConnection framedConnection -> b
    java.util.List SPDY_3_SKIPPED_RESPONSE_HEADERS -> n
    java.util.List SPDY_3_SKIPPED_REQUEST_HEADERS -> m
    okhttp3.internal.http.HttpEngine httpEngine -> c
    okhttp3.internal.http.StreamAllocation access$000(okhttp3.internal.http.Http2xStream) -> a
    okio.Sink createRequestBody(okhttp3.Request,long) -> a
    void finishRequest() -> a
    java.lang.String joinOnNull(java.lang.String,java.lang.String) -> a
    okhttp3.ResponseBody openResponseBody(okhttp3.Response) -> a
    okhttp3.Response$Builder readHttp2HeadersList(java.util.List) -> a
    void setHttpEngine(okhttp3.internal.http.HttpEngine) -> a
    void writeRequestBody(okhttp3.internal.http.RetryableSink) -> a
    void writeRequestHeaders(okhttp3.Request) -> a
    java.util.List http2HeadersList(okhttp3.Request) -> b
    okhttp3.Response$Builder readResponseHeaders() -> b
    okhttp3.Response$Builder readSpdy3HeadersList(java.util.List) -> b
    java.util.List spdy3HeadersList(okhttp3.Request) -> c
okhttp3.internal.http.Http2xStream$StreamFinishingSource -> c.d0.k.e$a:
    okhttp3.internal.http.Http2xStream this$0 -> b
okhttp3.internal.http.HttpDate -> c.d0.k.f:
    java.lang.ThreadLocal STANDARD_DATE_FORMAT -> a
    java.text.DateFormat[] BROWSER_COMPATIBLE_DATE_FORMATS -> c
    java.lang.String[] BROWSER_COMPATIBLE_DATE_FORMAT_STRINGS -> b
    java.lang.String format(java.util.Date) -> a
    java.util.Date parse(java.lang.String) -> a
okhttp3.internal.http.HttpDate$1 -> c.d0.k.f$a:
okhttp3.internal.http.HttpEngine -> c.d0.k.g:
    boolean callerWritesRequestBody -> n
    okio.Sink requestBodyOut -> l
    boolean forWebSocket -> o
    okhttp3.Response priorResponse -> c
    long sentRequestMillis -> e
    okhttp3.internal.http.StreamAllocation streamAllocation -> b
    okhttp3.internal.http.CacheRequest storeRequest -> p
    okhttp3.ResponseBody EMPTY_BODY -> r
    okhttp3.Response userResponse -> k
    okhttp3.Response cacheResponse -> j
    okhttp3.OkHttpClient client -> a
    okhttp3.internal.http.CacheStrategy cacheStrategy -> q
    okhttp3.Request networkRequest -> i
    boolean transparentGzip -> f
    boolean bufferRequestBody -> g
    okhttp3.Request userRequest -> h
    okio.BufferedSink bufferedRequestBody -> m
    okhttp3.internal.http.HttpStream httpStream -> d
    okhttp3.internal.http.HttpStream access$000(okhttp3.internal.http.HttpEngine) -> a
    okhttp3.Request access$102(okhttp3.internal.http.HttpEngine,okhttp3.Request) -> a
    okhttp3.Response cacheWritingResponse(okhttp3.internal.http.CacheRequest,okhttp3.Response) -> a
    void cancel() -> a
    okhttp3.Headers combine(okhttp3.Headers,okhttp3.Headers) -> a
    java.lang.String cookieHeader(java.util.List) -> a
    okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request) -> a
    boolean hasBody(okhttp3.Response) -> a
    boolean permitsRequestBody(okhttp3.Request) -> a
    void receiveHeaders(okhttp3.Headers) -> a
    okhttp3.internal.http.HttpEngine recover(java.io.IOException,okio.Sink) -> a
    boolean sameConnection(okhttp3.HttpUrl) -> a
    boolean validate(okhttp3.Response,okhttp3.Response) -> a
    okhttp3.Response access$200(okhttp3.internal.http.HttpEngine) -> b
    okhttp3.internal.http.StreamAllocation close() -> b
    okhttp3.Request networkRequest(okhttp3.Request) -> b
    okhttp3.Response stripBody(okhttp3.Response) -> b
    okhttp3.Request followUpRequest() -> c
    okhttp3.Response unzip(okhttp3.Response) -> c
    okhttp3.Connection getConnection() -> d
    okhttp3.Response getResponse() -> e
    void readResponse() -> f
    void releaseStreamAllocation() -> g
    void sendRequest() -> h
    void writingRequestHeaders() -> i
    okhttp3.internal.http.HttpStream connect() -> j
    void maybeCache() -> k
    okhttp3.Response readNetworkResponse() -> l
    boolean writeRequestHeadersEagerly() -> m
okhttp3.internal.http.HttpEngine$1 -> c.d0.k.g$a:
    long contentLength() -> o
    okhttp3.MediaType contentType() -> p
    okio.BufferedSource source() -> q
okhttp3.internal.http.HttpEngine$2 -> c.d0.k.g$b:
    okio.BufferedSink val$cacheBody -> d
    okio.BufferedSource val$source -> b
    okhttp3.internal.http.CacheRequest val$cacheRequest -> c
    boolean cacheRequestClosed -> a
    long read(okio.Buffer,long) -> b
    okio.Timeout timeout() -> b
okhttp3.internal.http.HttpEngine$NetworkInterceptorChain -> c.d0.k.g$c:
    int calls -> b
    okhttp3.internal.http.HttpEngine this$0 -> c
    int index -> a
    okhttp3.Connection connection() -> a
    okhttp3.Response proceed(okhttp3.Request) -> a
okhttp3.internal.http.HttpMethod -> c.d0.k.h:
    boolean invalidatesCache(java.lang.String) -> a
    boolean permitsRequestBody(java.lang.String) -> b
    boolean redirectsToGet(java.lang.String) -> c
    boolean requiresRequestBody(java.lang.String) -> d
okhttp3.internal.http.HttpStream -> c.d0.k.i:
    okio.Sink createRequestBody(okhttp3.Request,long) -> a
    void finishRequest() -> a
    okhttp3.ResponseBody openResponseBody(okhttp3.Response) -> a
    void setHttpEngine(okhttp3.internal.http.HttpEngine) -> a
    void writeRequestBody(okhttp3.internal.http.RetryableSink) -> a
    void writeRequestHeaders(okhttp3.Request) -> a
    okhttp3.Response$Builder readResponseHeaders() -> b
okhttp3.internal.http.OkHeaders -> c.d0.k.j:
    java.lang.String PREFIX -> a
    java.lang.String RECEIVED_MILLIS -> c
    java.lang.String SENT_MILLIS -> b
    long contentLength(okhttp3.Headers) -> a
    long contentLength(okhttp3.Request) -> a
    long contentLength(okhttp3.Response) -> a
    boolean isEndToEnd(java.lang.String) -> a
    long stringToLong(java.lang.String) -> b
okhttp3.internal.http.RealResponseBody -> c.d0.k.k:
    okio.BufferedSource source -> b
    okhttp3.Headers headers -> a
    long contentLength() -> o
    okhttp3.MediaType contentType() -> p
    okio.BufferedSource source() -> q
okhttp3.internal.http.RequestException -> c.d0.k.l:
okhttp3.internal.http.RequestLine -> c.d0.k.m:
    java.lang.String get(okhttp3.Request,java.net.Proxy$Type) -> a
    java.lang.String requestPath(okhttp3.HttpUrl) -> a
    boolean includeAuthorityInRequestLine(okhttp3.Request,java.net.Proxy$Type) -> b
okhttp3.internal.http.RetryableSink -> c.d0.k.n:
    okio.Buffer content -> c
    boolean closed -> a
    int limit -> b
    void write(okio.Buffer,long) -> a
    void writeToSocket(okio.Sink) -> a
    okio.Timeout timeout() -> b
    long contentLength() -> e
okhttp3.internal.http.RouteException -> c.d0.k.o:
    java.io.IOException lastException -> a
    java.lang.reflect.Method addSuppressedExceptionMethod -> b
    void addConnectException(java.io.IOException) -> a
    void addSuppressedIfPossible(java.io.IOException,java.io.IOException) -> a
    java.io.IOException getLastConnectException() -> a
okhttp3.internal.http.RouteSelector -> c.d0.k.p:
    okhttp3.internal.RouteDatabase routeDatabase -> b
    java.net.InetSocketAddress lastInetSocketAddress -> d
    java.util.List proxies -> e
    int nextInetSocketAddressIndex -> h
    int nextProxyIndex -> f
    java.util.List postponedRoutes -> i
    java.net.Proxy lastProxy -> c
    java.util.List inetSocketAddresses -> g
    okhttp3.Address address -> a
    void connectFailed(okhttp3.Route,java.io.IOException) -> a
    java.lang.String getHostString(java.net.InetSocketAddress) -> a
    boolean hasNext() -> a
    void resetNextInetSocketAddress(java.net.Proxy) -> a
    void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy) -> a
    okhttp3.Route next() -> b
    boolean hasNextInetSocketAddress() -> c
    boolean hasNextPostponed() -> d
    boolean hasNextProxy() -> e
    java.net.InetSocketAddress nextInetSocketAddress() -> f
    okhttp3.Route nextPostponed() -> g
    java.net.Proxy nextProxy() -> h
okhttp3.internal.http.StatusLine -> c.d0.k.q:
    okhttp3.Protocol protocol -> a
    int code -> b
    java.lang.String message -> c
    okhttp3.internal.http.StatusLine parse(java.lang.String) -> a
okhttp3.internal.http.StreamAllocation -> c.d0.k.r:
    okhttp3.Route route -> b
    okhttp3.internal.io.RealConnection connection -> e
    okhttp3.internal.http.RouteSelector routeSelector -> d
    okhttp3.ConnectionPool connectionPool -> c
    okhttp3.internal.http.HttpStream stream -> h
    boolean released -> f
    boolean canceled -> g
    okhttp3.Address address -> a
    void acquire(okhttp3.internal.io.RealConnection) -> a
    void cancel() -> a
    void connectionFailed(java.io.IOException) -> a
    void deallocate(boolean,boolean,boolean) -> a
    okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean) -> a
    okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean) -> a
    boolean recover(java.io.IOException,okio.Sink) -> a
    void streamFinished(boolean,okhttp3.internal.http.HttpStream) -> a
    okhttp3.internal.io.RealConnection connection() -> b
    okhttp3.internal.io.RealConnection findHealthyConnection(int,int,int,boolean,boolean) -> b
    boolean isRecoverable(java.io.IOException) -> b
    void release(okhttp3.internal.io.RealConnection) -> b
    void noNewStreams() -> c
    void release() -> d
    okhttp3.internal.RouteDatabase routeDatabase() -> e
okhttp3.internal.io.RealConnection -> c.d0.l.a:
    boolean noNewStreams -> m
    int allocationLimit -> k
    int successCount -> h
    okio.BufferedSource source -> i
    okhttp3.Handshake handshake -> e
    okhttp3.internal.framed.FramedConnection framedConnection -> g
    okhttp3.Route route -> b
    okhttp3.Protocol protocol -> f
    long idleAtNanos -> n
    java.net.Socket socket -> d
    java.util.List allocations -> l
    java.net.Socket rawSocket -> c
    okio.BufferedSink sink -> j
    void connect(int,int,int,java.util.List,boolean) -> a
    void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector) -> a
    void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector) -> a
    void createTunnel(int,int) -> a
    boolean isHealthy(boolean) -> a
    void onSettings(okhttp3.internal.framed.FramedConnection) -> a
    void onStream(okhttp3.internal.framed.FramedStream) -> a
    okhttp3.Route route() -> a
    void cancel() -> b
    okhttp3.Handshake handshake() -> c
    java.net.Socket socket() -> d
    okhttp3.Request createTunnelRequest() -> e
okhttp3.internal.tls.AndroidTrustRootIndex -> c.d0.m.a:
    javax.net.ssl.X509TrustManager trustManager -> a
    java.lang.reflect.Method findByIssuerAndSignatureMethod -> b
    java.security.cert.X509Certificate findByIssuerAndSignature(java.security.cert.X509Certificate) -> a
    okhttp3.internal.tls.TrustRootIndex get(javax.net.ssl.X509TrustManager) -> a
okhttp3.internal.tls.CertificateChainCleaner -> c.d0.m.b:
    okhttp3.internal.tls.TrustRootIndex trustRootIndex -> a
    java.util.List clean(java.util.List) -> a
    boolean verifySignature(java.security.cert.X509Certificate,java.security.cert.X509Certificate) -> a
okhttp3.internal.tls.DistinguishedNameParser -> c.d0.m.c:
    char[] chars -> g
    int cur -> f
    java.lang.String dn -> a
    int beg -> d
    int end -> e
    int length -> b
    int pos -> c
    java.lang.String escapedAV() -> a
    java.lang.String findMostSpecific(java.lang.String) -> a
    int getByte(int) -> a
    char getEscaped() -> b
    char getUTF8() -> c
    java.lang.String hexAV() -> d
    java.lang.String nextAT() -> e
    java.lang.String quotedAV() -> f
okhttp3.internal.tls.OkHostnameVerifier -> c.d0.m.d:
    okhttp3.internal.tls.OkHostnameVerifier INSTANCE -> a
    java.util.List allSubjectAltNames(java.security.cert.X509Certificate) -> a
    java.util.List getSubjectAltNames(java.security.cert.X509Certificate,int) -> a
    boolean verify(java.lang.String,java.security.cert.X509Certificate) -> a
    boolean verifyHostname(java.lang.String,java.lang.String) -> a
    boolean verifyHostname(java.lang.String,java.security.cert.X509Certificate) -> b
    boolean verifyIpAddress(java.lang.String,java.security.cert.X509Certificate) -> c
okhttp3.internal.tls.RealTrustRootIndex -> c.d0.m.e:
    java.util.Map subjectToCaCerts -> a
    java.security.cert.X509Certificate findByIssuerAndSignature(java.security.cert.X509Certificate) -> a
okhttp3.internal.tls.TrustRootIndex -> c.d0.m.f:
    java.security.cert.X509Certificate findByIssuerAndSignature(java.security.cert.X509Certificate) -> a
okio.AsyncTimeout -> okio.AsyncTimeout:
    long timeoutAt -> g
    boolean inQueue -> e
    okio.AsyncTimeout head -> h
    okio.AsyncTimeout next -> f
    boolean cancelScheduledTimeout(okio.AsyncTimeout) -> a
    java.io.IOException exit(java.io.IOException) -> a
    void exit(boolean) -> a
    void scheduleTimeout(okio.AsyncTimeout,long,boolean) -> a
    okio.Sink sink(okio.Sink) -> a
    okio.Source source(okio.Source) -> a
    java.io.IOException newTimeoutException(java.io.IOException) -> b
    long remainingNanos(long) -> b
    void enter() -> g
    boolean exit() -> h
    void timedOut() -> i
    okio.AsyncTimeout access$000() -> j
    okio.AsyncTimeout awaitTimeout() -> k
okio.AsyncTimeout$1 -> okio.AsyncTimeout$1:
    okio.AsyncTimeout this$0 -> b
    okio.Sink val$sink -> a
    void write(okio.Buffer,long) -> a
    okio.Timeout timeout() -> b
okio.AsyncTimeout$2 -> okio.AsyncTimeout$2:
    okio.Source val$source -> a
    okio.AsyncTimeout this$0 -> b
    long read(okio.Buffer,long) -> b
    okio.Timeout timeout() -> b
okio.Base64 -> okio.Base64:
    byte[] MAP -> a
    java.lang.String encode(byte[]) -> a
    java.lang.String encode(byte[],byte[]) -> a
okio.Buffer -> okio.Buffer:
    long size -> b
    okio.Segment head -> a
    byte[] DIGITS -> c
    okio.Buffer buffer() -> a
    okio.Buffer copyTo(okio.Buffer,long,long) -> a
    long indexOf(byte) -> a
    long indexOf(byte,long) -> a
    int read(byte[],int,int) -> a
    void readFully(byte[]) -> a
    java.lang.String readString(long,java.nio.charset.Charset) -> a
    okio.Buffer write(okio.ByteString) -> a
    okio.BufferedSink write(okio.ByteString) -> a
    void write(okio.Buffer,long) -> a
    long writeAll(okio.Source) -> a
    okio.Buffer writeHexadecimalUnsignedLong(long) -> a
    okio.BufferedSink writeHexadecimalUnsignedLong(long) -> a
    okio.Buffer writeIntLe(int) -> a
    okio.BufferedSink writeIntLe(int) -> a
    okio.Buffer writeUtf8(java.lang.String) -> a
    okio.Buffer writeUtf8(java.lang.String,int,int) -> a
    okio.BufferedSink writeUtf8(java.lang.String) -> a
    long read(okio.Buffer,long) -> b
    okio.ByteString readByteString(long) -> b
    okio.Timeout timeout() -> b
    okio.Segment writableSegment(int) -> b
    okio.Buffer write(byte[],int,int) -> b
    okio.Buffer emitCompleteSegments() -> c
    okio.BufferedSink emitCompleteSegments() -> c
    void require(long) -> c
    okio.Buffer writeUtf8CodePoint(int) -> c
    okio.BufferedSink emit() -> d
    byte[] readByteArray(long) -> d
    byte getByte(long) -> e
    short readShortLe() -> e
    java.lang.String readUtf8(long) -> f
    java.lang.String readUtf8LineStrict() -> f
    byte[] readByteArray() -> g
    java.lang.String readUtf8Line(long) -> g
    int readIntLe() -> h
    boolean exhausted() -> i
    long readHexadecimalUnsignedLong() -> j
    void clear() -> k
    long completeSegmentByteCount() -> l
    okio.ByteString readByteString() -> m
    java.lang.String readUtf8() -> n
    long size() -> o
okio.Buffer$1 -> okio.Buffer$1:
    okio.Buffer this$0 -> a
okio.Buffer$2 -> okio.Buffer$2:
    okio.Buffer this$0 -> a
okio.BufferedSink -> okio.BufferedSink:
    okio.Buffer buffer() -> a
    okio.BufferedSink write(okio.ByteString) -> a
    long writeAll(okio.Source) -> a
    okio.BufferedSink writeHexadecimalUnsignedLong(long) -> a
    okio.BufferedSink writeIntLe(int) -> a
    okio.BufferedSink writeUtf8(java.lang.String) -> a
    okio.BufferedSink emitCompleteSegments() -> c
    okio.BufferedSink emit() -> d
okio.BufferedSource -> okio.BufferedSource:
    okio.Buffer buffer() -> a
    long indexOf(byte) -> a
    okio.ByteString readByteString(long) -> b
    void require(long) -> c
    byte[] readByteArray(long) -> d
    short readShortLe() -> e
    java.lang.String readUtf8LineStrict() -> f
    byte[] readByteArray() -> g
    int readIntLe() -> h
    boolean exhausted() -> i
    long readHexadecimalUnsignedLong() -> j
okio.ByteString -> okio.ByteString:
    okio.ByteString EMPTY -> e
    char[] HEX_DIGITS -> d
    byte[] data -> a
    int hashCode -> b
    java.lang.String utf8 -> c
    java.lang.String base64() -> a
    int compareTo(okio.ByteString) -> a
    okio.ByteString digest(java.lang.String) -> a
    byte getByte(int) -> a
    okio.ByteString of(byte[]) -> a
    boolean rangeEquals(int,byte[],int,int) -> a
    void write(okio.Buffer) -> a
    okio.ByteString encodeUtf8(java.lang.String) -> b
    java.lang.String hex() -> b
    okio.ByteString md5() -> c
    int size() -> d
    okio.ByteString toAsciiLowercase() -> e
    byte[] toByteArray() -> f
    java.lang.String utf8() -> g
okio.DeflaterSink -> okio.DeflaterSink:
    okio.BufferedSink sink -> a
    java.util.zip.Deflater deflater -> b
    boolean closed -> c
    void deflate(boolean) -> a
    void write(okio.Buffer,long) -> a
    okio.Timeout timeout() -> b
    void finishDeflate() -> e
okio.ForwardingSink -> okio.ForwardingSink:
    okio.Sink delegate -> a
    void write(okio.Buffer,long) -> a
    okio.Timeout timeout() -> b
okio.ForwardingSource -> okio.ForwardingSource:
    okio.Source delegate -> a
    long read(okio.Buffer,long) -> b
    okio.Timeout timeout() -> b
okio.ForwardingTimeout -> okio.ForwardingTimeout:
    okio.Timeout delegate -> e
    okio.Timeout clearDeadline() -> a
    okio.Timeout deadlineNanoTime(long) -> a
    okio.ForwardingTimeout setDelegate(okio.Timeout) -> a
    okio.Timeout timeout(long,java.util.concurrent.TimeUnit) -> a
    okio.Timeout clearTimeout() -> b
    long deadlineNanoTime() -> c
    boolean hasDeadline() -> d
    void throwIfReached() -> e
    okio.Timeout delegate() -> g
okio.GzipSink -> okio.GzipSink:
    okio.BufferedSink sink -> a
    okio.DeflaterSink deflaterSink -> c
    java.util.zip.Deflater deflater -> b
    java.util.zip.CRC32 crc -> e
    boolean closed -> d
    void write(okio.Buffer,long) -> a
    okio.Timeout timeout() -> b
    void updateCrc(okio.Buffer,long) -> b
    void writeFooter() -> e
okio.GzipSource -> okio.GzipSource:
    okio.BufferedSource source -> b
    okio.InflaterSource inflaterSource -> d
    java.util.zip.Inflater inflater -> c
    java.util.zip.CRC32 crc -> e
    int section -> a
    void checkEqual(java.lang.String,int,int) -> a
    void updateCrc(okio.Buffer,long,long) -> a
    long read(okio.Buffer,long) -> b
    okio.Timeout timeout() -> b
    void consumeHeader() -> c
    void consumeTrailer() -> d
okio.InflaterSource -> okio.InflaterSource:
    okio.BufferedSource source -> a
    java.util.zip.Inflater inflater -> b
    int bufferBytesHeldByInflater -> c
    boolean closed -> d
    long read(okio.Buffer,long) -> b
    okio.Timeout timeout() -> b
    boolean refill() -> c
    void releaseInflatedBytes() -> d
okio.Okio -> okio.Okio:
    java.util.logging.Logger logger -> a
    java.util.logging.Logger access$000() -> a
    okio.BufferedSink buffer(okio.Sink) -> a
    okio.BufferedSource buffer(okio.Source) -> a
    okio.Sink sink(java.io.OutputStream,okio.Timeout) -> a
    okio.Sink sink(java.net.Socket) -> a
    okio.Source source(java.io.InputStream,okio.Timeout) -> a
    okio.Source source(java.net.Socket) -> b
    okio.AsyncTimeout timeout(java.net.Socket) -> c
okio.Okio$1 -> okio.Okio$1:
    okio.Timeout val$timeout -> a
    java.io.OutputStream val$out -> b
    void write(okio.Buffer,long) -> a
    okio.Timeout timeout() -> b
okio.Okio$2 -> okio.Okio$2:
    okio.Timeout val$timeout -> a
    java.io.InputStream val$in -> b
    long read(okio.Buffer,long) -> b
    okio.Timeout timeout() -> b
okio.Okio$3 -> okio.Okio$3:
    java.net.Socket val$socket -> i
    java.io.IOException newTimeoutException(java.io.IOException) -> b
    void timedOut() -> i
okio.RealBufferedSink -> okio.RealBufferedSink:
    okio.Buffer buffer -> a
    okio.Sink sink -> b
    boolean closed -> c
    boolean access$000(okio.RealBufferedSink) -> a
    okio.Buffer buffer() -> a
    okio.BufferedSink write(okio.ByteString) -> a
    void write(okio.Buffer,long) -> a
    long writeAll(okio.Source) -> a
    okio.BufferedSink writeHexadecimalUnsignedLong(long) -> a
    okio.BufferedSink writeIntLe(int) -> a
    okio.BufferedSink writeUtf8(java.lang.String) -> a
    okio.Timeout timeout() -> b
    okio.BufferedSink emitCompleteSegments() -> c
    okio.BufferedSink emit() -> d
okio.RealBufferedSink$1 -> okio.RealBufferedSink$1:
    okio.RealBufferedSink this$0 -> a
okio.RealBufferedSource -> okio.RealBufferedSource:
    okio.Buffer buffer -> a
    okio.Source source -> b
    boolean closed -> c
    boolean access$000(okio.RealBufferedSource) -> a
    okio.Buffer buffer() -> a
    long indexOf(byte) -> a
    long indexOf(byte,long) -> a
    boolean request(long) -> a
    long read(okio.Buffer,long) -> b
    okio.ByteString readByteString(long) -> b
    okio.Timeout timeout() -> b
    void require(long) -> c
    byte[] readByteArray(long) -> d
    short readShortLe() -> e
    java.lang.String readUtf8LineStrict() -> f
    byte[] readByteArray() -> g
    int readIntLe() -> h
    boolean exhausted() -> i
    long readHexadecimalUnsignedLong() -> j
okio.RealBufferedSource$1 -> okio.RealBufferedSource$1:
    okio.RealBufferedSource this$0 -> a
okio.Segment -> okio.Segment:
    byte[] data -> a
    boolean owner -> e
    int pos -> b
    okio.Segment prev -> g
    int limit -> c
    okio.Segment next -> f
    boolean shared -> d
    void compact() -> a
    okio.Segment push(okio.Segment) -> a
    okio.Segment split(int) -> a
    void writeTo(okio.Segment,int) -> a
    okio.Segment pop() -> b
okio.SegmentPool -> okio.SegmentPool:
    long byteCount -> b
    okio.Segment next -> a
    void recycle(okio.Segment) -> a
    okio.Segment take() -> a
okio.SegmentedByteString -> okio.SegmentedByteString:
    int[] directory -> g
    byte[][] segments -> f
    java.lang.String base64() -> a
    byte getByte(int) -> a
    boolean rangeEquals(int,okio.ByteString,int,int) -> a
    boolean rangeEquals(int,byte[],int,int) -> a
    void write(okio.Buffer) -> a
    java.lang.String hex() -> b
    int segment(int) -> b
    okio.ByteString md5() -> c
    int size() -> d
    okio.ByteString toAsciiLowercase() -> e
    byte[] toByteArray() -> f
    java.lang.String utf8() -> g
    okio.ByteString toByteString() -> h
okio.Sink -> okio.Sink:
    void write(okio.Buffer,long) -> a
    okio.Timeout timeout() -> b
okio.Source -> okio.Source:
    long read(okio.Buffer,long) -> b
    okio.Timeout timeout() -> b
okio.Timeout -> okio.Timeout:
    okio.Timeout NONE -> d
    long deadlineNanoTime -> b
    long timeoutNanos -> c
    boolean hasDeadline -> a
    okio.Timeout clearDeadline() -> a
    okio.Timeout deadlineNanoTime(long) -> a
    okio.Timeout timeout(long,java.util.concurrent.TimeUnit) -> a
    okio.Timeout clearTimeout() -> b
    long deadlineNanoTime() -> c
    boolean hasDeadline() -> d
    void throwIfReached() -> e
    long timeoutNanos() -> f
okio.Timeout$1 -> okio.Timeout$1:
    okio.Timeout deadlineNanoTime(long) -> a
    okio.Timeout timeout(long,java.util.concurrent.TimeUnit) -> a
    void throwIfReached() -> e
okio.Util -> okio.Util:
    java.nio.charset.Charset UTF_8 -> a
    boolean arrayRangeEquals(byte[],int,byte[],int,int) -> a
    void checkOffsetAndCount(long,long,long) -> a
    int reverseBytesInt(int) -> a
    short reverseBytesShort(short) -> a
    void sneakyRethrow(java.lang.Throwable) -> a
    void sneakyThrow2(java.lang.Throwable) -> b
